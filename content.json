[{"title":"【JT808】JT808服务虚拟终端预发布v0.0.x版本","excerpt":"<h2>预发布版本 v0.0.x 功能（x指代多个版本）</h2>\n<ul>\n<li>完成基本程序结构</li>\n<li>支持自动升级（预发布版本暂未使用）</li>\n<li>支持终端注册、终端注册应答命令</li>\n<li>支持终端鉴权、平台通用应答命令</li>\n<li>支持终端注销命令</li>\n<li>支持终端心跳命令（心跳间隔 30s）</li>\n<li>支持 JT/T 808 2011、2013、2019 版本协议的切换（尚不完整）</li>\n<li>支持链接自动注册、鉴权功能</li>\n</ul>\n","url":"/2020/10/07/车联网/【JT808】JT808服务虚拟终端预发布v0.0.x版本","fromDate":"2020-10-07","category":"车联网","text":"<h2>预发布版本 v0.0.x 功能（x指代多个版本）</h2>\n<ul>\n<li>完成基本程序结构</li>\n<li>支持自动升级（预发布版本暂未使用）</li>\n<li>支持终端注册、终端注册应答命令</li>\n<li>支持终端鉴权、平台通用应答命令</li>\n<li>支持终端注销命令</li>\n<li>支持终端心跳命令（心跳间隔 30s）</li>\n<li>支持 JT/T 808 2011、2013、2019 版本协议的切换（尚不完整）</li>\n<li>支持链接自动注册、鉴权功能</li>\n</ul>\n<!-- more -->\n<h2>至正式发布版本 v1.0.0 计划</h2>\n<ul>\n<li>支持位置信息汇报</li>\n<li>支持事件报告</li>\n<li>支持信息点播、取消</li>\n<li>支持行驶记录仪数据上传</li>\n<li>支持电子运单上报</li>\n<li>支持驾驶员身份信息采集上报</li>\n<li>支持定位数据批量上传</li>\n<li>支持 CAN 总线数据上传</li>\n<li>支持多媒体事件信息上传</li>\n<li>支持多媒体数据上传</li>\n<li>支持数据上行透传</li>\n<li>支持数据压缩上报</li>\n<li>支持终端 RSA 公钥</li>\n</ul>\n<h2>使用</h2>\n<p>以下是 windows 安装版本下载链接：</p>\n<ul>\n<li>链接：<a href=\"https://pan.baidu.com/s/1A2CD2Sy6pb50ILPuYO_kxA\">https://pan.baidu.com/s/1A2CD2Sy6pb50ILPuYO_kxA</a></li>\n<li>提取码：<code>9vbg</code></li>\n</ul>\n<p>下载双击运行安装即可。</p>\n<p>注意：<code>mac</code> 或者 <code>linux</code> 用户请自行使用源码打包，或者单独邮件联系作者获取安装包（不约定时间）。</p>\n","hasMore":true,"tags":["JT808"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【JT808】JT808服务虚拟终端预发布v0.0.x版本\ntags:\n  - JT808\ncategories: 车联网\ndate: 2020-10-07\nstatus: published\n\n---\n\n## 预发布版本 v0.0.x 功能（x指代多个版本）\n\n- 完成基本程序结构\n- 支持自动升级（预发布版本暂未使用）\n- 支持终端注册、终端注册应答命令\n- 支持终端鉴权、平台通用应答命令\n- 支持终端注销命令\n- 支持终端心跳命令（心跳间隔 30s）\n- 支持 JT/T 808 2011、2013、2019 版本协议的切换（尚不完整）\n- 支持链接自动注册、鉴权功能\n\n<!-- more -->\n\n## 至正式发布版本 v1.0.0 计划\n\n- 支持位置信息汇报\n- 支持事件报告\n- 支持信息点播、取消\n- 支持行驶记录仪数据上传\n- 支持电子运单上报\n- 支持驾驶员身份信息采集上报\n- 支持定位数据批量上传\n- 支持 CAN 总线数据上传\n- 支持多媒体事件信息上传\n- 支持多媒体数据上传\n- 支持数据上行透传\n- 支持数据压缩上报\n- 支持终端 RSA 公钥\n\n## 使用\n\n以下是 windows 安装版本下载链接：\n\n- 链接：[https://pan.baidu.com/s/1A2CD2Sy6pb50ILPuYO_kxA](https://pan.baidu.com/s/1A2CD2Sy6pb50ILPuYO_kxA) \n- 提取码：`9vbg` \n\n下载双击运行安装即可。\n\n注意：`mac` 或者 `linux` 用户请自行使用源码打包，或者单独邮件联系作者获取安装包（不约定时间）。\n"},{"title":"【JT808】JT808服务发布v1.0.0版本","excerpt":"<h2>版本 v1.0.0 功能</h2>\n<ul>\n<li>支持内嵌或者服务数据库 <code>HsqlDB</code>（理论上兼容 <code>MariaDB</code>、<code>Mysql</code> 数据库，如果遇到问题可以提交 <a href=\"https://github.com/iov-pro/jt808-server/issues\"><code>ISSUE</code></a>）</li>\n<li>支持自动创建表结构</li>\n<li>支持多租户的数据结构</li>\n<li>支持完整存储 808 协议相关数据</li>\n<li>依赖 <a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">spring-boot-starter-jt808</a> 最新版本</li>\n<li>默认会添加测试用设备和车辆</li>\n</ul>\n","url":"/2020/10/06/车联网/【JT808】JT808服务发布v1.0.0版本","fromDate":"2020-10-06","category":"车联网","text":"<h2>版本 v1.0.0 功能</h2>\n<ul>\n<li>支持内嵌或者服务数据库 <code>HsqlDB</code>（理论上兼容 <code>MariaDB</code>、<code>Mysql</code> 数据库，如果遇到问题可以提交 <a href=\"https://github.com/iov-pro/jt808-server/issues\"><code>ISSUE</code></a>）</li>\n<li>支持自动创建表结构</li>\n<li>支持多租户的数据结构</li>\n<li>支持完整存储 808 协议相关数据</li>\n<li>依赖 <a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">spring-boot-starter-jt808</a> 最新版本</li>\n<li>默认会添加测试用设备和车辆</li>\n</ul>\n<!-- more -->\n<h2>计划</h2>\n<ul>\n<li>支持下发指令接口（HTTP）</li>\n<li>支持基于 <code>Oauth2</code> 的权限控制</li>\n<li>支持邮件通知功能</li>\n<li>支持动态扩展对外数据提供接口（HTTP）</li>\n<li>支持RSA加密</li>\n<li>（待定）</li>\n</ul>\n<h2>使用</h2>\n<blockquote>\n<p>要求JDK版本在15及以上，否则需要自行使用源码打包。</p>\n</blockquote>\n<p>以下是已经打好的jar包链接：</p>\n<ul>\n<li>链接：<a href=\"https://pan.baidu.com/s/1Mf7ycHFb3MHMRIlvYbjRfw\">https://pan.baidu.com/s/1Mf7ycHFb3MHMRIlvYbjRfw</a></li>\n<li>提取码：<code>1g2r</code></li>\n</ul>\n<p>以下是默认配置（默认不开启 WEB 服务）：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br><span class=\"line\">  servlet:</span><br><span class=\"line\">    contextPath: /</span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  main:</span><br><span class=\"line\">    allow-bean-definition-overriding: true</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: jt808-server</span><br><span class=\"line\">  jpa:</span><br><span class=\"line\">    show-sql: true</span><br><span class=\"line\">    format-sql: true</span><br><span class=\"line\">    open-in-view: false</span><br><span class=\"line\">    hibernate:</span><br><span class=\"line\">      ddl-auto: update</span><br><span class=\"line\">      dialect: org.hibernate.dialect.HSQLDialect</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    url: jdbc:hsqldb:file:${user.dir}/target/jt808</span><br><span class=\"line\">    username: sa</span><br><span class=\"line\">    password:</span><br><span class=\"line\">    driver-class-name: org.hsqldb.jdbc.JDBCDriver</span><br><span class=\"line\">    type: com.zaxxer.hikari.HikariDataSource</span><br><span class=\"line\">    hikari:</span><br><span class=\"line\">      minimum-idle: 5</span><br><span class=\"line\">      maximum-pool-size: 10</span><br><span class=\"line\">      auto-commit: true</span><br><span class=\"line\">      idle-timeout: 20000</span><br><span class=\"line\">      pool-name: hikari</span><br><span class=\"line\">      max-lifetime: 30000</span><br><span class=\"line\">      connection-timeout: 30000</span><br><span class=\"line\">      connection-test-query: SELECT 1 FROM INFORMATION\\_SCHEMA.SYSTEM\\_USERS</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: native</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis:</span><br><span class=\"line\">  type-aliases-package: com.zhoyq.server.jt808.entity</span><br><span class=\"line\">  mapper-locations: classpath:mapper/*.xml</span><br><span class=\"line\"></span><br><span class=\"line\">jt808:</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  use: mina</span><br><span class=\"line\">  protocol: tcp</span><br><span class=\"line\">  port: 10001</span><br><span class=\"line\">  auth: true</span><br><span class=\"line\">  # 终端注销 0003 不推荐开放，一般终端都会存储鉴权码，防止恶意注销</span><br><span class=\"line\">  authMsgId: &quot;0003,0100,0102&quot;</span><br><span class=\"line\">  processCount: 2</span><br><span class=\"line\">  corePoolSize: 1</span><br><span class=\"line\">  maximumPoolSize: 10</span><br><span class=\"line\">  # 单位毫秒</span><br><span class=\"line\">  keepAliveTime: 1000</span><br><span class=\"line\">  # 单位秒</span><br><span class=\"line\">  idleTime: 10</span><br><span class=\"line\">  idleCount: 6</span><br><span class=\"line\">  readBufferSize: 2048</span><br><span class=\"line\">  packageLength: 1024</span><br><span class=\"line\">  threadCorePoolSize: 1</span><br><span class=\"line\">  threadMaximumPoolSize: 10</span><br><span class=\"line\">  # 单位毫秒</span><br><span class=\"line\">  threadKeepAliveTime: 1000</span><br><span class=\"line\">  masterSize: 1</span><br><span class=\"line\">  slaveSize: 10</span><br><span class=\"line\">  tcpNoDelay: true</span><br><span class=\"line\">  keepAlive: true</span><br></pre></td></tr></tbody></table></figure>\n<p>下载好jar包，可以直接使用默认配置启动运行：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar &lt;jarName&gt;.jar</span><br></pre></td></tr></tbody></table></figure>\n<p>或者使用自定义配置，启动运行：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar &lt;jarName&gt;.jar --spring.config.location=path/to/config/file</span><br></pre></td></tr></tbody></table></figure>\n<p>再次提醒，使用已经打好的jar包，请使用15版本及以上的JDK运行。</p>\n","hasMore":true,"tags":["JT808"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【JT808】JT808服务发布v1.0.0版本\ntags:\n  - JT808\ncategories: 车联网\ndate: 2020-10-06\nstatus: published\n\n---\n\n## 版本 v1.0.0 功能\n\n- 支持内嵌或者服务数据库 `HsqlDB`（理论上兼容 `MariaDB`、`Mysql` 数据库，如果遇到问题可以提交 [`ISSUE`](https://github.com/iov-pro/jt808-server/issues)）\n- 支持自动创建表结构\n- 支持多租户的数据结构\n- 支持完整存储 808 协议相关数据\n- 依赖 [spring-boot-starter-jt808](https://github.com/zhoyq/spring-boot-starter-jt808) 最新版本\n- 默认会添加测试用设备和车辆\n\n<!-- more -->\n\n## 计划\n\n- 支持下发指令接口（HTTP）\n- 支持基于 `Oauth2` 的权限控制\n- 支持邮件通知功能\n- 支持动态扩展对外数据提供接口（HTTP）\n- 支持RSA加密\n- （待定）\n\n## 使用\n\n> 要求JDK版本在15及以上，否则需要自行使用源码打包。\n\n以下是已经打好的jar包链接：\n\n- 链接：[https://pan.baidu.com/s/1Mf7ycHFb3MHMRIlvYbjRfw](https://pan.baidu.com/s/1Mf7ycHFb3MHMRIlvYbjRfw) \n- 提取码：`1g2r`\n\n以下是默认配置（默认不开启 WEB 服务）：\n\n```yml\nserver:\n  port: 8080\n  servlet:\n    contextPath: /\n\nspring:\n  main:\n    allow-bean-definition-overriding: true\n  application:\n    name: jt808-server\n  jpa:\n    show-sql: true\n    format-sql: true\n    open-in-view: false\n    hibernate:\n      ddl-auto: update\n      dialect: org.hibernate.dialect.HSQLDialect\n  datasource:\n    url: jdbc:hsqldb:file:${user.dir}/target/jt808\n    username: sa\n    password:\n    driver-class-name: org.hsqldb.jdbc.JDBCDriver\n    type: com.zaxxer.hikari.HikariDataSource\n    hikari:\n      minimum-idle: 5\n      maximum-pool-size: 10\n      auto-commit: true\n      idle-timeout: 20000\n      pool-name: hikari\n      max-lifetime: 30000\n      connection-timeout: 30000\n      connection-test-query: SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS\n  profiles:\n    active: native\n\nmybatis:\n  type-aliases-package: com.zhoyq.server.jt808.entity\n  mapper-locations: classpath:mapper/*.xml\n\njt808:\n  enabled: true\n  use: mina\n  protocol: tcp\n  port: 10001\n  auth: true\n  # 终端注销 0003 不推荐开放，一般终端都会存储鉴权码，防止恶意注销\n  authMsgId: \"0003,0100,0102\"\n  processCount: 2\n  corePoolSize: 1\n  maximumPoolSize: 10\n  # 单位毫秒\n  keepAliveTime: 1000\n  # 单位秒\n  idleTime: 10\n  idleCount: 6\n  readBufferSize: 2048\n  packageLength: 1024\n  threadCorePoolSize: 1\n  threadMaximumPoolSize: 10\n  # 单位毫秒\n  threadKeepAliveTime: 1000\n  masterSize: 1\n  slaveSize: 10\n  tcpNoDelay: true\n  keepAlive: true\n```\n\n下载好jar包，可以直接使用默认配置启动运行：\n\n```bash\njava -jar <jarName>.jar\n```\n\n或者使用自定义配置，启动运行：\n\n```bash\njava -jar <jarName>.jar --spring.config.location=path/to/config/file\n```\n\n再次提醒，使用已经打好的jar包，请使用15版本及以上的JDK运行。\n"},{"title":"【JT808】Spring Boot Stater Jt808 简单源码解读","excerpt":"<p>新开源 <a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">Spring Boot Starter Jt808</a> 已经有一段时间了，新版本已经支持了 <code>2011</code>、<code>2013</code>、<code>2019</code> 版本的协议解析，并完善了自定义消息的功能，还是值得期待的。</p>\n<p>本文主要说明 <a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">Spring Boot Starter Jt808</a> 的启动流程，配置项以及一些细节，读懂本文需要先了解字节码和 <code>SpringBoot</code> 等技术知识。</p>\n","url":"/2020/05/30/车联网/【JT808】Spring Boot Stater Jt808 简单源码解读","fromDate":"2020-05-30","category":"车联网","text":"<p>新开源 <a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">Spring Boot Starter Jt808</a> 已经有一段时间了，新版本已经支持了 <code>2011</code>、<code>2013</code>、<code>2019</code> 版本的协议解析，并完善了自定义消息的功能，还是值得期待的。</p>\n<p>本文主要说明 <a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">Spring Boot Starter Jt808</a> 的启动流程，配置项以及一些细节，读懂本文需要先了解字节码和 <code>SpringBoot</code> 等技术知识。</p>\n<!-- more -->\n<h2>启动服务</h2>\n<p>项目依赖 <code>SpringBoot</code>，所以启动按照 <code>Spring</code> 的逻辑需要有一个启动注解。于是我们先从 <code>EnableJt808Server</code> 这个注解开始。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...</span><br><span class=\"line\">@Import({Jt808Starter.class, Jt808Config.class, SimpleBeanConfig.class})</span><br><span class=\"line\">public @interface EnableJt808Server {}</span><br></pre></td></tr></tbody></table></figure>\n<p><code>EnableJt808Server</code> 通过 <code>Import</code> 注解引入了 <code>Jt808Starter</code>、<code>Jt808Config</code>、<code>SimpleBeanConfig</code> 三个 Bean，我们依次看一下这三个 Bean 都是什么作用。</p>\n<p><strong>Jt808Config</strong></p>\n<p>顾名思义，<code>Jt808Config</code> 是用来承载 jt808 服务的配置的，关于配置项的详细信息可以在下文中找到。这里只说明这个类的作用。</p>\n<p>配置类使用直接赋值的方式为配置项添加默认值。</p>\n<p><strong>SimpleBeanConfig</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@ConditionalOnMissingBean(DataService.class)</span><br><span class=\"line\">public DataService dataService() {</span><br><span class=\"line\">    log.info(&quot;use default data service Bean.&quot;);</span><br><span class=\"line\">    return new SimpleDataServiceAdapter(byteArrHelper);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@ConditionalOnMissingBean(CacheService.class)</span><br><span class=\"line\">public CacheService sessionService(){</span><br><span class=\"line\">    log.info(&quot;use default session service Bean.&quot;);</span><br><span class=\"line\">    return new HashMapCacheService();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>在 1.2.2 版本里为了简化用户入门难度增加了默认 Bean 配置，所以用户如果不定义缓存 Bean <code>CacheService</code> 的话应该会有默认的 Bean 顶替，但是持久化服务还是需要用户提供的，默认提供的Bean <code>DataService</code> 是不能接收消息的，只是能够保证启动成功。同时用户的主要业务逻辑也是在 <code>DataService</code> 实现类里。</p>\n<ul>\n<li>系统里默认提供了基于 <code>ConcurrentHashMap</code> 的缓存。</li>\n<li>数据层提供的类仅仅是添加了日志记录而已，并且不能通过任何客户端的鉴权。</li>\n</ul>\n<p><strong>Jt808Starter</strong></p>\n<p>这里定义了启动逻辑，首先定义了处理持久化需要的线程池，线程命名使用 <code>jt808-mina-thread-pool-db</code> 前缀，方便调试。</p>\n<p>然后是加载 <code>com.zhoyq.server.jt808.starter</code> 包下的所有 Bean。</p>\n<p>再次是程序启动事件 <code>ApplicationStartedEvent</code> 程序启动成功后会运行 <code>onApplicationEvent</code> 方法中的逻辑。</p>\n<ul>\n<li>检查是否启用 Jt808 服务。</li>\n<li>获取数据库中的历史数据，并存储到缓存中。</li>\n<li>获取用户配置使用的底层服务实现（Mina或者Netty），并启动。</li>\n</ul>\n<blockquote>\n<p>这里需要注意的是，在启动完成后 <code>PackHandlerManagement</code> 也处理了一部分启动逻辑，这里把消息包处理器全部收集起来并存储到缓存中待用。</p>\n</blockquote>\n<p>下面就是 <code>Mina</code> 或者 <code>Netty</code> 的启动了。</p>\n<p><code>Mina</code> 启动的时候，加载的关于编码解码的工厂类是 <code>Jt808CodecFactory</code>，这里定义了处理消息包边界的方法逻辑。<code>Netty</code> 启动的时候，加载的解码器和编码器是 <code>Jt808NettyDecoder</code>、<code>Jt808NettyEncoder</code>，同样是处理消息边界的方法和逻辑。</p>\n<blockquote>\n<p>这里由于编码解码没有进一步封装，会有部分源码重复，会在后期优化的时候处理掉。</p>\n</blockquote>\n<p>下面是核心逻辑：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 有数据进入 开始读取数据</span><br><span class=\"line\">if (in.remaining() &gt; 0) {</span><br><span class=\"line\">    // 标记数据位置 待还原</span><br><span class=\"line\">    in.mark();</span><br><span class=\"line\">    // 读取第一个字节</span><br><span class=\"line\">    byte byteBuf = in.get();</span><br><span class=\"line\">    // 判断第一个字节是否等于 MSG_BROKER = 0x7E</span><br><span class=\"line\">    if( byteBuf == MSG_BROKER ){</span><br><span class=\"line\">        // 等于 则 还原读取情况</span><br><span class=\"line\">        in.reset();</span><br><span class=\"line\">        // 读取前五个字节</span><br><span class=\"line\">        byte[] bodyProp = new byte[5];</span><br><span class=\"line\">        // 标记 待还原读取情况</span><br><span class=\"line\">        in.mark();</span><br><span class=\"line\">        // 获取消息体属性数据</span><br><span class=\"line\">        in.get(bodyProp, 0, 5);</span><br><span class=\"line\">        byte[] body = new byte[]{bodyProp[3],bodyProp[4]};</span><br><span class=\"line\">        // 获取消息体属性中的消息长度信息</span><br><span class=\"line\">        int sizeBuf = jt808Helper.getMsgBodyLength(body);</span><br><span class=\"line\">        // 获取消息体中的分包信息</span><br><span class=\"line\">        boolean b = jt808Helper.hasPackage(body);</span><br><span class=\"line\">        int size;</span><br><span class=\"line\">        if(b){</span><br><span class=\"line\">            size = sizeBuf + MEG_MIN_LEN_WITH_PKG;</span><br><span class=\"line\">        }else{</span><br><span class=\"line\">            size = sizeBuf + MSG_MIN_LEN;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        // 还原读取情况</span><br><span class=\"line\">        in.reset();</span><br><span class=\"line\">        log.trace(&quot;the real pkg length is &quot; + size);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 通过 size 判断消息是否够一包 如果消息内容不够，则重置，相当于不读取</span><br><span class=\"line\">        if (size &gt; in.remaining() || size &lt; MSG_MIN_LEN ) {</span><br><span class=\"line\">            // 标记</span><br><span class=\"line\">            in.mark();</span><br><span class=\"line\">            // 读取以显示</span><br><span class=\"line\">            byte[] bytes = new byte[in.remaining()];</span><br><span class=\"line\">            in.get(bytes, 0, in.remaining());</span><br><span class=\"line\">            // 还原</span><br><span class=\"line\">            in.reset();</span><br><span class=\"line\">            log.trace(&quot;short data length &quot;+in.remaining()+&quot; data &quot;+ byteArrHelper.toHexString(bytes) +&quot; go to reread &quot; + session.getRemoteAddress());</span><br><span class=\"line\">            // 数据不全 最后返回 false 继续接收数据</span><br><span class=\"line\">        } else {</span><br><span class=\"line\">            // 消息内容够一包 则 继续读取</span><br><span class=\"line\">            byte[] bytes = new byte[size];</span><br><span class=\"line\">            in.get(bytes, 0, size);</span><br><span class=\"line\">            // 验证得到的数据是否正确</span><br><span class=\"line\">            if( bytes[bytes.length-1] == MSG_BROKER ){</span><br><span class=\"line\">                log.trace(&quot;origin data &quot; + byteArrHelper.toHexString(bytes) + &quot; &quot; + session.getRemoteAddress());</span><br><span class=\"line\">                // 这里转义还原</span><br><span class=\"line\">                bytes = jt808Helper.retrans(bytes);</span><br><span class=\"line\">                // 在这里验证校验码</span><br><span class=\"line\">                if(jt808Helper.verify(bytes)){</span><br><span class=\"line\">                    // 把字节转换为Java对象的工具类</span><br><span class=\"line\">                    out.write(bytes);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }else{</span><br><span class=\"line\">                log.trace(&quot;wrong data to drop &quot; + byteArrHelper.toHexString(bytes) + &quot; &quot; + session.getRemoteAddress());</span><br><span class=\"line\">            }</span><br><span class=\"line\">            // 不管是否完成本包数据读取 这一包数据都放弃继续解析</span><br><span class=\"line\">            // 如果还有剩余 则 继续解析数据 没有剩余 则 继续接收数据</span><br><span class=\"line\">            return in.remaining() &gt; 0;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    } else {</span><br><span class=\"line\">        // 不等于 则 删除前置错误数据 并继续接收数据</span><br><span class=\"line\">        log.trace(&quot;wrong data structure &quot; + session.getRemoteAddress());</span><br><span class=\"line\">        for(int i = 0;i&lt;in.remaining();){</span><br><span class=\"line\">            // 读取到一包数据的 结束位置 返回</span><br><span class=\"line\">            if( in.get() == MSG_BROKER ){</span><br><span class=\"line\">                // 到此本包数据全部废弃 继续读取下一包</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">// 没有可读取的数据 返回继续接收数据</span><br><span class=\"line\">return false;</span><br></pre></td></tr></tbody></table></figure>\n<p>解码器处理的简单逻辑：</p>\n<ul>\n<li>当接收到的消息刚好时，截断，继续接收下一批内容。</li>\n<li>当接收到的消息不够时，等下一批数据拼接在当前数据之后继续读取。</li>\n<li>当接收到的消息太多时，读取一个消息包完成后，截断，进行下一次读取。</li>\n</ul>\n<p>到此底层服务也配置启动了。</p>\n<h2>配置选项</h2>\n<p>下面是目前可用的配置注释。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String use = &quot;mina&quot;;             // 使用框架 默认 mina 可选 netty</span><br><span class=\"line\">private String protocol = &quot;tcp&quot;;         // 使用协议 默认 tcp 可选 udp</span><br><span class=\"line\">private Integer port = 10001;            // 服务监听端口</span><br><span class=\"line\"></span><br><span class=\"line\">private Integer processCount = 2;        // 一般是CPU数量 + 1</span><br><span class=\"line\">private Integer corePoolSize = 1;        // 解析线程数量</span><br><span class=\"line\">private Integer maximumPoolSize = 10;    // 解析线程最大数量</span><br><span class=\"line\">private Integer keepAliveTime = 1000;    // 解析线程保持时间 单位 毫秒</span><br><span class=\"line\">private Integer idleTime = 10;           // 解析线程空闲时间 单位 秒</span><br><span class=\"line\">private Integer idleCount = 6;           // 解析线程空闲时间次数 </span><br><span class=\"line\">private Integer readBufferSize = 2048;   // mina 读取缓存</span><br><span class=\"line\">private Integer packageLength = 1024;    // 处理包最大长度（超长会分包）</span><br><span class=\"line\"></span><br><span class=\"line\">private Integer masterSize = 1;          // netty master线程数量</span><br><span class=\"line\">private Integer slaveSize = 10;          // netty slave线程数量</span><br><span class=\"line\"></span><br><span class=\"line\">private Boolean tcpNoDelay = true;       // 配置TCP延迟</span><br><span class=\"line\">private Boolean keepAlive = true;        // 配置是否长连接</span><br><span class=\"line\">private Integer rsaHandleUnit = 117;     // rsa 超长数据处理单元 默认最长117 暂时不可用 解析包里还没有处理 RSA相关功能</span><br><span class=\"line\">private Boolean enabled = true;          // 是否启用服务器</span><br><span class=\"line\"></span><br><span class=\"line\">private Integer threadCorePoolSize = 1;      // 持久化线程数量</span><br><span class=\"line\">private Integer threadMaximumPoolSize = 10;  // 持久化线程最大数量</span><br><span class=\"line\">private Integer threadKeepAliveTime = 1000;  // 持久化线程持续时间</span><br></pre></td></tr></tbody></table></figure>\n<h2>消息处理</h2>\n<p>下面是消息在下方到用户处理逻辑前的核心逻辑：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 按照协议解析相应数据位的字节码</span><br><span class=\"line\">byte[] msgId, msgBodyProp, protocolVersion, phoneNum, streamNum, pkgCount = null, pkgNum = null, res = null;</span><br><span class=\"line\">// 偏移标识</span><br><span class=\"line\">int offset = 0;</span><br><span class=\"line\">msgId = new byte[]{originData[offset++],originData[offset++]};</span><br><span class=\"line\">msgBodyProp = new byte[]{originData[offset++],originData[offset++]};</span><br><span class=\"line\">// 通过消息体属性中的版本标识位 判断是否是 2019版本协议 并增加相关解析</span><br><span class=\"line\">boolean isVersion2019 =  jt808Helper.isVersion2019(msgBodyProp);</span><br><span class=\"line\">if (isVersion2019) {</span><br><span class=\"line\">    protocolVersion = new byte[]{originData[offset++]};</span><br><span class=\"line\">    phoneNum = new byte[]{</span><br><span class=\"line\">            originData[offset++],originData[offset++],originData[offset++],originData[offset++],originData[offset++],</span><br><span class=\"line\">            originData[offset++],originData[offset++],originData[offset++],originData[offset++],originData[offset++]</span><br><span class=\"line\">    };</span><br><span class=\"line\">} else {</span><br><span class=\"line\">    phoneNum = new byte[]{</span><br><span class=\"line\">            originData[offset++],originData[offset++],originData[offset++],</span><br><span class=\"line\">            originData[offset++],originData[offset++],originData[offset++]</span><br><span class=\"line\">    };</span><br><span class=\"line\">}</span><br><span class=\"line\">streamNum = new byte[]{originData[offset++],originData[offset++]};</span><br><span class=\"line\">boolean hasPackage = jt808Helper.hasPackage(msgBodyProp);</span><br><span class=\"line\">if( hasPackage ){</span><br><span class=\"line\">    pkgCount = new byte[]{originData[offset++],originData[offset++]};</span><br><span class=\"line\">    pkgNum = new byte[]{originData[offset++],originData[offset]};</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 将电话字节码转化成字符串</span><br><span class=\"line\">String phone = byteArrHelper.toHexString(phoneNum);</span><br><span class=\"line\"></span><br><span class=\"line\">// 相同身份的终端建立链接 原链接需要断开 也就是加入之前需要判断是否存在终端 存在关闭后在加入</span><br><span class=\"line\">if(sessionManagement.contains(phone)){</span><br><span class=\"line\">    IoSession preSession = (IoSession) sessionManagement.get(phone);</span><br><span class=\"line\">    if (preSession.getId() != session.getId()) {</span><br><span class=\"line\">        preSession.closeNow();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// session 加入会话缓存</span><br><span class=\"line\">sessionManagement.set(phone, session);</span><br><span class=\"line\"></span><br><span class=\"line\">// 分包处理</span><br><span class=\"line\">if( hasPackage ){</span><br><span class=\"line\">    // 获取 整型 参数</span><br><span class=\"line\">    int totalPkgNum = byteArrHelper.twobyte2int(pkgCount);</span><br><span class=\"line\">    int currentPkgNum = byteArrHelper.twobyte2int(pkgNum);</span><br><span class=\"line\">    // 序号必须小于等于总包数 条件达成之后进行分包处理 否则不处理分包且不处理数据</span><br><span class=\"line\">    if(totalPkgNum &gt;= currentPkgNum){</span><br><span class=\"line\">        if(!cacheService.containsPackages(phone)){</span><br><span class=\"line\">            ConcurrentHashMap&lt;Integer,byte[]&gt; buf = new ConcurrentHashMap&lt;&gt;(totalPkgNum);</span><br><span class=\"line\">            cacheService.setPackages(phone, buf);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        Map&lt;Integer,byte[]&gt; pkgBuf = cacheService.getPackages(phone);</span><br><span class=\"line\">        pkgBuf.put(currentPkgNum, originData);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    // 分包结束时需要对分包数据进行解析处理并返回应答 通过总包数和序号对比 判断是不是最后一包</span><br><span class=\"line\">    if( totalPkgNum == currentPkgNum ){</span><br><span class=\"line\">        // 如果是最后一包</span><br><span class=\"line\">        if(jt808Helper.pkgAllReceived(phone, totalPkgNum)){</span><br><span class=\"line\">            // 合并所有包 并解析</span><br><span class=\"line\">            res = data(jt808Helper.allPkg(phone, totalPkgNum));</span><br><span class=\"line\">        }else{</span><br><span class=\"line\">            // 没有全部收到 需要补传 最初一包的流水号</span><br><span class=\"line\">            byte[] originStreamNum = null;</span><br><span class=\"line\">            // 补传id列表</span><br><span class=\"line\">            byte[] idList = new byte[]{};</span><br><span class=\"line\">            // 补传数量</span><br><span class=\"line\">            byte num = 0;</span><br><span class=\"line\">            Map&lt;Integer,byte[]&gt; map = cacheService.getPackages(phone);</span><br><span class=\"line\">            for(int i = 1;i&lt;=totalPkgNum;i++){</span><br><span class=\"line\">                // 这里需要判断版本 并获取 流水号</span><br><span class=\"line\">                if(originStreamNum == null){</span><br><span class=\"line\">                    if (isVersion2019) {</span><br><span class=\"line\">                        originStreamNum = byteArrHelper.subByte(map.get(1), 15, 17);</span><br><span class=\"line\">                    } else {</span><br><span class=\"line\">                        originStreamNum = byteArrHelper.subByte(map.get(1), 10, 12);</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">                if(!map.containsKey(i)){</span><br><span class=\"line\">                    num++;</span><br><span class=\"line\">                    if (isVersion2019) {</span><br><span class=\"line\">                        idList = byteArrHelper.union(idList, byteArrHelper.subByte(map.get(i), 19, 21));</span><br><span class=\"line\">                    } else {</span><br><span class=\"line\">                        idList = byteArrHelper.union(idList, byteArrHelper.subByte(map.get(i), 14, 16));</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">            // 最后下发 消息包重传指令</span><br><span class=\"line\">            if(originStreamNum != null) {</span><br><span class=\"line\">                res = resHelper.getPkgReq(phoneNum, originStreamNum, num, idList);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">} else {</span><br><span class=\"line\">    // 未分包 直接解析</span><br><span class=\"line\">    res =  data(originData);</span><br><span class=\"line\">}</span><br><span class=\"line\">if( res == null ){</span><br><span class=\"line\">    // 没有解析应答 则 直接返回平台通用应答 成功</span><br><span class=\"line\">    res = resHelper.getPlatAnswer(phoneNum, streamNum, msgId, (byte) 0x00);</span><br><span class=\"line\">}</span><br><span class=\"line\">// 返回消息前判断 是否需要分包</span><br><span class=\"line\">int msgLen = jt808Config.getPackageLength();</span><br><span class=\"line\">if( res.length &gt; msgLen ){</span><br><span class=\"line\">    // 分包发送</span><br><span class=\"line\">    jt808Helper.sentByPkg(res, session);</span><br><span class=\"line\">}else{</span><br><span class=\"line\">    // 直接返回</span><br><span class=\"line\">    session.write(res);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>消息先查看是否分包，分包则先不解析，待接收完整（接收到最后一包数据之后，会检查数据完整性，如果不完整会下发重传指令，如果完整）再解析；消息未分包则直接解析。</li>\n<li>消息解析时，交由对应消息ID的消息包处理器进行处理。</li>\n<li>消息解析时，会检查鉴权，如果没有鉴权仅能访问终端注册和终端鉴权两个消息包。</li>\n<li>消息包处理的逻辑都在 <code>com.zhoyq.server.jt808.starter.pack</code> 包下，希望了解更多的，可以直接查看源代码。</li>\n<li>默认处理方式中，所有查询应答类消息都会通过持久化接口的 <code>terminalAnswer</code> 方法存储，待进一步查询。</li>\n</ul>\n<h2>2019 兼容性处理逻辑</h2>\n<p>v1.2.2 版本增加了 2019 版本协议的解析内容，关于兼容性处理有以下几点：</p>\n<ul>\n<li>消息体属性中的版本标识位，为2019版本独有。</li>\n<li>2019 版本电话号码长度增加了，大部分兼容性可以通过电话号码位数判断。</li>\n<li>部分消息ID是2019独有的所以可以单独处理。</li>\n<li>终端注册和驾驶员身份信息上报可以根据消息长度可以判断是2013还是2011版本协议。</li>\n</ul>\n<h2>帮助类</h2>\n<p>帮助类处理了大部分底层逻辑，有兴趣可以看相关源码，帮助类可以使用 @Autowired 注解直接引入。</p>\n<ul>\n<li>ByteArrHelper（二进制处理帮助类）</li>\n<li>Jt808Helper（协议逻辑相关帮助类）</li>\n<li>ResHeler（应答消息类）</li>\n</ul>\n<h2>关于开源</h2>\n<p>推荐邮件（feedback#zhoyq.com）或者使用 <code>ISSUE</code>（包括<a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">GITHUB</a>和<a href=\"https://gitee.com/zhoyq/spring-boot-starter-jt808\">GITEE</a>） 这两种方式报告 <code>BUG</code>，我会第一时间修复。</p>\n<ul>\n<li><strong>JT808二次开发包</strong> - 采用MIT协议开源，<a href=\"https://github.com/zhoyq/spring-boot-starter-jt808\">开源地址</a>，<a href=\"https://space.bilibili.com/37839961/channel/detail?cid=111071\">重构过程</a>。视频里重构完成后的版本是 <code>1.0.0</code>，文章发布时二次开发包版本是 <code>1.2.2</code>。</li>\n<li><strong>JT808二次开发包文档</strong> - <a href=\"https://www.bilibili.com/video/BV1cg4y167jW?from=search&amp;seid=2999996325245827500\">开发入门视频</a>，<a href=\"https://github.com/zhoyq/spring-boot-starter-jt808/blob/master/README.md\">开发入门文档</a>，以及本系列文章。</li>\n<li><strong>JT808模拟测试终端</strong> - 基于electron的版本正在制作中，计划以MIT协议开源。</li>\n<li><strong>完整可用于生产的808服务</strong> - 计划内。</li>\n<li><strong>完整可用于生产的809服务</strong> - 计划外。</li>\n<li><strong>车联网平台</strong> - 计划内（主要技术：SpringBoot、Vue）。</li>\n<li><strong>相关文档会慢慢完善</strong> - 暂时不约定期限。</li>\n</ul>\n","hasMore":true,"tags":["JT808"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【JT808】Spring Boot Stater Jt808 简单源码解读\ntags:\n  - JT808\ncategories: 车联网\ndate: 2020-05-30\nstatus: published\n\n---\n\n新开源 [Spring Boot Starter Jt808](https://github.com/zhoyq/spring-boot-starter-jt808) 已经有一段时间了，新版本已经支持了 `2011`、`2013`、`2019` 版本的协议解析，并完善了自定义消息的功能，还是值得期待的。\n\n本文主要说明 [Spring Boot Starter Jt808](https://github.com/zhoyq/spring-boot-starter-jt808) 的启动流程，配置项以及一些细节，读懂本文需要先了解字节码和 `SpringBoot` 等技术知识。\n\n<!-- more -->\n\n## 启动服务\n\n项目依赖 `SpringBoot`，所以启动按照 `Spring` 的逻辑需要有一个启动注解。于是我们先从 `EnableJt808Server` 这个注解开始。\n\n```java\n// ...\n@Import({Jt808Starter.class, Jt808Config.class, SimpleBeanConfig.class})\npublic @interface EnableJt808Server {}\n```\n\n`EnableJt808Server` 通过 `Import` 注解引入了 `Jt808Starter`、`Jt808Config`、`SimpleBeanConfig` 三个 Bean，我们依次看一下这三个 Bean 都是什么作用。\n\n**Jt808Config**\n\n顾名思义，`Jt808Config` 是用来承载 jt808 服务的配置的，关于配置项的详细信息可以在下文中找到。这里只说明这个类的作用。\n\n配置类使用直接赋值的方式为配置项添加默认值。\n\n**SimpleBeanConfig**\n\n```java\n// ...\n@Bean\n@ConditionalOnMissingBean(DataService.class)\npublic DataService dataService() {\n    log.info(\"use default data service Bean.\");\n    return new SimpleDataServiceAdapter(byteArrHelper);\n}\n\n@Bean\n@ConditionalOnMissingBean(CacheService.class)\npublic CacheService sessionService(){\n    log.info(\"use default session service Bean.\");\n    return new HashMapCacheService();\n}\n```\n\n在 1.2.2 版本里为了简化用户入门难度增加了默认 Bean 配置，所以用户如果不定义缓存 Bean `CacheService` 的话应该会有默认的 Bean 顶替，但是持久化服务还是需要用户提供的，默认提供的Bean `DataService` 是不能接收消息的，只是能够保证启动成功。同时用户的主要业务逻辑也是在 `DataService` 实现类里。\n\n- 系统里默认提供了基于 `ConcurrentHashMap` 的缓存。\n- 数据层提供的类仅仅是添加了日志记录而已，并且不能通过任何客户端的鉴权。\n\n**Jt808Starter**\n\n这里定义了启动逻辑，首先定义了处理持久化需要的线程池，线程命名使用 `jt808-mina-thread-pool-db` 前缀，方便调试。\n\n然后是加载 `com.zhoyq.server.jt808.starter` 包下的所有 Bean。\n\n再次是程序启动事件 `ApplicationStartedEvent` 程序启动成功后会运行 `onApplicationEvent` 方法中的逻辑。\n\n- 检查是否启用 Jt808 服务。\n- 获取数据库中的历史数据，并存储到缓存中。\n- 获取用户配置使用的底层服务实现（Mina或者Netty），并启动。\n\n> 这里需要注意的是，在启动完成后 `PackHandlerManagement` 也处理了一部分启动逻辑，这里把消息包处理器全部收集起来并存储到缓存中待用。\n\n下面就是 `Mina` 或者 `Netty` 的启动了。\n\n`Mina` 启动的时候，加载的关于编码解码的工厂类是 `Jt808CodecFactory`，这里定义了处理消息包边界的方法逻辑。`Netty` 启动的时候，加载的解码器和编码器是 `Jt808NettyDecoder`、`Jt808NettyEncoder`，同样是处理消息边界的方法和逻辑。\n\n> 这里由于编码解码没有进一步封装，会有部分源码重复，会在后期优化的时候处理掉。\n\n下面是核心逻辑：\n\n```java\n// 有数据进入 开始读取数据\nif (in.remaining() > 0) {\n    // 标记数据位置 待还原\n    in.mark();\n    // 读取第一个字节\n    byte byteBuf = in.get();\n    // 判断第一个字节是否等于 MSG_BROKER = 0x7E\n    if( byteBuf == MSG_BROKER ){\n        // 等于 则 还原读取情况\n        in.reset();\n        // 读取前五个字节\n        byte[] bodyProp = new byte[5];\n        // 标记 待还原读取情况\n        in.mark();\n        // 获取消息体属性数据\n        in.get(bodyProp, 0, 5);\n        byte[] body = new byte[]{bodyProp[3],bodyProp[4]};\n        // 获取消息体属性中的消息长度信息\n        int sizeBuf = jt808Helper.getMsgBodyLength(body);\n        // 获取消息体中的分包信息\n        boolean b = jt808Helper.hasPackage(body);\n        int size;\n        if(b){\n            size = sizeBuf + MEG_MIN_LEN_WITH_PKG;\n        }else{\n            size = sizeBuf + MSG_MIN_LEN;\n        }\n        // 还原读取情况\n        in.reset();\n        log.trace(\"the real pkg length is \" + size);\n\n        // 通过 size 判断消息是否够一包 如果消息内容不够，则重置，相当于不读取\n        if (size > in.remaining() || size < MSG_MIN_LEN ) {\n            // 标记\n            in.mark();\n            // 读取以显示\n            byte[] bytes = new byte[in.remaining()];\n            in.get(bytes, 0, in.remaining());\n            // 还原\n            in.reset();\n            log.trace(\"short data length \"+in.remaining()+\" data \"+ byteArrHelper.toHexString(bytes) +\" go to reread \" + session.getRemoteAddress());\n            // 数据不全 最后返回 false 继续接收数据\n        } else {\n            // 消息内容够一包 则 继续读取\n            byte[] bytes = new byte[size];\n            in.get(bytes, 0, size);\n            // 验证得到的数据是否正确\n            if( bytes[bytes.length-1] == MSG_BROKER ){\n                log.trace(\"origin data \" + byteArrHelper.toHexString(bytes) + \" \" + session.getRemoteAddress());\n                // 这里转义还原\n                bytes = jt808Helper.retrans(bytes);\n                // 在这里验证校验码\n                if(jt808Helper.verify(bytes)){\n                    // 把字节转换为Java对象的工具类\n                    out.write(bytes);\n                }\n            }else{\n                log.trace(\"wrong data to drop \" + byteArrHelper.toHexString(bytes) + \" \" + session.getRemoteAddress());\n            }\n            // 不管是否完成本包数据读取 这一包数据都放弃继续解析\n            // 如果还有剩余 则 继续解析数据 没有剩余 则 继续接收数据\n            return in.remaining() > 0;\n        }\n    } else {\n        // 不等于 则 删除前置错误数据 并继续接收数据\n        log.trace(\"wrong data structure \" + session.getRemoteAddress());\n        for(int i = 0;i<in.remaining();){\n            // 读取到一包数据的 结束位置 返回\n            if( in.get() == MSG_BROKER ){\n                // 到此本包数据全部废弃 继续读取下一包\n                return true;\n            }\n        }\n    }\n}\n// 没有可读取的数据 返回继续接收数据\nreturn false;\n```\n\n解码器处理的简单逻辑：\n\n- 当接收到的消息刚好时，截断，继续接收下一批内容。\n- 当接收到的消息不够时，等下一批数据拼接在当前数据之后继续读取。\n- 当接收到的消息太多时，读取一个消息包完成后，截断，进行下一次读取。\n\n到此底层服务也配置启动了。\n\n## 配置选项\n\n下面是目前可用的配置注释。\n\n```java\nprivate String use = \"mina\";             // 使用框架 默认 mina 可选 netty\nprivate String protocol = \"tcp\";         // 使用协议 默认 tcp 可选 udp\nprivate Integer port = 10001;            // 服务监听端口\n\nprivate Integer processCount = 2;        // 一般是CPU数量 + 1\nprivate Integer corePoolSize = 1;        // 解析线程数量\nprivate Integer maximumPoolSize = 10;    // 解析线程最大数量\nprivate Integer keepAliveTime = 1000;    // 解析线程保持时间 单位 毫秒\nprivate Integer idleTime = 10;           // 解析线程空闲时间 单位 秒\nprivate Integer idleCount = 6;           // 解析线程空闲时间次数 \nprivate Integer readBufferSize = 2048;   // mina 读取缓存\nprivate Integer packageLength = 1024;    // 处理包最大长度（超长会分包）\n\nprivate Integer masterSize = 1;          // netty master线程数量\nprivate Integer slaveSize = 10;          // netty slave线程数量\n\nprivate Boolean tcpNoDelay = true;       // 配置TCP延迟\nprivate Boolean keepAlive = true;        // 配置是否长连接\nprivate Integer rsaHandleUnit = 117;     // rsa 超长数据处理单元 默认最长117 暂时不可用 解析包里还没有处理 RSA相关功能\nprivate Boolean enabled = true;          // 是否启用服务器\n\nprivate Integer threadCorePoolSize = 1;      // 持久化线程数量\nprivate Integer threadMaximumPoolSize = 10;  // 持久化线程最大数量\nprivate Integer threadKeepAliveTime = 1000;  // 持久化线程持续时间\n```\n\n## 消息处理\n\n下面是消息在下方到用户处理逻辑前的核心逻辑：\n\n```java\n// 按照协议解析相应数据位的字节码\nbyte[] msgId, msgBodyProp, protocolVersion, phoneNum, streamNum, pkgCount = null, pkgNum = null, res = null;\n// 偏移标识\nint offset = 0;\nmsgId = new byte[]{originData[offset++],originData[offset++]};\nmsgBodyProp = new byte[]{originData[offset++],originData[offset++]};\n// 通过消息体属性中的版本标识位 判断是否是 2019版本协议 并增加相关解析\nboolean isVersion2019 =  jt808Helper.isVersion2019(msgBodyProp);\nif (isVersion2019) {\n    protocolVersion = new byte[]{originData[offset++]};\n    phoneNum = new byte[]{\n            originData[offset++],originData[offset++],originData[offset++],originData[offset++],originData[offset++],\n            originData[offset++],originData[offset++],originData[offset++],originData[offset++],originData[offset++]\n    };\n} else {\n    phoneNum = new byte[]{\n            originData[offset++],originData[offset++],originData[offset++],\n            originData[offset++],originData[offset++],originData[offset++]\n    };\n}\nstreamNum = new byte[]{originData[offset++],originData[offset++]};\nboolean hasPackage = jt808Helper.hasPackage(msgBodyProp);\nif( hasPackage ){\n    pkgCount = new byte[]{originData[offset++],originData[offset++]};\n    pkgNum = new byte[]{originData[offset++],originData[offset]};\n}\n\n// 将电话字节码转化成字符串\nString phone = byteArrHelper.toHexString(phoneNum);\n\n// 相同身份的终端建立链接 原链接需要断开 也就是加入之前需要判断是否存在终端 存在关闭后在加入\nif(sessionManagement.contains(phone)){\n    IoSession preSession = (IoSession) sessionManagement.get(phone);\n    if (preSession.getId() != session.getId()) {\n        preSession.closeNow();\n    }\n}\n\n// session 加入会话缓存\nsessionManagement.set(phone, session);\n\n// 分包处理\nif( hasPackage ){\n    // 获取 整型 参数\n    int totalPkgNum = byteArrHelper.twobyte2int(pkgCount);\n    int currentPkgNum = byteArrHelper.twobyte2int(pkgNum);\n    // 序号必须小于等于总包数 条件达成之后进行分包处理 否则不处理分包且不处理数据\n    if(totalPkgNum >= currentPkgNum){\n        if(!cacheService.containsPackages(phone)){\n            ConcurrentHashMap<Integer,byte[]> buf = new ConcurrentHashMap<>(totalPkgNum);\n            cacheService.setPackages(phone, buf);\n        }\n        Map<Integer,byte[]> pkgBuf = cacheService.getPackages(phone);\n        pkgBuf.put(currentPkgNum, originData);\n    }\n    // 分包结束时需要对分包数据进行解析处理并返回应答 通过总包数和序号对比 判断是不是最后一包\n    if( totalPkgNum == currentPkgNum ){\n        // 如果是最后一包\n        if(jt808Helper.pkgAllReceived(phone, totalPkgNum)){\n            // 合并所有包 并解析\n            res = data(jt808Helper.allPkg(phone, totalPkgNum));\n        }else{\n            // 没有全部收到 需要补传 最初一包的流水号\n            byte[] originStreamNum = null;\n            // 补传id列表\n            byte[] idList = new byte[]{};\n            // 补传数量\n            byte num = 0;\n            Map<Integer,byte[]> map = cacheService.getPackages(phone);\n            for(int i = 1;i<=totalPkgNum;i++){\n                // 这里需要判断版本 并获取 流水号\n                if(originStreamNum == null){\n                    if (isVersion2019) {\n                        originStreamNum = byteArrHelper.subByte(map.get(1), 15, 17);\n                    } else {\n                        originStreamNum = byteArrHelper.subByte(map.get(1), 10, 12);\n                    }\n                }\n                if(!map.containsKey(i)){\n                    num++;\n                    if (isVersion2019) {\n                        idList = byteArrHelper.union(idList, byteArrHelper.subByte(map.get(i), 19, 21));\n                    } else {\n                        idList = byteArrHelper.union(idList, byteArrHelper.subByte(map.get(i), 14, 16));\n                    }\n                }\n            }\n            // 最后下发 消息包重传指令\n            if(originStreamNum != null) {\n                res = resHelper.getPkgReq(phoneNum, originStreamNum, num, idList);\n            }\n        }\n    }\n} else {\n    // 未分包 直接解析\n    res =  data(originData);\n}\nif( res == null ){\n    // 没有解析应答 则 直接返回平台通用应答 成功\n    res = resHelper.getPlatAnswer(phoneNum, streamNum, msgId, (byte) 0x00);\n}\n// 返回消息前判断 是否需要分包\nint msgLen = jt808Config.getPackageLength();\nif( res.length > msgLen ){\n    // 分包发送\n    jt808Helper.sentByPkg(res, session);\n}else{\n    // 直接返回\n    session.write(res);\n}\n```\n\n- 消息先查看是否分包，分包则先不解析，待接收完整（接收到最后一包数据之后，会检查数据完整性，如果不完整会下发重传指令，如果完整）再解析；消息未分包则直接解析。\n- 消息解析时，交由对应消息ID的消息包处理器进行处理。\n- 消息解析时，会检查鉴权，如果没有鉴权仅能访问终端注册和终端鉴权两个消息包。\n- 消息包处理的逻辑都在 `com.zhoyq.server.jt808.starter.pack` 包下，希望了解更多的，可以直接查看源代码。\n- 默认处理方式中，所有查询应答类消息都会通过持久化接口的 `terminalAnswer` 方法存储，待进一步查询。\n\n## 2019 兼容性处理逻辑\n\nv1.2.2 版本增加了 2019 版本协议的解析内容，关于兼容性处理有以下几点：\n\n- 消息体属性中的版本标识位，为2019版本独有。\n- 2019 版本电话号码长度增加了，大部分兼容性可以通过电话号码位数判断。\n- 部分消息ID是2019独有的所以可以单独处理。\n- 终端注册和驾驶员身份信息上报可以根据消息长度可以判断是2013还是2011版本协议。\n\n## 帮助类\n\n帮助类处理了大部分底层逻辑，有兴趣可以看相关源码，帮助类可以使用 @Autowired 注解直接引入。\n\n- ByteArrHelper（二进制处理帮助类）\n- Jt808Helper（协议逻辑相关帮助类）\n- ResHeler（应答消息类）\n\n## 关于开源\n\n推荐邮件（feedback#zhoyq.com）或者使用 `ISSUE`（包括[GITHUB](https://github.com/zhoyq/spring-boot-starter-jt808)和[GITEE](https://gitee.com/zhoyq/spring-boot-starter-jt808)） 这两种方式报告 `BUG`，我会第一时间修复。\n\n- **JT808二次开发包** - 采用MIT协议开源，[开源地址](https://github.com/zhoyq/spring-boot-starter-jt808)，[重构过程](https://space.bilibili.com/37839961/channel/detail?cid=111071)。视频里重构完成后的版本是 `1.0.0`，文章发布时二次开发包版本是 `1.2.2`。\n- **JT808二次开发包文档** - [开发入门视频](https://www.bilibili.com/video/BV1cg4y167jW?from=search&seid=2999996325245827500)，[开发入门文档](https://github.com/zhoyq/spring-boot-starter-jt808/blob/master/README.md)，以及本系列文章。\n- **JT808模拟测试终端** - 基于electron的版本正在制作中，计划以MIT协议开源。\n- **完整可用于生产的808服务** - 计划内。\n- **完整可用于生产的809服务** - 计划外。\n- **车联网平台** - 计划内（主要技术：SpringBoot、Vue）。\n- **相关文档会慢慢完善** - 暂时不约定期限。\n"},{"title":"【工作】我在UN的三年经历","excerpt":"<blockquote>\n<p>有人悲欢离合，月有阴--圆缺，此事古难全。</p>\n</blockquote>\n<!-- 人有悲欢离合，月有阴晴圆缺，此事古难全 -->\n<!-- 有人悲欢离合，月有阴--圆缺，此事古难全 -->\n<!-- 有人-------，----无情----，--------- -->\n","url":"/2020/05/30/随笔/【工作】我在UN的三年经历","fromDate":"2020-05-30","category":"随笔","text":"<blockquote>\n<p>有人悲欢离合，月有阴--圆缺，此事古难全。</p>\n</blockquote>\n<!-- 人有悲欢离合，月有阴晴圆缺，此事古难全 -->\n<!-- 有人悲欢离合，月有阴--圆缺，此事古难全 -->\n<!-- 有人-------，----无情----，--------- -->\n<!-- more -->\n<h2>为什么要写这篇文章</h2>\n<p>从入职到文章发布这个时间点一共整整三年时间，而这篇文章是从第二年开始计划的，期间陆陆续续地写，临近发布才定稿。首先我非常地明确自己的定位，也非常明白作为一个员工应该如何表达自己地观点。其次三年时间也真心想为公司做点什么，和朋友聊天的时候，每次说到企业，总会拿自己所在的公司类比，谈天说地，想要分享出来。最后，有些事情积怨已久，实在是想要“伸张正义”。按照朋友的说辞，“本来想着做点什么，但是现实跟你说不行，然后就不想了，领工资吧，慢慢就庸庸碌碌了”。</p>\n<p>其实还有另外一个原因，就是每年的年会。比起别家创业公司（咱也不知道是不是创业公司，咱也不敢问），UN很大方。对于大多数开发来说，也就是参加一下，放松放松的事情吧。因为实在没有什么业绩可说。单就做的东西，和公司发展方向也不同路，怎么能有机会提个名呢！但还是有一些事让我在意，并且慢慢积累到心里，酿成这坛苦酒。其一，是公司年终绩效考核标准，那一年正值深冬，新东方员工改编神曲“沙漠骆驼”，一句“到头来干不过写PPT的”广为流传。说到了我心里，年终绩效一纸PPT，多少全凭借领导脸色，真的是难以说辞。你说低吧，公司问你做了啥能给公司带来效益的事情，都说不要只看眼前利益，也不知道为什么这个时候非要问问你给公司带来了什么效益。开发有些苦衷就是自己做的工作很难体现在效益上，做平台的还能靠用户量去衡量，但是这个用户量跟开发也没什么关系，大方向被领导把控着呢。这么看来就是领导决策，开发背锅啊。其二，是这年会的风气。慢慢后来有一些话语总是刺耳，仔细一听原来是在拍马屁，赶紧闭了眼睛，有人会说你闭了眼睛，他们照样说你能听得见啊！我说“至少看不见是谁了，不是吗”。耳随眼动，若看见一片黑暗，听到的可能也是闷响。就这两点吧，总归说人们溜须拍马，可不曾想“规矩”就让人们这样。</p>\n<p>朋友知道我参加年会不高兴，还特意宽慰我，“风口上的猪，听过吧。在公司发展的风口上，猪都能飞何况人呢。”。“也不一样，猪能卖钱，人却只能骗钱！”，我补充道，“还骗的你乐呵呵的。”。</p>\n<p>就这样，有压抑，有热情，有放纵，有胆怯，慢慢汇集起来这么一篇。也算是给领导层了解公司的另一个视角吧，已经厌倦了在同事吧发匿名的帖子，在过去的时间里“突然间迷茫了......”，“一个问题”，“致 CEO”，“马总读得好可爱”...种种标题，解决了我的一些困惑，也带来很多深思，匿名总归不是解决问题的办法。</p>\n<p>下面一章主要描述我的经历，可以当小说看，有个人主义润色。调调是很悲观的，因为我觉得这样有好处。</p>\n<h2>这三年，我都经历了什么</h2>\n<p>这个经历不是公司的发展历史，而是我的工作历史。</p>\n<h3>初来乍到</h3>\n<p>月末刚刚结了婚，就赶着时间回北京找工作了，在家里前后待了一个多月期间也干了点私活，因为那个时候做私活还没有章程，干着很累，就在家多呆了几天。到了北京，一天不敢耽搁，投简历约时间准备面试，一气呵成。那个时候互联网还是上升期，所以机会也多。拿着手机，没多一会日程就排到两周之外了。</p>\n<p>我刚来公司，办公区还没有装修，偌大的一个办公室就摆了几张桌子，然后五六个人，坐一起开发，大家可能都是新同事，互相不了解。那个时候呢，有人组织玩狼人杀，借着这个游戏就慢慢熟悉起来了。刚开始入职的时候，被分配了一个修改网站模板的活，这不刚来公司么，就想借这个任务让大家都认识一下我。招我进来的同事也挺好，在群里说“大牛，以后有问题找我或者找他”其实挺受用，因为刚来一个礼拜就这么相信我。心里还是很温暖的。</p>\n<h3>网站日常维护</h3>\n<p>接下来一年就是正常的网站维护工作，每天早上九点上班，晚上十点或者十一点下班，当然这里有一些主观因素在，因为老婆孩子不在身边，所以大概晚上都在公司蹭网，有事马上做，没事也可以休闲一下。那时候开发没什么流程，老板说今天加个东西，接下来几天就要做出来。当然我们有产品经理，只不过产品经理没什么权力，仅仅是上传下达而已。那时候记忆最深刻的就是和沈争论“为什么要这么做”的问题，沈说“叫你干什么就干什么，哪那么多为什么。”，至于语气就自行脑补吧。虽然就那么一次，但是有的人一次就够多了。其实那之后就没什么交集了，因为不许发问，不许有想法。事情就按照他说的做就行了，工作也简单也无聊。但是总体还是挺舒服的。期间认识了老何，这个人吧，任劳任怨的还主动给集体订餐，曾经无数次听见沈说他“你真土，脑子有病”之类的话。就一次次的接着，没有怨言。有时候甚至有一种冲上去“保护”他的冲动，只不过仍然是没有缘由的关心，从何谈起呢。</p>\n<p>记得网站更新一开始是没有日期的，每次沈说变更，晚上就要腾出时间来专门变更，因为网站代码使用的是 <code>svn</code>，并且并没有自动化，所以涉及到的程序都是本地编译好之后才替换到远程的。工作量有一些吧，每次半小时左右。所以我就非常想每周定期更新，这样也会在更新前有所准备。一开是推行挺容易，只要自己更新时间修改到每周四就行了，因为大部分时间都是自己定的，很宽松。印象里有一次，产品经理跟我说要更新，因为没到周四，我就推了。没想到他跟沈说了，沈就理直气壮的来到我后边指着电脑屏幕让我更新，这算是记忆力比较深刻的冲突。我问“更新出了问题谁来负责？”“我负责”他理直气壮的说。最后我更新了，但是仍然很生气。这个更新时间本来是灵活的，但是更重要的是这件事情并不那么简单。态度随和一点我可能就马上更新了，正是这种不可一世的嚣张气焰，让人无法忍受。我想那个时候年轻的我，更是难以控制那种被人不尊重的感觉所引发的怒火。</p>\n<p>那个时候有多乱呢？可以这么说，除了日常工作，偶尔还会有人跟你指派“私活”，当然这个并不是真的私活，而是公司的其他业务部门的任务。比如小地图、实例之类的东西。所有的东西都没有个真正的流程，这可能也是后来实行敏捷的原因吧，虽然实行之后并没有解决这些问题。</p>\n<h3>敏捷开端</h3>\n<p>没到一年的时间，儿子出生了。开始辗转家庭和公司之间。发生了一些婚姻上必须发生的事情，让自己成长了很多。有时候忙于处理家事就忽略了公司的细节，等到过了年一切才逐渐稳定。</p>\n<p>年初，老赵离职了。</p>\n<p>年后，公司就决定实行 <code>SCRUM</code> 敏捷开发模式，还请了老师给大家上课。关于这种敏捷方式，我吐槽过，<a href=\"https://www.zhoyq.com/2018/02/08/%E8%BD%AC%E8%BD%BD/%E3%80%90SCRUM%E3%80%91%E6%95%8F%E6%8D%B7%E5%A5%BD%EF%BC%8C%E6%95%8F%E6%8D%B7%E5%9D%8F/\">过去的文章</a>也分析过，我就不再说了。就单说说请来的老师上的课，怎么形容呢，从来也没有上过这么幼稚的课，不管是外面请来的，还是内部的课程，无一例外的幼稚。外部请来的老师，用纸牌模拟公司运作，最终还结果还是独裁方式赢了。至于公司独裁经营的方式，这里不论对错，光用纸牌模拟，这一点就让人唏嘘。我根本想不到纸牌逻辑是如何牵强的和公司运营联系起来的。这更像是一场沈的大型马屁会。总之对于骗子来说，拍的没错。内部敏捷培训呢，玩具、看板。可能是在想让大家体验一把如何 <code>SCRUM</code> 吧。只不过场景就像小孩过家家一样，并没有什么实用价值。说到底，都没有把自己的短板露出来，让别人评正。按常理，这样也对，每个人都不希望自己被人看到短处，或者自己的邪恶被人发觉。但是转型期间，公司就应该正视这些问题，避免重蹈覆辙。</p>\n<p>就像婴儿学步一样，公司的敏捷模式也慢慢开始了。只不过有些畸形而已，当事人不在乎我觉得旁观者说再多，也都是废话。转型了，工作也慢慢开始有了产品负责人、开发、<code>master</code>的区分。至于畸形，我<a href=\"https://www.zhoyq.com/2018/09/09/%E7%AE%A1%E7%90%86/%E3%80%90SCRUM%E3%80%91%E2%80%98%E6%95%8F%E6%8D%B7%E2%80%99%E4%B8%8D%E6%95%8F%E6%8D%B7%EF%BC%81/\">之前的文章</a>也有讨论，就不再说了。</p>\n<p>后来公司招聘，有个同事跟我说“我完不成工作就赖你”，还把我们的聊天记录发给了别人，发完我以为他要说什么的时候，第二天就不来了。还真是“理直气壮”呢。这件事倒是没给我造成什么影响，我就是搞不懂，他为什么不来了呢？他说他很热爱这份工作的。沈后来还跟我说“你把他弄走的，我面试的时候对他还是挺满意的”。</p>\n<p>后来，网站就关闭了。</p>\n<h3>离职变请假，小误会</h3>\n<p>网站关闭之前，其实我和许曾经试图说服沈，改一下架构。甚至提出了，业余时间不影响工作的情况下去改就行。沈并不喜欢这种观点，但是听到我们业余做，不影响工作的情况下就默许了。后来这件事就直接交给了许。我之后由于家庭问题跟沈提离职，经过多方协调被准许在家休假一个月。月末回来之前，工资卡如期得到了工资，我开始以为公司对我不错，后来问过人事才明白这是他们操作的失误，需要在未来的工资中扣除。总之很尴尬，因为年中绩效，写了这件事，还说要为公司奉献之类的话。简直是滑天下之大稽。</p>\n<p>由于走之前网站整体交给了许，我回来沈觉得他做网站不错，也没什么事情，就让我去做别的事情了。</p>\n<h3>转组应用</h3>\n<p>先是从徐那里接过来图片转模型的工作，用的是第三方接口。期间发生过一个笑话，事情是这样的，我完成了图片转模型的接口对接工作，实例页面也写出来了，找沈看一下，沈上来就说，“这怎么是同步的？我要异步的。”，当时我真的想笑，对方提供的接口就是异步的，因为图片转模型计算量比较大，我自己写的接口也是异步的，只不过在页面上我是想这一切连贯一点发生而已。这一点足以证明，沈对这件事实际上一无所知。也加速了我离开平台的想法。</p>\n<p>做了一段时间，彭波让我去应用组，跟沈谈了一下，就转到应用组了。主要负责什么也不清楚，总之哪里有问题就冲向哪里。彭说我是探索型的，我也不知道还有什么类型，总之先这样吧，一开始挺轻松的。</p>\n<p>最初主要是集中在微服务上，那个时候微服务的概念很火，自家的后台也有改写的意思，特别是新的项目就想按照微服务的方式运营。说实话，现在看来那时候的体量完全没有必要使用这种技术，而且后来的实践证明，真的不需要。虽然不需要，但是有要求还是要搞一下，从头到尾又熟悉了一遍 <code>Spring Cloud</code>。然后就是哪里需要补哪里，但是最终也没有谁需要，这个就是事实。</p>\n<p>后来有个项目需要对接视频，需要使用 <code>WebRTC</code> 相关技术。就要求我去了解一下，前端关于 <code>WebRTC</code> 倒是不需要我去整理，因为网上多的是开源项目，而且播放的需求比较简单。主要是 <code>RTSP</code> 转 <code>WebRTC</code> 比较麻烦，又限制于对方网络、协议等限制，搞了比较长的时间才可以。也是在这个时候，出了<a href=\"https://www.zhoyq.com/2018/08/18/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E3%80%90docker%E3%80%91%E3%80%90%E4%B8%80%E3%80%91docker%E5%9F%BA%E7%A1%80/\">几篇关于 <code>docker</code> 基础的笔记</a>。</p>\n<p>再后来进了一个项目组，由于新人比较多再加上基础参差不齐，导致自己对现状不怎么满意。那个时候都是做一些彭的想法，虽然并不觉得很好，当时也没想太多，只是做而已。彭做事和沈不同，但是都是一样的固执。</p>\n<p>这期间，东升离职了。</p>\n<h3>接口组，从始至终</h3>\n<p>“接口组”诞生就像个笑话，可能都还没笑就没了。因为他不是一个部门，就是一个团队的称呼，虽然称作团队，可是团队里只有我一个人。</p>\n<p>有一次，马过来问“这个接口能不能干”，可是接口有很多种，又不清楚是哪种。基于以往的经验，可能是基于 <code>HTTP</code> 的接口吧，就满口答应下来了。关键是那个时候都没有什么事情做，这个任务有必要答应下来。</p>\n<p>真正做的时候才发现是 <code>JNA</code> 或者 <code>JNI</code> 技术，调用底层动态库的接口。虽然接触过，但是还是感觉被摆了一道。前后接了不少类似的接口，有的甚至是基于 <code>XML</code> 的自定义协议。虽然有过经验，但这写接口要求三几天就出来，每一个在说的时候都火急火燎的，但是做出来都是经过很长时间才会调试，这个弄得自己很不满意。和项目经理有了冲突，甚至被告了黑状，我不在乎领导如何看待这件事，因为我并不相信自己的命运在别人手里，我在乎的是为什么背后捅刀子。质疑了一个人的人品之后，之后自然就是绝交。工作上不至于绝交，但是其他事情应该不会再有更深的合作了。作为项目经理，连项目的进度时间都把控不好，我觉得这就是不称职。而公司似乎很欢迎这类人（当然还有别的长处）。</p>\n<p>年后招聘了一个开发，穆，进了“接口组”，我基本上把手头上的活全都交给她了，但是她来了之后似乎就没做过什么接口方面的工作。先是一起学习了 <code>JNA</code> 基础，接着做了一些项目上的事情，大部分工作就是 <code>CRUD</code>。再之后，就被分配到别的组了，我想接口既然没什么事情了，就解散了吧。之后就没有所谓“接口组”这个称呼了。</p>\n<p>我一度认为，公司渐渐相信我了，开始放开权力给我搞了。到头来觉得，都是幻觉。政策天天变，人心日日慌。今天的大饼还没有被消化，新的大饼已经在酝酿中...</p>\n<p>这期间，许离职了。</p>\n<h3>技术负责人、TDD、规范</h3>\n<p>把事情交给穆之后能空余出很多时间，和杜聊了聊，最终决定帮项目组做一些基础设施。比如，持续集成、代码质量检查之类的。最终组建了 <code>jenkins</code> 和 <code>sonarqube</code> 一起的持续集成以及质量检查平台。后来，持续集成交给了肖，代码质量交给了江。</p>\n<p>这期间又提出了技术负责人的概念，我倒是不感冒，因为虽然这么一提但什么也没有改变。说是以后开始实行规范方法和测试驱动开发，我的<a href=\"https://www.zhoyq.com/2019/02/20/%E7%AE%A1%E7%90%86/%E3%80%90%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E3%80%91%E5%AF%B9SCRUM%E4%B8%8ETDD%E7%9A%84%E7%90%86%E8%A7%A3/\">一篇文章</a>还特地说了 <code>SCRUM</code> 与 <code>TDD</code> 结合的事情。想要改变总归是好事，但是好景不长。</p>\n<p>之所以这么说，是因为一切都流于表面。测试驱动开发是先开发再测试的，规范倒是执行的不错，因为工具都比较简单，操作性也比较强（这个之后还会提到）。这样一来，白白增加了工作量，却没有什么实际意义。</p>\n<p>后来又说搞一个基础框架，这个我还真借用开源项目，做了一个符合要求的基础框架。现在看来还是无用功，因为后台也变了。这个变在我看来是个好事，因为要转用成熟稳定的后台（公司成熟产品的后台）。</p>\n<p>技术负责人有一个会议，每周二都要参加，我觉得很浪费时间，也没什么好说的，就提议后台包含框架都交给江，前端现在缺人，我去做前端吧。于是两周后，我就开始做前端了。</p>\n<h3>前端</h3>\n<p>做前端有几个目的：</p>\n<ul>\n<li>我以前就做过前端，现在想熟悉一下现在的前端技术，也算是横向扩展自己的能力。</li>\n<li>公司未来产品方向在前端，很多产品都是在前端开发的。</li>\n<li>前端出成品快，比后端可见性强。</li>\n<li>我一向觉得三维可视化开发，从前端最好切入。借助前端工作，重拾计算机图形学是一个最好的途径。</li>\n</ul>\n<p>所以我不仅做前端，我还继续学习 <code>WebGL</code> 底层的 <code>API</code>。当然不止于此...</p>\n<p>前端做起来挺顺手，但也遇到一些问题，首先第一件事就是规范。规范这种东西见仁见智，每个人都有一些细微的差别。这就是为什么团队会要求统一规范，主要目的就是让代码可读性高些。因为之前自己写代码是有一些习惯的，导致做前端之后整体都不太适应，虽然前端能修改代码里的错误格式，但自己还是会有一段时间觉得别扭。现在我也知道习惯之后就好了，但是这个转变还是有些生硬。</p>\n<p>再来，就是团队成员关系处理上。我自认为，前端能力是可以的，也不怕和别人比试。但是当你认真想要从技术上和别人一较高下的时候，对方总是避开你的锋芒。这个是很难避免的结局，大家会觉得你很幼稚，或者会觉得你很难相处。但这就是我锻炼自己的方法，无关乎个人关系的。似乎团队里每个人的想法就仅仅是完成需求，而不是提升自己，完善产品。这令我觉得前途一片灰暗，因为团队是这样机械的团队，甚至大到公司层面都没有一个晋升，或者成长方式，难道公司工作就单纯的是帮助公司完成用户需求而已么？我并不这么觉得，所以我觉得很前途灰暗。另外公司并没有给员工定岗，这就是为什么我能从后端直接变成前端开发，从团队看，敏捷也并没有定义每个人的职责，特别是开发，敏捷要求自治。如果每个人技术上都是平手的话，这个团队多么需要一个项目经理啊。不然就会是现在这样，团队职责不明确，导致最后互相推诿、扯皮。</p>\n<p>现在的开发是什么状态呢？因为敏捷里角色职位互相制约，就没有大小之分，私下关系很好的同事，在工作的时候就会非常松弛。领导台上慷慨激昂，台下员工一滩死水。</p>\n<h3>后知后觉 P 项目</h3>\n<p>团队也做了几个项目，本以为会就这样一直下去，没想到中间公司裁了一次员，自己带过的，或者关系不错的新人都被辞退了。庆幸他们拿了 <code>n+1</code> 走了，公司对他们还算是可以。那时候好像赶上国庆节，放假回来直接进了新的项目组，姑且叫它 <code>P</code> 项目吧，那时候自己甚至都不知道这个组是什么。两周一迭代，一开始还有模有样，到后来就完全是指哪打哪了。范完全负责室内，翔完全负责室外，我配合翔有时候也参与一些业务上的开发，最后负责过视频业务，编辑器对接等。怎么乱呢，一个问题，会有三个甚至更多个人坐在一起讨论，这件事本身就有点迷。</p>\n<ul>\n<li>首先是底子不好，底层总是出一些逻辑上的问题。从大体上看，就是项目管理不好。</li>\n<li>其次是开发分工不好，范事情最多，其次是翔，周边这些人到后期已经没什么事情了。这就是为什么我们又被搞去做项目去了。</li>\n<li>再次是架构设计，一说是给实施人员用的，但开发以及后台完全是按照开发逻辑来的，实施人员很难参与进来。这也是一开始口碑差的原因。还有就是基于配置或者编程方式的更新业务的模式，我不太确定这有什么用，本身前端就可以随之更换脚本。</li>\n<li>之后是工作流程不确定，看上去是讨论了很多次，但是每次工作流程仍然要讨论，甚至一堆人，在那吵，还没有结论。</li>\n<li>最后是接手难，这个项目上手，按照魏原话，是需要三年以上开发去做的。新人不可能接触到这个项目，我想真是这样的话，项目还怎么可持续发展。</li>\n<li>最差劲的一点是，没有说明性的文档。</li>\n</ul>\n<p>我写这些，除了说明项目缺点之外，还有一点就是肯定项目中有一些逻辑是很巧妙的，有些逻辑能在苹果手机上找到原型。但是从总体上说，没办法掩盖缺点。</p>\n<p>我对自己的工作并没有太多记忆，可能是因为很多时候都是当时指派，当时完成，导致自己没有什么记忆。只记得来组里第一件事好像是支持上海录屏的事情，就脱离项目本身，单独一条支线上开发上海需要的场景。开发完这件事，开始接触项目本身的开发，但是都不深入。主要工作，还是范和翔来完成，我总觉得魏好像在开发上只是信任这两个人而已，别人都没进入状态，而且怨声载道。再之后，就接受了电力的项目，还是脱离项目开发。说来可笑，开发 <code>P</code> 本身就是为了支持项目，但是却又为了开发项目而脱离这个 <code>P</code>。从整体上看，可能是决策的人不在事情内导致的吧。</p>\n<p>电力这一做，就做到过年。</p>\n<h3>疫情爆发</h3>\n<p>2020年，对很多人来说都会终身难忘吧，特别是那些奋斗在一线的医生护士。新冠肺炎的流行，导致我的工作也开始变得模糊不清，从2020年2月开始就居家隔离。每天的新闻都是疫情消息，每天的生活就是工作，孩子，吃饭，睡觉。从某些角度说，这场疫情实现了我多年的愿望，就是在家工作。但也切实毁了我的梦想，所谓在家工作，一定不是在家加上工作这么简单。事实却仅仅是单纯的相加而已。和在公司工作并没有差异的居家工作开始了。</p>\n<p>我并没有退出电力项目，开始居家办公之后，也首先是从这里开始的。工作两周之后，又开始为 <code>N</code> 项目做一些基础设施，工作完成后又换了回来。</p>\n<h3>新的想法</h3>\n<p>回到电力项目组，当然是重新开发迭代，计划。但是这时候得自己心里上，开始越来越不平衡了。组内新来了一位项目领导，在中层算是比较有话语权得一位领导，但是他不太懂前端，恰巧这个时候前端又要重构，脱离 <code>P</code> 去做。这个时候矛盾就来了，一开会就开始问各种问题，你觉得这怎么样，那怎么样，但是这些问题大家都心里清楚不会落实，做也是自己做。问来问去只能是浪费时间，却也没有办法。更何况，作为开发，实在是何德何能去管理架构上得事情（对，就是工作岗位没到位，钱没到位）。有时候甚至觉得他在玩儿这帮开发，可能是真的不知道吧，也没办法，为了能在中层说上话，没有他，可能这个项目组就可能不存在了。</p>\n<p>迭代会的时候，产品说了一下未来项目发展，这直接让我觉得项目是在重复做 <code>P</code> 做过得事情，试想 <code>P</code> 是十几个人六个月得开发做出来的，并且还是重构老项目，很多代码都在，现在让这三个人做，而且是从无到有。这一刻，说实话我已经在计划更换工作内容了。之前模型库说需要招人来维护，正好我熟悉这个，我就想尝试一下，看看我能不能转过去。一方面公司需要，另一方面我本身也非常了解后端。前端再做下去，对我来说没有半点益处。综合考虑，还是开始在转岗这件事发力。到现在为止，虽然还没落实，但是已经允许了，我目前就是期待着能快点招来人，顶替我的位置，然后转岗。而文章发布的时间点，我还在等待这个新同事的到来。</p>\n<h3>总结</h3>\n<p>总体看上去还很平和，先后经历了老赵，东升，许等，这些好友的离职（在一个地方工作时间长了最无奈的就是这个），真的是暗藏很多无奈。</p>\n<p>说这些人之前呢，我先说说我参加过孙总一个培训，学到了不少东西。里边就聊到一个问题，一个员工是因为什么来到一家公司，又是因为什么离开一家公司呢？结论其实当时已经有了，因为公司的各方面发展而来，因为一两个人而去。之前我还觉得有待验证，现在看来全部已经验证了，事实就在眼前。</p>\n<p>老赵离开呢，大部分原因是模模搭这个产品的发展方向很不明确，而且越走越远，对他来说对模模搭是有感情的吧。自己有很多自己的想法想要实现，却一直没有机会。当然这个机会需要有人来提供，而沈总恰恰是一个不容许别人有想法的人。当然大部分原因还是老赵希望自己能有更多的发展。从这个角度看公司呢，看不到发展。</p>\n<p>东升，就比较冲动了，快要年终了突然要离职，我们都劝他说，你等年终那一部分奖金再走也算对得起自己。可是他偏偏是倔强的，就因为沈总不尊重他。那也是我对沈总不屑的开始。</p>\n<p>许就更让人心疼了，年底绩效被评最低分，身边的人都看在眼里，他做的事情怎么会得个最低分。就那么被不公平的对待真的让人惋惜。</p>\n<p>而其他人基本上就是，19年被裁掉了。</p>\n<p>经过这些人，我又怎么能拿出百分百的热情去投入现在的工作呢？我热情，也有感情，做事情积极，但是现实很残酷。</p>\n<h2>团队怎么了</h2>\n<p>从头到尾都有一个声音在说，我不是一个很好相处的人，放置于团队，可能就意味着，我是一个不那么团结的人。但是在一切都没有稳定之前，也许成功的秘诀就在少数人手里。我的不和谐是因为集体本身操作的不规范，还是因为我个人确实突兀，这个事实还有待议论。就算是我非常特立独行，但是我觉得无伤大雅，因为团队本身已经接受了我的特立独行。说到底，我只是一直秉承我的原则，观点。很多人都固执己见，听不进任何声音（我倒不觉得自己听不进声音）。</p>\n<p>我理解，一个公司通过团队绩效去衡量个人贡献是有原因的。一方面可以摆脱公司对个人的依赖，另一方面可以让员工互相制约。但是这么做更大的一个问题是，如果没有明朗的晋升渠道，会让一个人的努力付之东流，这就像是会给员工卸磨杀驴的感觉，比如公司后期会接各种各样的项目，如果说一个项目组里，所有人的能力不均衡的话就会有这种问题。长此以往，就会让员工变成寄生虫，他们有能力却不发挥，对个人对组织都是一种浪费。恰巧公司就没有一个非常明确的晋升渠道，我就是一个很明显的例子。所以团队最后会变得效率底下我觉得是板上钉钉的事情了，获取校招会缓解这种压力，但是效率一定不会快的。</p>\n<p>我倒是觉得个人的成就感，在影响对公司评价的时候会占很大的比重。但是现在似乎慢慢在忽略这种“个人主义”，集体固然重要，但是不要忘了少数人的创新，却改变了世界。忽略了个人，集体也就慢慢瓦解了。</p>\n<p>最初的团队是我自己，一个人负责网站所有的开发内容，设计团队出图，我按老板心思开发。现在想想只要能胜任工作，这种开发模式未尝不好，那时候缺少规范，但是气氛很好，功能单一，也没什么技术难度。这就很容易让人不思进取，这段时间我的个人成长很慢，怨言最少（要说有，也只是对沈）。这种状态持续了将近一年的时间。从公司角度说，对于容灾很差，我要是那时候离开，交接也会很麻烦，公司网站更新或许会暂停也说不定。</p>\n<p>之后团队是以敏捷为蓝图开展的，各种会议形式层出不穷。印象最深的两个会议就是每天的站立会和每周的迭代会，迭代会开会时长有时候会超过半天。说到这里我特别想吐槽一下这个会议，在我看来每周会议时间尽量在半个小时以内是对团队和个人得负责，很多事情可以通过邮件和共享日历得形式解决。而我们的会议，冗长且没有意义，确切得说可能有些人就是在开会消磨时间，没有开头，没有结尾，甚至没有结论，开过会议之后该怎么样还是怎么样。有人可能会认为，会议没有章程或者说规则，这仅仅是一方面，并没有看到长时间会议的本质，很多中层将会议冗长归咎于沟通困难，我并不这么觉得，如果事物有证可循，说起来并不困难。本质实际上就是对未来的迷茫导致的，怎么理解呢？我还是觉得我们的中层甚至高层，并没有一个确切的方向，仅仅是金钱导向，市场导向，这个是通用的结论，放到哪里可能都会成为准则但是正因为这是通用的结论，就导致了领导层对未来实际上并没有十足的把握或者说，并不知道下一步到底能做出来什么，控制到什么程度。基本上所作的事情，不可控，不可预期，这直接就导致对未来的迷茫。就这一点我始终觉得，既然是程序开发，对未来的把握，特别是对应用程序未来的表现应该有十足的把握才对，然而就这一点，对目前的管理层来说就很难做到。</p>\n<p>一方面我们的管理层，都比较恋权。不肯下方自己并没有把握的权力。另一方面，我们的管理层有一种迷之自信，就DCV来说，过来人特别是开发应该都能说出来系统一系列的毛病，问题。但是这些管理层就是觉得完美，或者说他们已经察觉了，只不过因为牵扯太多放弃治疗了。我严重怀疑我们的领导层低估了系统的毛病，我更是觉得日积月累，已成重疾，却没人重视。</p>\n<p>从半路出家的敏捷到现在也实施一年多了，或许在领导层眼中看到了工程进度的可控性（虽然效率依然不高），看到了针对变化的适应和改变。但是我看到的确是逐渐被消耗的热情，逐渐失去感情的开发过程。就这一点我觉得很多让人反思。我问过同事，总会听到混日子这种回应，对于开发来说，每天达成目标似乎很简单，因为这个目标也是自己指定的。就算完不成自己指定的目标也不会有很大的问题，因为就现在的情况来说，并没有惩罚仅仅是互相恭维而已（至少我还没有见过，因为自己没完成迭代任务而有什么后果的）。或许这种敏捷开发方式本身就会让人彼此恭维吧。</p>\n<p>说起敏捷实际上，现在实行的敏捷并不是真正的敏捷开发，我们仅仅是使用了看板，遵守了几个会议而已。经过自己的理解和消化，这一年时间更像是改造了敏捷开发过程一样，我们变成了四不像，没有遵守敏捷的规则，甚至习惯性的生出了很多毛病。</p>\n<p>CEO 绝对掌权这件事没什么异议，但是 CEO 开始做单一产品线上的产品经理了，我就理解不能了。产品经理传递领导思想我也没什么异议，可怕的是，一个产品经理，不会做交互原型，只会听领导，讲故事。项目组自己组织开发我也没什么异议，但是架构也要开发搞，我就觉得公司是真的信任项目组里的开发啊，不知道是“好事”还是坏事。</p>\n<p>说到底没有意见可能不完整，我就说了这么一句：“项目经理需要有项目管理以及架构能力的人担任；基于现在产品线太多的情况，产品经理取消，用产品团队代替，针对行业进行产品设计；研发团队负责新功能，新的可视化方案、图表、持续集成，自动化、AI等基础设施建设；项目团队用已有的项目架构，短期开发项目；沉淀下来的行业项目，晋升为产品，由产品团队重新设计，发布为产品，并从原有项目团队中，选择开发进入新的产品团队。”。</p>\n","hasMore":true,"tags":["工作经历"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【工作】我在UN的三年经历\ntags:\n  - 工作经历\ncategories: 随笔\ndate: 2020-05-30\nstatus: published\n\n---\n\n> 有人悲欢离合，月有阴--圆缺，此事古难全。\n\n<!-- 人有悲欢离合，月有阴晴圆缺，此事古难全 -->\n<!-- 有人悲欢离合，月有阴--圆缺，此事古难全 -->\n<!-- 有人-------，----无情----，--------- -->\n<!-- more -->\n\n## 为什么要写这篇文章\n\n从入职到文章发布这个时间点一共整整三年时间，而这篇文章是从第二年开始计划的，期间陆陆续续地写，临近发布才定稿。首先我非常地明确自己的定位，也非常明白作为一个员工应该如何表达自己地观点。其次三年时间也真心想为公司做点什么，和朋友聊天的时候，每次说到企业，总会拿自己所在的公司类比，谈天说地，想要分享出来。最后，有些事情积怨已久，实在是想要“伸张正义”。按照朋友的说辞，“本来想着做点什么，但是现实跟你说不行，然后就不想了，领工资吧，慢慢就庸庸碌碌了”。\n\n其实还有另外一个原因，就是每年的年会。比起别家创业公司（咱也不知道是不是创业公司，咱也不敢问），UN很大方。对于大多数开发来说，也就是参加一下，放松放松的事情吧。因为实在没有什么业绩可说。单就做的东西，和公司发展方向也不同路，怎么能有机会提个名呢！但还是有一些事让我在意，并且慢慢积累到心里，酿成这坛苦酒。其一，是公司年终绩效考核标准，那一年正值深冬，新东方员工改编神曲“沙漠骆驼”，一句“到头来干不过写PPT的”广为流传。说到了我心里，年终绩效一纸PPT，多少全凭借领导脸色，真的是难以说辞。你说低吧，公司问你做了啥能给公司带来效益的事情，都说不要只看眼前利益，也不知道为什么这个时候非要问问你给公司带来了什么效益。开发有些苦衷就是自己做的工作很难体现在效益上，做平台的还能靠用户量去衡量，但是这个用户量跟开发也没什么关系，大方向被领导把控着呢。这么看来就是领导决策，开发背锅啊。其二，是这年会的风气。慢慢后来有一些话语总是刺耳，仔细一听原来是在拍马屁，赶紧闭了眼睛，有人会说你闭了眼睛，他们照样说你能听得见啊！我说“至少看不见是谁了，不是吗”。耳随眼动，若看见一片黑暗，听到的可能也是闷响。就这两点吧，总归说人们溜须拍马，可不曾想“规矩”就让人们这样。\n\n朋友知道我参加年会不高兴，还特意宽慰我，“风口上的猪，听过吧。在公司发展的风口上，猪都能飞何况人呢。”。“也不一样，猪能卖钱，人却只能骗钱！”，我补充道，“还骗的你乐呵呵的。”。\n\n就这样，有压抑，有热情，有放纵，有胆怯，慢慢汇集起来这么一篇。也算是给领导层了解公司的另一个视角吧，已经厌倦了在同事吧发匿名的帖子，在过去的时间里“突然间迷茫了......”，“一个问题”，“致 CEO”，“马总读得好可爱”...种种标题，解决了我的一些困惑，也带来很多深思，匿名总归不是解决问题的办法。\n\n下面一章主要描述我的经历，可以当小说看，有个人主义润色。调调是很悲观的，因为我觉得这样有好处。\n\n## 这三年，我都经历了什么\n\n这个经历不是公司的发展历史，而是我的工作历史。\n\n### 初来乍到\n\n月末刚刚结了婚，就赶着时间回北京找工作了，在家里前后待了一个多月期间也干了点私活，因为那个时候做私活还没有章程，干着很累，就在家多呆了几天。到了北京，一天不敢耽搁，投简历约时间准备面试，一气呵成。那个时候互联网还是上升期，所以机会也多。拿着手机，没多一会日程就排到两周之外了。\n\n我刚来公司，办公区还没有装修，偌大的一个办公室就摆了几张桌子，然后五六个人，坐一起开发，大家可能都是新同事，互相不了解。那个时候呢，有人组织玩狼人杀，借着这个游戏就慢慢熟悉起来了。刚开始入职的时候，被分配了一个修改网站模板的活，这不刚来公司么，就想借这个任务让大家都认识一下我。招我进来的同事也挺好，在群里说“大牛，以后有问题找我或者找他”其实挺受用，因为刚来一个礼拜就这么相信我。心里还是很温暖的。\n\n### 网站日常维护\n\n接下来一年就是正常的网站维护工作，每天早上九点上班，晚上十点或者十一点下班，当然这里有一些主观因素在，因为老婆孩子不在身边，所以大概晚上都在公司蹭网，有事马上做，没事也可以休闲一下。那时候开发没什么流程，老板说今天加个东西，接下来几天就要做出来。当然我们有产品经理，只不过产品经理没什么权力，仅仅是上传下达而已。那时候记忆最深刻的就是和沈争论“为什么要这么做”的问题，沈说“叫你干什么就干什么，哪那么多为什么。”，至于语气就自行脑补吧。虽然就那么一次，但是有的人一次就够多了。其实那之后就没什么交集了，因为不许发问，不许有想法。事情就按照他说的做就行了，工作也简单也无聊。但是总体还是挺舒服的。期间认识了老何，这个人吧，任劳任怨的还主动给集体订餐，曾经无数次听见沈说他“你真土，脑子有病”之类的话。就一次次的接着，没有怨言。有时候甚至有一种冲上去“保护”他的冲动，只不过仍然是没有缘由的关心，从何谈起呢。\n\n记得网站更新一开始是没有日期的，每次沈说变更，晚上就要腾出时间来专门变更，因为网站代码使用的是 `svn`，并且并没有自动化，所以涉及到的程序都是本地编译好之后才替换到远程的。工作量有一些吧，每次半小时左右。所以我就非常想每周定期更新，这样也会在更新前有所准备。一开是推行挺容易，只要自己更新时间修改到每周四就行了，因为大部分时间都是自己定的，很宽松。印象里有一次，产品经理跟我说要更新，因为没到周四，我就推了。没想到他跟沈说了，沈就理直气壮的来到我后边指着电脑屏幕让我更新，这算是记忆力比较深刻的冲突。我问“更新出了问题谁来负责？”“我负责”他理直气壮的说。最后我更新了，但是仍然很生气。这个更新时间本来是灵活的，但是更重要的是这件事情并不那么简单。态度随和一点我可能就马上更新了，正是这种不可一世的嚣张气焰，让人无法忍受。我想那个时候年轻的我，更是难以控制那种被人不尊重的感觉所引发的怒火。\n\n那个时候有多乱呢？可以这么说，除了日常工作，偶尔还会有人跟你指派“私活”，当然这个并不是真的私活，而是公司的其他业务部门的任务。比如小地图、实例之类的东西。所有的东西都没有个真正的流程，这可能也是后来实行敏捷的原因吧，虽然实行之后并没有解决这些问题。\n\n### 敏捷开端\n\n没到一年的时间，儿子出生了。开始辗转家庭和公司之间。发生了一些婚姻上必须发生的事情，让自己成长了很多。有时候忙于处理家事就忽略了公司的细节，等到过了年一切才逐渐稳定。\n\n年初，老赵离职了。\n\n年后，公司就决定实行 `SCRUM` 敏捷开发模式，还请了老师给大家上课。关于这种敏捷方式，我吐槽过，[过去的文章](https://www.zhoyq.com/2018/02/08/%E8%BD%AC%E8%BD%BD/%E3%80%90SCRUM%E3%80%91%E6%95%8F%E6%8D%B7%E5%A5%BD%EF%BC%8C%E6%95%8F%E6%8D%B7%E5%9D%8F/)也分析过，我就不再说了。就单说说请来的老师上的课，怎么形容呢，从来也没有上过这么幼稚的课，不管是外面请来的，还是内部的课程，无一例外的幼稚。外部请来的老师，用纸牌模拟公司运作，最终还结果还是独裁方式赢了。至于公司独裁经营的方式，这里不论对错，光用纸牌模拟，这一点就让人唏嘘。我根本想不到纸牌逻辑是如何牵强的和公司运营联系起来的。这更像是一场沈的大型马屁会。总之对于骗子来说，拍的没错。内部敏捷培训呢，玩具、看板。可能是在想让大家体验一把如何 `SCRUM` 吧。只不过场景就像小孩过家家一样，并没有什么实用价值。说到底，都没有把自己的短板露出来，让别人评正。按常理，这样也对，每个人都不希望自己被人看到短处，或者自己的邪恶被人发觉。但是转型期间，公司就应该正视这些问题，避免重蹈覆辙。\n\n就像婴儿学步一样，公司的敏捷模式也慢慢开始了。只不过有些畸形而已，当事人不在乎我觉得旁观者说再多，也都是废话。转型了，工作也慢慢开始有了产品负责人、开发、`master`的区分。至于畸形，我[之前的文章](https://www.zhoyq.com/2018/09/09/%E7%AE%A1%E7%90%86/%E3%80%90SCRUM%E3%80%91%E2%80%98%E6%95%8F%E6%8D%B7%E2%80%99%E4%B8%8D%E6%95%8F%E6%8D%B7%EF%BC%81/)也有讨论，就不再说了。\n\n后来公司招聘，有个同事跟我说“我完不成工作就赖你”，还把我们的聊天记录发给了别人，发完我以为他要说什么的时候，第二天就不来了。还真是“理直气壮”呢。这件事倒是没给我造成什么影响，我就是搞不懂，他为什么不来了呢？他说他很热爱这份工作的。沈后来还跟我说“你把他弄走的，我面试的时候对他还是挺满意的”。\n\n后来，网站就关闭了。\n\n### 离职变请假，小误会\n\n网站关闭之前，其实我和许曾经试图说服沈，改一下架构。甚至提出了，业余时间不影响工作的情况下去改就行。沈并不喜欢这种观点，但是听到我们业余做，不影响工作的情况下就默许了。后来这件事就直接交给了许。我之后由于家庭问题跟沈提离职，经过多方协调被准许在家休假一个月。月末回来之前，工资卡如期得到了工资，我开始以为公司对我不错，后来问过人事才明白这是他们操作的失误，需要在未来的工资中扣除。总之很尴尬，因为年中绩效，写了这件事，还说要为公司奉献之类的话。简直是滑天下之大稽。\n\n由于走之前网站整体交给了许，我回来沈觉得他做网站不错，也没什么事情，就让我去做别的事情了。\n\n### 转组应用\n\n先是从徐那里接过来图片转模型的工作，用的是第三方接口。期间发生过一个笑话，事情是这样的，我完成了图片转模型的接口对接工作，实例页面也写出来了，找沈看一下，沈上来就说，“这怎么是同步的？我要异步的。”，当时我真的想笑，对方提供的接口就是异步的，因为图片转模型计算量比较大，我自己写的接口也是异步的，只不过在页面上我是想这一切连贯一点发生而已。这一点足以证明，沈对这件事实际上一无所知。也加速了我离开平台的想法。\n\n做了一段时间，彭波让我去应用组，跟沈谈了一下，就转到应用组了。主要负责什么也不清楚，总之哪里有问题就冲向哪里。彭说我是探索型的，我也不知道还有什么类型，总之先这样吧，一开始挺轻松的。\n\n最初主要是集中在微服务上，那个时候微服务的概念很火，自家的后台也有改写的意思，特别是新的项目就想按照微服务的方式运营。说实话，现在看来那时候的体量完全没有必要使用这种技术，而且后来的实践证明，真的不需要。虽然不需要，但是有要求还是要搞一下，从头到尾又熟悉了一遍 `Spring Cloud`。然后就是哪里需要补哪里，但是最终也没有谁需要，这个就是事实。\n\n后来有个项目需要对接视频，需要使用 `WebRTC` 相关技术。就要求我去了解一下，前端关于 `WebRTC` 倒是不需要我去整理，因为网上多的是开源项目，而且播放的需求比较简单。主要是 `RTSP` 转 `WebRTC` 比较麻烦，又限制于对方网络、协议等限制，搞了比较长的时间才可以。也是在这个时候，出了[几篇关于 `docker` 基础的笔记](https://www.zhoyq.com/2018/08/18/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E3%80%90docker%E3%80%91%E3%80%90%E4%B8%80%E3%80%91docker%E5%9F%BA%E7%A1%80/)。\n\n再后来进了一个项目组，由于新人比较多再加上基础参差不齐，导致自己对现状不怎么满意。那个时候都是做一些彭的想法，虽然并不觉得很好，当时也没想太多，只是做而已。彭做事和沈不同，但是都是一样的固执。\n\n这期间，东升离职了。\n\n### 接口组，从始至终\n\n“接口组”诞生就像个笑话，可能都还没笑就没了。因为他不是一个部门，就是一个团队的称呼，虽然称作团队，可是团队里只有我一个人。\n\n有一次，马过来问“这个接口能不能干”，可是接口有很多种，又不清楚是哪种。基于以往的经验，可能是基于 `HTTP` 的接口吧，就满口答应下来了。关键是那个时候都没有什么事情做，这个任务有必要答应下来。\n\n真正做的时候才发现是 `JNA` 或者 `JNI` 技术，调用底层动态库的接口。虽然接触过，但是还是感觉被摆了一道。前后接了不少类似的接口，有的甚至是基于 `XML` 的自定义协议。虽然有过经验，但这写接口要求三几天就出来，每一个在说的时候都火急火燎的，但是做出来都是经过很长时间才会调试，这个弄得自己很不满意。和项目经理有了冲突，甚至被告了黑状，我不在乎领导如何看待这件事，因为我并不相信自己的命运在别人手里，我在乎的是为什么背后捅刀子。质疑了一个人的人品之后，之后自然就是绝交。工作上不至于绝交，但是其他事情应该不会再有更深的合作了。作为项目经理，连项目的进度时间都把控不好，我觉得这就是不称职。而公司似乎很欢迎这类人（当然还有别的长处）。\n\n年后招聘了一个开发，穆，进了“接口组”，我基本上把手头上的活全都交给她了，但是她来了之后似乎就没做过什么接口方面的工作。先是一起学习了 `JNA` 基础，接着做了一些项目上的事情，大部分工作就是 `CRUD`。再之后，就被分配到别的组了，我想接口既然没什么事情了，就解散了吧。之后就没有所谓“接口组”这个称呼了。\n\n我一度认为，公司渐渐相信我了，开始放开权力给我搞了。到头来觉得，都是幻觉。政策天天变，人心日日慌。今天的大饼还没有被消化，新的大饼已经在酝酿中...\n\n这期间，许离职了。\n\n### 技术负责人、TDD、规范\n\n把事情交给穆之后能空余出很多时间，和杜聊了聊，最终决定帮项目组做一些基础设施。比如，持续集成、代码质量检查之类的。最终组建了 `jenkins` 和 `sonarqube` 一起的持续集成以及质量检查平台。后来，持续集成交给了肖，代码质量交给了江。\n\n这期间又提出了技术负责人的概念，我倒是不感冒，因为虽然这么一提但什么也没有改变。说是以后开始实行规范方法和测试驱动开发，我的[一篇文章](https://www.zhoyq.com/2019/02/20/%E7%AE%A1%E7%90%86/%E3%80%90%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E3%80%91%E5%AF%B9SCRUM%E4%B8%8ETDD%E7%9A%84%E7%90%86%E8%A7%A3/)还特地说了 `SCRUM` 与 `TDD` 结合的事情。想要改变总归是好事，但是好景不长。\n\n之所以这么说，是因为一切都流于表面。测试驱动开发是先开发再测试的，规范倒是执行的不错，因为工具都比较简单，操作性也比较强（这个之后还会提到）。这样一来，白白增加了工作量，却没有什么实际意义。\n\n后来又说搞一个基础框架，这个我还真借用开源项目，做了一个符合要求的基础框架。现在看来还是无用功，因为后台也变了。这个变在我看来是个好事，因为要转用成熟稳定的后台（公司成熟产品的后台）。\n\n技术负责人有一个会议，每周二都要参加，我觉得很浪费时间，也没什么好说的，就提议后台包含框架都交给江，前端现在缺人，我去做前端吧。于是两周后，我就开始做前端了。\n\n### 前端\n\n做前端有几个目的：\n\n* 我以前就做过前端，现在想熟悉一下现在的前端技术，也算是横向扩展自己的能力。\n* 公司未来产品方向在前端，很多产品都是在前端开发的。\n* 前端出成品快，比后端可见性强。\n* 我一向觉得三维可视化开发，从前端最好切入。借助前端工作，重拾计算机图形学是一个最好的途径。\n\n所以我不仅做前端，我还继续学习 `WebGL` 底层的 `API`。当然不止于此...\n\n前端做起来挺顺手，但也遇到一些问题，首先第一件事就是规范。规范这种东西见仁见智，每个人都有一些细微的差别。这就是为什么团队会要求统一规范，主要目的就是让代码可读性高些。因为之前自己写代码是有一些习惯的，导致做前端之后整体都不太适应，虽然前端能修改代码里的错误格式，但自己还是会有一段时间觉得别扭。现在我也知道习惯之后就好了，但是这个转变还是有些生硬。\n\n再来，就是团队成员关系处理上。我自认为，前端能力是可以的，也不怕和别人比试。但是当你认真想要从技术上和别人一较高下的时候，对方总是避开你的锋芒。这个是很难避免的结局，大家会觉得你很幼稚，或者会觉得你很难相处。但这就是我锻炼自己的方法，无关乎个人关系的。似乎团队里每个人的想法就仅仅是完成需求，而不是提升自己，完善产品。这令我觉得前途一片灰暗，因为团队是这样机械的团队，甚至大到公司层面都没有一个晋升，或者成长方式，难道公司工作就单纯的是帮助公司完成用户需求而已么？我并不这么觉得，所以我觉得很前途灰暗。另外公司并没有给员工定岗，这就是为什么我能从后端直接变成前端开发，从团队看，敏捷也并没有定义每个人的职责，特别是开发，敏捷要求自治。如果每个人技术上都是平手的话，这个团队多么需要一个项目经理啊。不然就会是现在这样，团队职责不明确，导致最后互相推诿、扯皮。\n\n现在的开发是什么状态呢？因为敏捷里角色职位互相制约，就没有大小之分，私下关系很好的同事，在工作的时候就会非常松弛。领导台上慷慨激昂，台下员工一滩死水。\n\n### 后知后觉 P 项目\n\n团队也做了几个项目，本以为会就这样一直下去，没想到中间公司裁了一次员，自己带过的，或者关系不错的新人都被辞退了。庆幸他们拿了 `n+1` 走了，公司对他们还算是可以。那时候好像赶上国庆节，放假回来直接进了新的项目组，姑且叫它 `P` 项目吧，那时候自己甚至都不知道这个组是什么。两周一迭代，一开始还有模有样，到后来就完全是指哪打哪了。范完全负责室内，翔完全负责室外，我配合翔有时候也参与一些业务上的开发，最后负责过视频业务，编辑器对接等。怎么乱呢，一个问题，会有三个甚至更多个人坐在一起讨论，这件事本身就有点迷。\n\n* 首先是底子不好，底层总是出一些逻辑上的问题。从大体上看，就是项目管理不好。\n* 其次是开发分工不好，范事情最多，其次是翔，周边这些人到后期已经没什么事情了。这就是为什么我们又被搞去做项目去了。\n* 再次是架构设计，一说是给实施人员用的，但开发以及后台完全是按照开发逻辑来的，实施人员很难参与进来。这也是一开始口碑差的原因。还有就是基于配置或者编程方式的更新业务的模式，我不太确定这有什么用，本身前端就可以随之更换脚本。\n* 之后是工作流程不确定，看上去是讨论了很多次，但是每次工作流程仍然要讨论，甚至一堆人，在那吵，还没有结论。\n* 最后是接手难，这个项目上手，按照魏原话，是需要三年以上开发去做的。新人不可能接触到这个项目，我想真是这样的话，项目还怎么可持续发展。\n* 最差劲的一点是，没有说明性的文档。\n\n我写这些，除了说明项目缺点之外，还有一点就是肯定项目中有一些逻辑是很巧妙的，有些逻辑能在苹果手机上找到原型。但是从总体上说，没办法掩盖缺点。\n\n我对自己的工作并没有太多记忆，可能是因为很多时候都是当时指派，当时完成，导致自己没有什么记忆。只记得来组里第一件事好像是支持上海录屏的事情，就脱离项目本身，单独一条支线上开发上海需要的场景。开发完这件事，开始接触项目本身的开发，但是都不深入。主要工作，还是范和翔来完成，我总觉得魏好像在开发上只是信任这两个人而已，别人都没进入状态，而且怨声载道。再之后，就接受了电力的项目，还是脱离项目开发。说来可笑，开发 `P` 本身就是为了支持项目，但是却又为了开发项目而脱离这个 `P`。从整体上看，可能是决策的人不在事情内导致的吧。\n\n电力这一做，就做到过年。\n\n### 疫情爆发\n\n2020年，对很多人来说都会终身难忘吧，特别是那些奋斗在一线的医生护士。新冠肺炎的流行，导致我的工作也开始变得模糊不清，从2020年2月开始就居家隔离。每天的新闻都是疫情消息，每天的生活就是工作，孩子，吃饭，睡觉。从某些角度说，这场疫情实现了我多年的愿望，就是在家工作。但也切实毁了我的梦想，所谓在家工作，一定不是在家加上工作这么简单。事实却仅仅是单纯的相加而已。和在公司工作并没有差异的居家工作开始了。\n\n我并没有退出电力项目，开始居家办公之后，也首先是从这里开始的。工作两周之后，又开始为 `N` 项目做一些基础设施，工作完成后又换了回来。\n\n### 新的想法\n\n回到电力项目组，当然是重新开发迭代，计划。但是这时候得自己心里上，开始越来越不平衡了。组内新来了一位项目领导，在中层算是比较有话语权得一位领导，但是他不太懂前端，恰巧这个时候前端又要重构，脱离 `P` 去做。这个时候矛盾就来了，一开会就开始问各种问题，你觉得这怎么样，那怎么样，但是这些问题大家都心里清楚不会落实，做也是自己做。问来问去只能是浪费时间，却也没有办法。更何况，作为开发，实在是何德何能去管理架构上得事情（对，就是工作岗位没到位，钱没到位）。有时候甚至觉得他在玩儿这帮开发，可能是真的不知道吧，也没办法，为了能在中层说上话，没有他，可能这个项目组就可能不存在了。\n\n迭代会的时候，产品说了一下未来项目发展，这直接让我觉得项目是在重复做 `P` 做过得事情，试想 `P` 是十几个人六个月得开发做出来的，并且还是重构老项目，很多代码都在，现在让这三个人做，而且是从无到有。这一刻，说实话我已经在计划更换工作内容了。之前模型库说需要招人来维护，正好我熟悉这个，我就想尝试一下，看看我能不能转过去。一方面公司需要，另一方面我本身也非常了解后端。前端再做下去，对我来说没有半点益处。综合考虑，还是开始在转岗这件事发力。到现在为止，虽然还没落实，但是已经允许了，我目前就是期待着能快点招来人，顶替我的位置，然后转岗。而文章发布的时间点，我还在等待这个新同事的到来。\n\n### 总结\n\n总体看上去还很平和，先后经历了老赵，东升，许等，这些好友的离职（在一个地方工作时间长了最无奈的就是这个），真的是暗藏很多无奈。\n\n说这些人之前呢，我先说说我参加过孙总一个培训，学到了不少东西。里边就聊到一个问题，一个员工是因为什么来到一家公司，又是因为什么离开一家公司呢？结论其实当时已经有了，因为公司的各方面发展而来，因为一两个人而去。之前我还觉得有待验证，现在看来全部已经验证了，事实就在眼前。\n\n老赵离开呢，大部分原因是模模搭这个产品的发展方向很不明确，而且越走越远，对他来说对模模搭是有感情的吧。自己有很多自己的想法想要实现，却一直没有机会。当然这个机会需要有人来提供，而沈总恰恰是一个不容许别人有想法的人。当然大部分原因还是老赵希望自己能有更多的发展。从这个角度看公司呢，看不到发展。\n\n东升，就比较冲动了，快要年终了突然要离职，我们都劝他说，你等年终那一部分奖金再走也算对得起自己。可是他偏偏是倔强的，就因为沈总不尊重他。那也是我对沈总不屑的开始。\n\n许就更让人心疼了，年底绩效被评最低分，身边的人都看在眼里，他做的事情怎么会得个最低分。就那么被不公平的对待真的让人惋惜。\n\n而其他人基本上就是，19年被裁掉了。\n\n经过这些人，我又怎么能拿出百分百的热情去投入现在的工作呢？我热情，也有感情，做事情积极，但是现实很残酷。\n\n## 团队怎么了\n\n从头到尾都有一个声音在说，我不是一个很好相处的人，放置于团队，可能就意味着，我是一个不那么团结的人。但是在一切都没有稳定之前，也许成功的秘诀就在少数人手里。我的不和谐是因为集体本身操作的不规范，还是因为我个人确实突兀，这个事实还有待议论。就算是我非常特立独行，但是我觉得无伤大雅，因为团队本身已经接受了我的特立独行。说到底，我只是一直秉承我的原则，观点。很多人都固执己见，听不进任何声音（我倒不觉得自己听不进声音）。\n\n我理解，一个公司通过团队绩效去衡量个人贡献是有原因的。一方面可以摆脱公司对个人的依赖，另一方面可以让员工互相制约。但是这么做更大的一个问题是，如果没有明朗的晋升渠道，会让一个人的努力付之东流，这就像是会给员工卸磨杀驴的感觉，比如公司后期会接各种各样的项目，如果说一个项目组里，所有人的能力不均衡的话就会有这种问题。长此以往，就会让员工变成寄生虫，他们有能力却不发挥，对个人对组织都是一种浪费。恰巧公司就没有一个非常明确的晋升渠道，我就是一个很明显的例子。所以团队最后会变得效率底下我觉得是板上钉钉的事情了，获取校招会缓解这种压力，但是效率一定不会快的。\n\n我倒是觉得个人的成就感，在影响对公司评价的时候会占很大的比重。但是现在似乎慢慢在忽略这种“个人主义”，集体固然重要，但是不要忘了少数人的创新，却改变了世界。忽略了个人，集体也就慢慢瓦解了。\n\n最初的团队是我自己，一个人负责网站所有的开发内容，设计团队出图，我按老板心思开发。现在想想只要能胜任工作，这种开发模式未尝不好，那时候缺少规范，但是气氛很好，功能单一，也没什么技术难度。这就很容易让人不思进取，这段时间我的个人成长很慢，怨言最少（要说有，也只是对沈）。这种状态持续了将近一年的时间。从公司角度说，对于容灾很差，我要是那时候离开，交接也会很麻烦，公司网站更新或许会暂停也说不定。\n\n之后团队是以敏捷为蓝图开展的，各种会议形式层出不穷。印象最深的两个会议就是每天的站立会和每周的迭代会，迭代会开会时长有时候会超过半天。说到这里我特别想吐槽一下这个会议，在我看来每周会议时间尽量在半个小时以内是对团队和个人得负责，很多事情可以通过邮件和共享日历得形式解决。而我们的会议，冗长且没有意义，确切得说可能有些人就是在开会消磨时间，没有开头，没有结尾，甚至没有结论，开过会议之后该怎么样还是怎么样。有人可能会认为，会议没有章程或者说规则，这仅仅是一方面，并没有看到长时间会议的本质，很多中层将会议冗长归咎于沟通困难，我并不这么觉得，如果事物有证可循，说起来并不困难。本质实际上就是对未来的迷茫导致的，怎么理解呢？我还是觉得我们的中层甚至高层，并没有一个确切的方向，仅仅是金钱导向，市场导向，这个是通用的结论，放到哪里可能都会成为准则但是正因为这是通用的结论，就导致了领导层对未来实际上并没有十足的把握或者说，并不知道下一步到底能做出来什么，控制到什么程度。基本上所作的事情，不可控，不可预期，这直接就导致对未来的迷茫。就这一点我始终觉得，既然是程序开发，对未来的把握，特别是对应用程序未来的表现应该有十足的把握才对，然而就这一点，对目前的管理层来说就很难做到。\n\n一方面我们的管理层，都比较恋权。不肯下方自己并没有把握的权力。另一方面，我们的管理层有一种迷之自信，就DCV来说，过来人特别是开发应该都能说出来系统一系列的毛病，问题。但是这些管理层就是觉得完美，或者说他们已经察觉了，只不过因为牵扯太多放弃治疗了。我严重怀疑我们的领导层低估了系统的毛病，我更是觉得日积月累，已成重疾，却没人重视。\n\n从半路出家的敏捷到现在也实施一年多了，或许在领导层眼中看到了工程进度的可控性（虽然效率依然不高），看到了针对变化的适应和改变。但是我看到的确是逐渐被消耗的热情，逐渐失去感情的开发过程。就这一点我觉得很多让人反思。我问过同事，总会听到混日子这种回应，对于开发来说，每天达成目标似乎很简单，因为这个目标也是自己指定的。就算完不成自己指定的目标也不会有很大的问题，因为就现在的情况来说，并没有惩罚仅仅是互相恭维而已（至少我还没有见过，因为自己没完成迭代任务而有什么后果的）。或许这种敏捷开发方式本身就会让人彼此恭维吧。\n\n说起敏捷实际上，现在实行的敏捷并不是真正的敏捷开发，我们仅仅是使用了看板，遵守了几个会议而已。经过自己的理解和消化，这一年时间更像是改造了敏捷开发过程一样，我们变成了四不像，没有遵守敏捷的规则，甚至习惯性的生出了很多毛病。 \n\nCEO 绝对掌权这件事没什么异议，但是 CEO 开始做单一产品线上的产品经理了，我就理解不能了。产品经理传递领导思想我也没什么异议，可怕的是，一个产品经理，不会做交互原型，只会听领导，讲故事。项目组自己组织开发我也没什么异议，但是架构也要开发搞，我就觉得公司是真的信任项目组里的开发啊，不知道是“好事”还是坏事。\n\n说到底没有意见可能不完整，我就说了这么一句：“项目经理需要有项目管理以及架构能力的人担任；基于现在产品线太多的情况，产品经理取消，用产品团队代替，针对行业进行产品设计；研发团队负责新功能，新的可视化方案、图表、持续集成，自动化、AI等基础设施建设；项目团队用已有的项目架构，短期开发项目；沉淀下来的行业项目，晋升为产品，由产品团队重新设计，发布为产品，并从原有项目团队中，选择开发进入新的产品团队。”。\n"},{"title":"【Gitlab】gitlab-ci速成","excerpt":"<p>要使用 <code>Gitlab</code> 提供的 <code>CI/CD</code> 功能，需要在仓库根目录创建一个文件 <code>.gitlab-ci.yml</code>，这样 <code>Gitlab</code> 每次提交都会运行这个配置文件。在 <code>Gitlab</code> 中基础的 <code>CI/CD</code> 单元是作业（job）。一个作业代表运行在一个特殊提交上下文里的 <code>bash</code> 脚本。你可能有一个作业用来运行测试，另一个运行构建或者部署。在这个配置文件中，作业应该放在顶层映射，当然要排除 <code>Gitlab CI/CD</code> 保留的顶层映射。</p>\n","url":"/2020/05/01/技术笔记/【Gitlab】gitlab-ci速成","fromDate":"2020-05-01","category":"技术笔记","text":"<p>要使用 <code>Gitlab</code> 提供的 <code>CI/CD</code> 功能，需要在仓库根目录创建一个文件 <code>.gitlab-ci.yml</code>，这样 <code>Gitlab</code> 每次提交都会运行这个配置文件。在 <code>Gitlab</code> 中基础的 <code>CI/CD</code> 单元是作业（job）。一个作业代表运行在一个特殊提交上下文里的 <code>bash</code> 脚本。你可能有一个作业用来运行测试，另一个运行构建或者部署。在这个配置文件中，作业应该放在顶层映射，当然要排除 <code>Gitlab CI/CD</code> 保留的顶层映射。</p>\n<!-- more -->\n<p>下面是一部分保留的顶层映射：</p>\n<ul>\n<li><code>image</code>（作业运行的 docker 映像）</li>\n<li><code>services</code>（其他需要在作业运行期间启动的docker映像）</li>\n<li><code>before_script</code>（在script之前运行）</li>\n<li><code>after_script</code>（在script之后运行）</li>\n<li><code>stages</code>（定义阶段名称和顺序）</li>\n<li><code>variables</code>（所有job共享的变量）</li>\n<li><code>cache</code>（控制在CICD运行时的数据缓存）</li>\n</ul>\n<p>每一个作业必须从属于一个阶段（<code>stages</code>）（如果没有，默认是 <code>test</code>）。阶段运行在队列里，默认的阶段队列是: <code>build</code>、<code>test</code>、<code>deploy</code>。每一个作业都有<code>before_script</code>、<code>after_script</code>、<code>variables</code>、<code>cache</code>。在作业级别定义这些内容将会覆盖顶层配置，最终要的是变量，变量定义是一系列键值对。使用变量的语法和 <code>bash</code> 雷同。</p>\n<p>下面是一些使用变量的限制：</p>\n<ul>\n<li>变量不支持 <code>bash</code> 变量的扩展、置换、预设等。</li>\n<li>变量不能递归或者具有赋值顺序。顶层的变量可以用于作业级别。</li>\n</ul>\n<p>不能再同一个级别引用变量：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不能这样做</span><br><span class=\"line\">variables:</span><br><span class=\"line\">    PROD_STAGE_NAME: prod</span><br><span class=\"line\">    PROD_URL: https://thisismywebsite.com/${PROD\\_STAGE\\_NAME}</span><br></pre></td></tr></tbody></table></figure>\n<p>不能递归使用：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不能这样做</span><br><span class=\"line\">variables:</span><br><span class=\"line\">    CURRENT\\_STAGE: PROD</span><br><span class=\"line\">    PROD\\_STAGE\\_NAME: prod</span><br><span class=\"line\"></span><br><span class=\"line\">my\\_job:</span><br><span class=\"line\">    variables:</span><br><span class=\"line\">        STAGE\\_NAME: ${${CURRENT\\_STAGE}\\_STAGE\\_NAME}</span><br></pre></td></tr></tbody></table></figure>\n<p>可以在作业中引用顶层变量：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可以这样做</span><br><span class=\"line\">variables:</span><br><span class=\"line\">    PROD\\_STAGE\\_NAME: prod</span><br><span class=\"line\"></span><br><span class=\"line\">my\\_job:</span><br><span class=\"line\">    variables:</span><br><span class=\"line\">        STAGE\\_NAME: ${PROD_STAGE_NAME}</span><br></pre></td></tr></tbody></table></figure>\n<p>之前提到过，作业就是在上下文中运行一个 <code>bash</code> 脚本。所以每个作业必须有一个 <code>script</code>。默认情况下，作业会在每次提交之后运行。使用 <code>only</code>、<code>except</code>、<code>when</code> 可以控制运行的时机。</p>\n<p><code>only</code> 和  <code>except</code> 支持以下选项：</p>\n<ul>\n<li>分支名称列表 例如：<code>master</code> 或者 <code>develop</code></li>\n<li>标签名称列表</li>\n<li><code>js</code> 类型的正则表达式匹配分支和标签名称</li>\n<li>特殊关键字: <code>api</code>、<code>branches</code>、<code>external</code>、<code>tags</code>、<code>pushes</code>、<code>schedules</code>、<code>triggers</code>、<code>web</code></li>\n<li>特殊的：使用 <code>only</code> 时，使用 <code>branches</code> 和 <code>tags</code> 设置分支或者标签，因为如果没有配置作业会在每一个分支和标签运行</li>\n<li>仓库路径过滤器处理仓库forks</li>\n</ul>\n<blockquote>\n<p>重要的事情：由点开始的作业会直接禁止运行。</p>\n</blockquote>\n<p>下面是一个配置实例：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">    PROD_ACCOUNT: &quot;1234567890&quot;</span><br><span class=\"line\">    PROD_STAGE_NAME: prod</span><br><span class=\"line\">    PROD1_REGION: us-east-1</span><br><span class=\"line\">    PROD2_REGION: us-west-2</span><br><span class=\"line\">    STAGING_ACCOUNT: &quot;0987654321&quot;</span><br><span class=\"line\">    STAGING_STAGE_NAME: staging</span><br><span class=\"line\">    STAGING_REGION: us-east-1</span><br><span class=\"line\"></span><br><span class=\"line\">.deployment_script: &amp;deployment_script</span><br><span class=\"line\">    stage: deploy</span><br><span class=\"line\">    script: |</span><br><span class=\"line\">        # assume ${DEPLOYMENT\\_ROLE} in AWS</span><br><span class=\"line\">        # install dependencies</span><br><span class=\"line\">        # run serverless deployment with ${STAGE_NAME}, ${REGION}, and ${ACCOUNT}</span><br><span class=\"line\"></span><br><span class=\"line\">.production_variables</span><br><span class=\"line\">    DEPLOYMENT_ROLE: &quot;arn:aws:iam::${PROD\\_ACCOUNT}:role/gitlab-ci-deployment&quot;</span><br><span class=\"line\">    STAGE\\_NAME: ${PROD_STAGE_NAME}</span><br><span class=\"line\">    ACCOUNT: ${PROD\\_ACCOUNT}</span><br><span class=\"line\">    PRODUCTION: &quot;true&quot;    </span><br><span class=\"line\"></span><br><span class=\"line\">deploy:production\\_1: &amp;deploy\\_production</span><br><span class=\"line\">    &lt;&lt;: *deployment\\_script</span><br><span class=\"line\">    variables:</span><br><span class=\"line\">        &lt;&lt;: *production\\_variables</span><br><span class=\"line\">        REGION: ${PROD1_REGION}</span><br><span class=\"line\">    only:</span><br><span class=\"line\">        - tags</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:production_2:</span><br><span class=\"line\">    &lt;&lt;: *deploy_production</span><br><span class=\"line\">    variables:</span><br><span class=\"line\">        &lt;&lt;: *production_variables</span><br><span class=\"line\">        REGION: ${PROD2\\_REGION}        </span><br><span class=\"line\"></span><br><span class=\"line\">deploy:staging:</span><br><span class=\"line\">    &lt;&lt;: *deployment\\_script</span><br><span class=\"line\">    variables:</span><br><span class=\"line\">        DEPLOYMENT\\_ROLE: &quot;arn:aws:iam::${STAGING_ACCOUNT}:role/gitlab-ci-deployment&quot;</span><br><span class=\"line\">        STAGE_NAME: ${STAGING\\_STAGE\\_NAME}</span><br><span class=\"line\">        REGION: ${STAGING_REGION}</span><br><span class=\"line\">        ACCOUNT: ${STAGING\\_ACCOUNT}</span><br><span class=\"line\">    only:</span><br><span class=\"line\">        - master</span><br></pre></td></tr></tbody></table></figure>\n<h2>引用</h2>\n<ul>\n<li><a href=\"https://about.gitlab.com/blog/2017/07/13/making-ci-easier-with-gitlab/\">原文引用</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\">更详细的配置信息</a></li>\n</ul>\n","hasMore":true,"tags":["Gitlab","CI/CD"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【Gitlab】gitlab-ci速成\ncategories: 技术笔记\ntags:\n  - Gitlab\n  - CI/CD\ndate: 2020-05-01\nstatus: published\n\n---\n\n要使用 `Gitlab` 提供的 `CI/CD` 功能，需要在仓库根目录创建一个文件 `.gitlab-ci.yml`，这样 `Gitlab` 每次提交都会运行这个配置文件。在 `Gitlab` 中基础的 `CI/CD` 单元是作业（job）。一个作业代表运行在一个特殊提交上下文里的 `bash` 脚本。你可能有一个作业用来运行测试，另一个运行构建或者部署。在这个配置文件中，作业应该放在顶层映射，当然要排除 `Gitlab CI/CD` 保留的顶层映射。\n\n<!-- more -->\n\n下面是一部分保留的顶层映射：\n\n- `image`（作业运行的 docker 映像）\n- `services`（其他需要在作业运行期间启动的docker映像）\n- `before_script`（在script之前运行）\n- `after_script`（在script之后运行）\n- `stages`（定义阶段名称和顺序）\n- `variables`（所有job共享的变量）\n- `cache`（控制在CICD运行时的数据缓存）\n\n每一个作业必须从属于一个阶段（`stages`）（如果没有，默认是 `test`）。阶段运行在队列里，默认的阶段队列是: `build`、`test`、`deploy`。每一个作业都有`before_script`、`after_script`、`variables`、`cache`。在作业级别定义这些内容将会覆盖顶层配置，最终要的是变量，变量定义是一系列键值对。使用变量的语法和 `bash` 雷同。\n\n下面是一些使用变量的限制：\n\n- 变量不支持 `bash` 变量的扩展、置换、预设等。\n- 变量不能递归或者具有赋值顺序。顶层的变量可以用于作业级别。\n\n不能再同一个级别引用变量：\n\n```yaml\n# 不能这样做\nvariables:\n    PROD_STAGE_NAME: prod\n    PROD_URL: https://thisismywebsite.com/${PROD_STAGE_NAME}\n```\n\n不能递归使用：\n\n```yaml\n# 不能这样做\nvariables:\n    CURRENT_STAGE: PROD\n    PROD_STAGE_NAME: prod\n\nmy_job:\n    variables:\n        STAGE_NAME: ${${CURRENT_STAGE}_STAGE_NAME}\n```\n\n可以在作业中引用顶层变量：\n\n```yaml\n# 可以这样做\nvariables:\n    PROD_STAGE_NAME: prod\n\nmy_job:\n    variables:\n        STAGE_NAME: ${PROD_STAGE_NAME}\n```\n\n之前提到过，作业就是在上下文中运行一个 `bash` 脚本。所以每个作业必须有一个 `script`。默认情况下，作业会在每次提交之后运行。使用 `only`、`except`、`when` 可以控制运行的时机。\n\n`only` 和  `except` 支持以下选项：\n\n- 分支名称列表 例如：`master` 或者 `develop`\n- 标签名称列表\n- `js` 类型的正则表达式匹配分支和标签名称\n- 特殊关键字: `api`、`branches`、`external`、`tags`、`pushes`、`schedules`、`triggers`、`web`\n- 特殊的：使用 `only` 时，使用 `branches` 和 `tags` 设置分支或者标签，因为如果没有配置作业会在每一个分支和标签运行\n- 仓库路径过滤器处理仓库forks\n\n> 重要的事情：由点开始的作业会直接禁止运行。\n\n下面是一个配置实例：\n\n```yaml\nvariables:\n    PROD_ACCOUNT: \"1234567890\"\n    PROD_STAGE_NAME: prod\n    PROD1_REGION: us-east-1\n    PROD2_REGION: us-west-2\n    STAGING_ACCOUNT: \"0987654321\"\n    STAGING_STAGE_NAME: staging\n    STAGING_REGION: us-east-1\n\n.deployment_script: &deployment_script\n    stage: deploy\n    script: |\n        # assume ${DEPLOYMENT_ROLE} in AWS\n        # install dependencies\n        # run serverless deployment with ${STAGE_NAME}, ${REGION}, and ${ACCOUNT}\n\n.production_variables\n    DEPLOYMENT_ROLE: \"arn:aws:iam::${PROD_ACCOUNT}:role/gitlab-ci-deployment\"\n    STAGE_NAME: ${PROD_STAGE_NAME}\n    ACCOUNT: ${PROD_ACCOUNT}\n    PRODUCTION: \"true\"    \n\ndeploy:production_1: &deploy_production\n    <<: *deployment_script\n    variables:\n        <<: *production_variables\n        REGION: ${PROD1_REGION}\n    only:\n        - tags\n\ndeploy:production_2:\n    <<: *deploy_production\n    variables:\n        <<: *production_variables\n        REGION: ${PROD2_REGION}        \n\ndeploy:staging:\n    <<: *deployment_script\n    variables:\n        DEPLOYMENT_ROLE: \"arn:aws:iam::${STAGING_ACCOUNT}:role/gitlab-ci-deployment\"\n        STAGE_NAME: ${STAGING_STAGE_NAME}\n        REGION: ${STAGING_REGION}\n        ACCOUNT: ${STAGING_ACCOUNT}\n    only:\n        - master\n```\n\n## 引用\n\n- [原文引用](https://about.gitlab.com/blog/2017/07/13/making-ci-easier-with-gitlab/)\n- [更详细的配置信息](https://docs.gitlab.com/ee/ci/yaml/README.html)\n"},{"title":"【项目管理】名词速递","excerpt":"<p>记录几个项目管理的名词，方便以后查找。</p>\n","url":"/2020/04/27/管理/【项目管理】名词速递","fromDate":"2020-04-27","category":"管理","text":"<p>记录几个项目管理的名词，方便以后查找。</p>\n<!-- more -->\n<h2>PRINCE2</h2>\n<p><strong>受控环境下的项目管理（Project IN Controlled Environment）</strong></p>\n<ul>\n<li>指导项目Directing a Project (DP)</li>\n<li>开始项目Starting up a Project (SU)</li>\n<li>启动项目Initiating a Project (IP)</li>\n<li>管理项目阶段边线Managing Stage Boundaries (SB)</li>\n<li>控制一个阶段Controlling a Stage (CS)</li>\n<li>管理产品交付Managing Product Delivery (MP)</li>\n<li>结束项目Closing a Project (CP)</li>\n<li>计划Planning (PL)</li>\n</ul>\n<h2>PMBOK</h2>\n<ul>\n<li>项目整合管理（以前版本称为项目综合管理，或项目集成管理），包括6个子过程：制订项目章程；制定项目管理计划；指导与管理项目执行；监控项目工作；实施整体变更控制；结束项目或阶段。</li>\n<li>项目范围管理，包括6个子过程：规划范围管理；收集需求；定义范围；创建WBS；确认范围；控制范围。</li>\n<li>项目进度管理，包括7个子过程：规划进度管理；定义活动；排列活动顺序；估算活动资源；估算活动持续时间；制定进度计划；控制进度。</li>\n<li>项目成本管理，包括4个子过程：规划成本管理；估算成本；制定预算；控制成本。</li>\n<li>项目质量管理，包括3个子过程：规划质量管理；实施质量保证；控制质量。</li>\n<li>项目人力资源管理，包括4个子过程：规划人力资源管理；组建项目团队；建设项目团队；管理项目团队。</li>\n<li>项目沟通管理，包括3个子过程,：规划沟通管理；管理沟通；控制沟通。</li>\n<li>项目风险管理，包括6个子过程：规划风险管理；识别风险；实施定性风险分析；实施定量风险分析；规划风险应对；控制风险。</li>\n<li>项目采购管理，包括4个子过程：规划采购管理；实施采购；控制采购；结束采购。</li>\n<li>干系人管理，包括4个过程：识别干系人；规划干系人管理；管理关系人参与；控制干系人参与。</li>\n</ul>\n<h2>ICB</h2>\n<p>ICB要求国际项目管理人员必须具备的专业资质包括7大类、60细项：</p>\n<p><strong>一、基本项目管理</strong></p>\n<ul>\n<li>项目和项目管理。</li>\n<li>项目管理实施。</li>\n<li>项目化管理。</li>\n<li>系统方法整合。</li>\n<li>项目范畴。</li>\n<li>项目阶段和生命周期。</li>\n<li>项目发展和评估。</li>\n<li>项目目标和战略。</li>\n<li>项目成功和失败标准。</li>\n<li>项目启动。</li>\n<li>项目结束。</li>\n</ul>\n<p><strong>二、方法和技术</strong></p>\n<ul>\n<li>项目结构。</li>\n<li>内容和范围。</li>\n<li>时间表。</li>\n<li>资源。</li>\n<li>项目成本和财务。</li>\n<li>配置和调整。</li>\n<li>项目风险。</li>\n<li>绩效度量。</li>\n<li>项目控制。</li>\n<li>信息、文件和报告。</li>\n</ul>\n<p><strong>三、组织能力</strong></p>\n<ul>\n<li>项目组织。</li>\n<li>采购、合同。</li>\n<li>标准和规章。</li>\n<li>问题处理。</li>\n<li>谈判、会议。</li>\n<li>永久组织。</li>\n<li>业务流程。</li>\n<li>个人发展。</li>\n<li>组织学习。</li>\n</ul>\n<p><strong>四、社会能力</strong></p>\n<ul>\n<li>团队合作。</li>\n<li>领导力。</li>\n<li>沟通。</li>\n<li>冲突和危机。</li>\n</ul>\n<p><strong>五、一般管理</strong></p>\n<ul>\n<li>项目质量管理。</li>\n<li>项目信息系统。</li>\n<li>变革管理。</li>\n<li>营销和产品管理。</li>\n<li>系统管理。</li>\n<li>安全、健康与环境。</li>\n<li>法律事务。</li>\n<li>金融和会计。</li>\n</ul>\n<p><strong>六、个人态度</strong></p>\n<ul>\n<li>沟通能力。</li>\n<li>动机（主动、积极、热情）。</li>\n<li>关联能力（开放度）。</li>\n<li>价值升值能力。</li>\n<li>说服能力（解决冲突、论辩文化、公正性）。</li>\n<li>解决问题能力（全面思考）。</li>\n<li>忠诚度（团结合作、乐于助人）。</li>\n<li>领导力。</li>\n</ul>\n<p><strong>七、一般印象</strong></p>\n<ul>\n<li>逻辑。</li>\n<li>思维的结构性。</li>\n<li>无错。</li>\n<li>清晰。</li>\n<li>常识。</li>\n<li>透明度。</li>\n<li>简要。</li>\n<li>中庸。</li>\n<li>经验视野。</li>\n<li>技巧。</li>\n</ul>\n<p><strong>每一细项的评判分为低、中、高三个档次。分类、标准、指导及参照构成了完整的ICB评估系统。</strong></p>\n<h2>lean6sigma</h2>\n<p><strong>定义阶段</strong></p>\n<p>1．定义顾客需求，分析系统，寻找浪费或变异，确定改进机会；\n2．分析组织战略和组织的资源；\n3．确定项目：包括项目的关键输出、所用资源、项目范围。</p>\n<p><strong>测量阶段</strong></p>\n<p>4．定义流程特性；\n5．测量流程现状（包括各流程或动作需要的时间）；\n6．对测量系统分析；\n7．评价过程能力。</p>\n<p><strong>分析阶段</strong></p>\n<p>8．分析流程，查找浪费根源或变异源；\n9．确定流程及关键输入因素。</p>\n<p><strong>改进阶段</strong></p>\n<p>10．确定输入输出变量之间的关系，提出优化方案；\n11．定改进计划。</p>\n<p><strong>控制阶段</strong></p>\n<p>12．建立运作规范、实施流程控制；\n13．验证测量系统，验证过程及其能力；\n14．对实施结果进行总结，规范成功经验，提出新问题。</p>\n<p><strong>工具选择</strong></p>\n<p>实施精益六西格玛项目时应该合理选择精益生产与六西格玛的工具，选择工具的原则是：结合组织的资源选择最佳的工具，简单的问题要用简单的工具，否则，浪费资源。</p>\n<p><img src=\"/attaches/FF478352624047C1CA5C85C6841D9D79.jpg\" alt=\"lean6sigma\" class=\"img-responsive\" /></p>\n<h2>CMMI</h2>\n<p><strong>能力成熟度模型集成（Capability Maturity Model Integration）</strong></p>\n<ul>\n<li>CMMI一级，执行级。在执行级水平上，软件组织对项目的目标与要做的努力很清晰，项目的目标可以实现。但是由于任务的完成带有很大的偶然性，软件组织无法保证在实施同类项目时仍然能够完成任务。项目实施能否成功主要取决于实施人员。</li>\n<li>CMMI二级，管理级。在管理级水平上，所有第一级的要求都已经达到，另外，软件组织在项目实施上能够遵守既定的计划与流程，有资源准备，权责到人，对项目相关的实施人员进行了相应的培训，对整个流程进行监测与控制，并联合上级单位对项目与流程进行审查。二级水平的软件组织对项目有一系列管理程序，避免了软件组织完成任务的随机性，保证了软件组织实施项目的成功率。</li>\n<li>CMMl三级，明确级。在明确级水平上，所有第二级的要求都已经达到，另外，软件组织能够根据自身的特殊情况及自己的标准流程，将这套管理体系与流程予以制度化。这样，软件组织不仅能够在同类项目上成功，也可以在其他项目上成功。科学管理成为软件组织的一种文化，成为软件组织的财富。</li>\n<li>CMMI四级，量化级。在量化管理级水平上，所有第三级的要求都已经达到，另外，软件组织的项目管理实现了数字化。通过数字化技术来实现流程的稳定性，实现管理的精度，降低项目实施在质量上的波动。</li>\n<li>CMMI五级，优化级。在优化级水平上，所有第四级的要求都已经达到，另外，软件组织能够充分利用信息资料，对软件组织在项目实施的过程中可能出现的次品予以预防。能够主动地改善流程，运用新技术，实现流程的优化。</li>\n</ul>\n","hasMore":true,"tags":["PRINCE2","PMBOK","ICB","lean6sigma","CMMI"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【项目管理】名词速递\ntags: \n  - PRINCE2\n  - PMBOK\n  - ICB\n  - lean6sigma\n  - CMMI\ncategories: 管理\ndate: 2020-04-27\nstatus: published\n\n---\n\n记录几个项目管理的名词，方便以后查找。\n\n<!-- more -->\n\n## PRINCE2\n\n**受控环境下的项目管理（Project IN Controlled Environment）**\n\n\n* 指导项目Directing a Project (DP)\n* 开始项目Starting up a Project (SU)\n* 启动项目Initiating a Project (IP)\n* 管理项目阶段边线Managing Stage Boundaries (SB)\n* 控制一个阶段Controlling a Stage (CS)\n* 管理产品交付Managing Product Delivery (MP)\n* 结束项目Closing a Project (CP)\n* 计划Planning (PL)\n\n## PMBOK\n\n- 项目整合管理（以前版本称为项目综合管理，或项目集成管理），包括6个子过程：制订项目章程；制定项目管理计划；指导与管理项目执行；监控项目工作；实施整体变更控制；结束项目或阶段。\n- 项目范围管理，包括6个子过程：规划范围管理；收集需求；定义范围；创建WBS；确认范围；控制范围。\n- 项目进度管理，包括7个子过程：规划进度管理；定义活动；排列活动顺序；估算活动资源；估算活动持续时间；制定进度计划；控制进度。\n- 项目成本管理，包括4个子过程：规划成本管理；估算成本；制定预算；控制成本。\n- 项目质量管理，包括3个子过程：规划质量管理；实施质量保证；控制质量。\n- 项目人力资源管理，包括4个子过程：规划人力资源管理；组建项目团队；建设项目团队；管理项目团队。\n- 项目沟通管理，包括3个子过程,：规划沟通管理；管理沟通；控制沟通。\n- 项目风险管理，包括6个子过程：规划风险管理；识别风险；实施定性风险分析；实施定量风险分析；规划风险应对；控制风险。\n- 项目采购管理，包括4个子过程：规划采购管理；实施采购；控制采购；结束采购。\n- 干系人管理，包括4个过程：识别干系人；规划干系人管理；管理关系人参与；控制干系人参与。\n\n## ICB\n\nICB要求国际项目管理人员必须具备的专业资质包括7大类、60细项：\n\n**一、基本项目管理**\n\n- 项目和项目管理。\n- 项目管理实施。\n- 项目化管理。\n- 系统方法整合。\n- 项目范畴。\n- 项目阶段和生命周期。\n- 项目发展和评估。\n- 项目目标和战略。\n- 项目成功和失败标准。\n- 项目启动。\n- 项目结束。\n\n**二、方法和技术**\n\n- 项目结构。\n- 内容和范围。\n- 时间表。\n- 资源。\n- 项目成本和财务。\n- 配置和调整。\n- 项目风险。\n- 绩效度量。\n- 项目控制。\n- 信息、文件和报告。\n\n**三、组织能力**\n\n- 项目组织。\n- 采购、合同。\n- 标准和规章。\n- 问题处理。\n- 谈判、会议。\n- 永久组织。\n- 业务流程。\n- 个人发展。\n- 组织学习。\n\n**四、社会能力**\n\n- 团队合作。\n- 领导力。\n- 沟通。\n- 冲突和危机。\n\n**五、一般管理**\n\n- 项目质量管理。\n- 项目信息系统。\n- 变革管理。\n- 营销和产品管理。\n- 系统管理。\n- 安全、健康与环境。\n- 法律事务。\n- 金融和会计。\n\n**六、个人态度**\n\n- 沟通能力。\n- 动机（主动、积极、热情）。\n- 关联能力（开放度）。\n- 价值升值能力。\n- 说服能力（解决冲突、论辩文化、公正性）。\n- 解决问题能力（全面思考）。\n- 忠诚度（团结合作、乐于助人）。\n- 领导力。\n\n**七、一般印象**\n\n- 逻辑。\n- 思维的结构性。\n- 无错。\n- 清晰。\n- 常识。\n- 透明度。\n- 简要。\n- 中庸。\n- 经验视野。\n- 技巧。\n\n**每一细项的评判分为低、中、高三个档次。分类、标准、指导及参照构成了完整的ICB评估系统。**\n\n## lean6sigma\n\n**定义阶段**\n\n1．定义顾客需求，分析系统，寻找浪费或变异，确定改进机会；\n2．分析组织战略和组织的资源；\n3．确定项目：包括项目的关键输出、所用资源、项目范围。\n\n**测量阶段**\n\n4．定义流程特性；\n5．测量流程现状（包括各流程或动作需要的时间）；\n6．对测量系统分析；\n7．评价过程能力。\n\n**分析阶段**\n\n8．分析流程，查找浪费根源或变异源；\n9．确定流程及关键输入因素。\n\n**改进阶段**\n\n10．确定输入输出变量之间的关系，提出优化方案；\n11．定改进计划。\n\n**控制阶段**\n\n12．建立运作规范、实施流程控制；\n13．验证测量系统，验证过程及其能力；\n14．对实施结果进行总结，规范成功经验，提出新问题。\n\n**工具选择**\n\n实施精益六西格玛项目时应该合理选择精益生产与六西格玛的工具，选择工具的原则是：结合组织的资源选择最佳的工具，简单的问题要用简单的工具，否则，浪费资源。\n\n![lean6sigma](../DATA/1b4c510fd9f9d72a54253e38d42a2834349bbb55.jpg)\n\n## CMMI\n\n**能力成熟度模型集成（Capability Maturity Model Integration）**\n\n- CMMI一级，执行级。在执行级水平上，软件组织对项目的目标与要做的努力很清晰，项目的目标可以实现。但是由于任务的完成带有很大的偶然性，软件组织无法保证在实施同类项目时仍然能够完成任务。项目实施能否成功主要取决于实施人员。\n- CMMI二级，管理级。在管理级水平上，所有第一级的要求都已经达到，另外，软件组织在项目实施上能够遵守既定的计划与流程，有资源准备，权责到人，对项目相关的实施人员进行了相应的培训，对整个流程进行监测与控制，并联合上级单位对项目与流程进行审查。二级水平的软件组织对项目有一系列管理程序，避免了软件组织完成任务的随机性，保证了软件组织实施项目的成功率。\n- CMMl三级，明确级。在明确级水平上，所有第二级的要求都已经达到，另外，软件组织能够根据自身的特殊情况及自己的标准流程，将这套管理体系与流程予以制度化。这样，软件组织不仅能够在同类项目上成功，也可以在其他项目上成功。科学管理成为软件组织的一种文化，成为软件组织的财富。\n- CMMI四级，量化级。在量化管理级水平上，所有第三级的要求都已经达到，另外，软件组织的项目管理实现了数字化。通过数字化技术来实现流程的稳定性，实现管理的精度，降低项目实施在质量上的波动。\n- CMMI五级，优化级。在优化级水平上，所有第四级的要求都已经达到，另外，软件组织能够充分利用信息资料，对软件组织在项目实施的过程中可能出现的次品予以预防。能够主动地改善流程，运用新技术，实现流程的优化。\n"},{"title":"【项目管理】简短的说一下SCRUM DEVOPS OKR","excerpt":"<blockquote>\n<p>我相信，好的体系总是是简单的，但是细节复杂而有序。</p>\n</blockquote>\n","url":"/2020/04/26/管理/【项目管理】简短的说一下SCRUM DEVOPS OKR","fromDate":"2020-04-26","category":"管理","text":"<blockquote>\n<p>我相信，好的体系总是是简单的，但是细节复杂而有序。</p>\n</blockquote>\n<!-- more -->\n<h2>为什么不提倡 <code>SCRUM</code></h2>\n<blockquote>\n<p>主题：失去天才</p>\n</blockquote>\n<p>主题很明显，从开发的角度说，<code>Scrum</code>是毫无人性的。它默认每个人能力都是一样，水平也是一样的，产出水平也是一样的。并且在极力抹平个体差距。最差劲的是它把人当做是机器；从管理者角度说，他是员工出错的屏障，“有bug？”“扔进bug池就行了。”。也是功能不按期完成的借口，”新任务？““你看这是我们的用户故事，排在三个月之后吧。”；从领导的角度来说，交付的东西很模糊并不具体，比如故事地图。如果说是看一眼的领导还好，但是要刨根问底呢？有谁能回答的面面俱到。最重要的是，用户故事会成为一个屏障。</p>\n<p>当然写这一切的问题也比不上人才流失，特别是天才的流失。因为这种敏捷方案，强调团队，但是不突出个人。有时候做事很好的人，（这个行业更多做事多，但是不说话的）会因为公司政治而离开，会因为团队不理解而离开，更会因为一直表现平平而心情失落离开。我清楚的是市面上的实际情况是能力参差不齐。个人开发要盘算到团队上算绩效。这都是不公平的现象。最终的结果可能就是能力稍高的人不堪重负离开了。</p>\n<h2>为什么做不好 <code>DEVOPS</code></h2>\n<blockquote>\n<p>主题：自动化</p>\n</blockquote>\n<p>开发运维，我理解意思就是让开发学着运维的活，节省成本。最重要的是开发部署运维表现起来很流畅。但是对人的要求也高很多。所以在执行的时候很多做不到完全的，仅仅是必要的时候还需要运维帮忙。在我看来，自动化是解决这一问题的终极方案，特别是后来出现的 <code>AIDEVOPS</code>。但是要好好的建立起数学模型才可以。那在这之前，脚本自动化其实是简单可行的一种方案。能够让开发有运维的能力。</p>\n<h2><code>OKR</code>？ 简单点好伐</h2>\n<blockquote>\n<p>主题：待办事项列表更简单<br>\n缺点：没有细节，缺少全局思想（事情在传递的时候很容易跑偏）</p>\n</blockquote>\n<p>OKR，听起来真的高大上，执行的时候做法上就像是一个由上而下的待办事项列表。一级一级分的很清楚。有时候做的不好，可能级别之间的代办事项会出入很大。这点不好控制毕竟人各有理解方式。所以想到由上而下齐心去做好一个代办列表还真的不是那么容易的。其实根本没减少多少任务。而且没有细节，不好评审。最多也是百分之多少完成度。让人难以想象究竟做了什么。</p>\n<p>所以为了解决上边的这些问题，结合自己的经验。我觉得，量化的过程是一个自然发生的事情，这样就可以避免不合适团队的侵入式，让人反感。底薪加奖金的工作方式，至今还没有在IT领域里发生过，究其原因主要是量化不好做，奖金的数量不好确定。但是为了公平起见，也为了更好的做开源项目，我想这是最好的方式。</p>\n","hasMore":true,"tags":["SCRUM","DEVOPS","OKR"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【项目管理】简短的说一下SCRUM DEVOPS OKR\ntags: \n  - SCRUM\n  - DEVOPS\n  - OKR\ncategories: 管理\ndate: 2020-04-26\nstatus: published\n\n---\n\n> 我相信，好的体系总是是简单的，但是细节复杂而有序。\n\n<!-- more -->\n\n## 为什么不提倡 `SCRUM`\n\n> 主题：失去天才\n\n主题很明显，从开发的角度说，`Scrum`是毫无人性的。它默认每个人能力都是一样，水平也是一样的，产出水平也是一样的。并且在极力抹平个体差距。最差劲的是它把人当做是机器；从管理者角度说，他是员工出错的屏障，“有bug？”“扔进bug池就行了。”。也是功能不按期完成的借口，”新任务？““你看这是我们的用户故事，排在三个月之后吧。”；从领导的角度来说，交付的东西很模糊并不具体，比如故事地图。如果说是看一眼的领导还好，但是要刨根问底呢？有谁能回答的面面俱到。最重要的是，用户故事会成为一个屏障。\n\n当然写这一切的问题也比不上人才流失，特别是天才的流失。因为这种敏捷方案，强调团队，但是不突出个人。有时候做事很好的人，（这个行业更多做事多，但是不说话的）会因为公司政治而离开，会因为团队不理解而离开，更会因为一直表现平平而心情失落离开。我清楚的是市面上的实际情况是能力参差不齐。个人开发要盘算到团队上算绩效。这都是不公平的现象。最终的结果可能就是能力稍高的人不堪重负离开了。\n\n## 为什么做不好 `DEVOPS`\n\n> 主题：自动化\n\n开发运维，我理解意思就是让开发学着运维的活，节省成本。最重要的是开发部署运维表现起来很流畅。但是对人的要求也高很多。所以在执行的时候很多做不到完全的，仅仅是必要的时候还需要运维帮忙。在我看来，自动化是解决这一问题的终极方案，特别是后来出现的 `AIDEVOPS`。但是要好好的建立起数学模型才可以。那在这之前，脚本自动化其实是简单可行的一种方案。能够让开发有运维的能力。\n\n## `OKR`？ 简单点好伐\n\n> 主题：待办事项列表更简单<br>\n> 缺点：没有细节，缺少全局思想（事情在传递的时候很容易跑偏）\n\nOKR，听起来真的高大上，执行的时候做法上就像是一个由上而下的待办事项列表。一级一级分的很清楚。有时候做的不好，可能级别之间的代办事项会出入很大。这点不好控制毕竟人各有理解方式。所以想到由上而下齐心去做好一个代办列表还真的不是那么容易的。其实根本没减少多少任务。而且没有细节，不好评审。最多也是百分之多少完成度。让人难以想象究竟做了什么。\n\n所以为了解决上边的这些问题，结合自己的经验。我觉得，量化的过程是一个自然发生的事情，这样就可以避免不合适团队的侵入式，让人反感。底薪加奖金的工作方式，至今还没有在IT领域里发生过，究其原因主要是量化不好做，奖金的数量不好确定。但是为了公平起见，也为了更好的做开源项目，我想这是最好的方式。\n"},{"title":"【SpringBoot】不完整笔记","excerpt":"<p>这个笔记不完整。</p>\n","url":"/2020/04/25/技术笔记/【SpringBoot】不完整笔记","fromDate":"2020-04-25","category":"技术笔记","text":"<p>这个笔记不完整。</p>\n<!-- more -->\n<p><strong>@Transactional 事物隔离级别</strong></p>\n<ul>\n<li>Atomic（原子性）</li>\n<li>Consistency（一致性）</li>\n<li>Isolation（隔离性）</li>\n<li>Durability（持久性）</li>\n</ul>\n<p><strong>隔离级别</strong></p>\n<ul>\n<li>未提交读：允许一个事务读取另一个事物未提交的数据（可能引发脏读、不可重复读、幻读）</li>\n<li>读写提交：一个事物只能读取另外一个事物已经提交的数据，不能读取未提交的数据（可能引发不可重复读、幻读）</li>\n<li>可重复读：客服读写提交中的不可重复读现象（可能引发幻读）</li>\n<li>串行化：要求所有的SQL按照顺序执行，保证了数据的一致性</li>\n</ul>\n<p><strong>使用隔离级别</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(isolation = Isolation.SERIALIZABLE) // 串行化</span><br><span class=\"line\">public int insertUser(){</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>redis配置</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;!-- 不适用 lettuce 客户端 --&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 使用 jedis 客户端 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>使用 <code>jedis</code> 客户端需要自定义Bean <code>RedisConnectionFactory</code></li>\n<li>为了查询 <code>redis</code> 显示字符串, 需要自定义Bean <code>RedisTemplate</code>, 并设置字符串序列化方式</li>\n</ul>\n<p><strong>RedisTemplate操作</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private ReidsTemplate rt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 地理位置操作接口</span><br><span class=\"line\">rt.opsForGeo();</span><br><span class=\"line\">// 散列操作接口</span><br><span class=\"line\">rt.opsForHash();</span><br><span class=\"line\">// 基数操作接口</span><br><span class=\"line\">rt.opsForHyperLogLog();</span><br><span class=\"line\">// 列表操作接口</span><br><span class=\"line\">rt.opsForList();</span><br><span class=\"line\">// 集合操作接口</span><br><span class=\"line\">rt.opsForSet();</span><br><span class=\"line\">// 字符串操作接口</span><br><span class=\"line\">rt.opsForValue();</span><br><span class=\"line\">// 有序集合操作接口</span><br><span class=\"line\">rt.opsForZSet();</span><br><span class=\"line\"></span><br><span class=\"line\">// ## 绑定操作 - 用于连续处理 key 键对应值</span><br><span class=\"line\">rt.boundGeoOps(&quot;key&quot;);</span><br><span class=\"line\">// ... 其他方法不再赘述</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>Redis事物操作</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redisTemplate.opsForValue().set(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">List list = (List)redisTemplate.execute((RedisOperations operations) -&gt; {</span><br><span class=\"line\">    // 设置要监控key1</span><br><span class=\"line\">    operations.watch(&quot;key1&quot;);</span><br><span class=\"line\">    // 开启事务，在exec命令执行前，全部都只是进入队列</span><br><span class=\"line\">    operations.multi();</span><br><span class=\"line\">    operations.opsForValue().set(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class=\"line\">    // operations.opsForValue().increment(&quot;key1&quot;, 1);// ①</span><br><span class=\"line\">    // 获取值将为null，因为redis只是把命令放入队列</span><br><span class=\"line\">    Object value2 = operations.opsForValue().get(&quot;key2&quot;);</span><br><span class=\"line\">    System.out.println(&quot;命令在队列，所以value为null【&quot;+ value2 +&quot;】&quot;);</span><br><span class=\"line\">    operations.opsForValue().set(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class=\"line\">    Object value3 = operations.opsForValue().get(&quot;key3&quot;);</span><br><span class=\"line\">    System.out.println(&quot;命令在队列，所以value为null【&quot;+ value3 +&quot;】&quot;);</span><br><span class=\"line\">    // 执行exec命令，将先判别key1是否在监控后被修改过，如果是则不执行事务，否则就执行事务</span><br><span class=\"line\">    return operations.exec();// ②</span><br><span class=\"line\">});</span><br><span class=\"line\">System.out.println(list);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>Redis流水线</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long start = System.currentTimeMillis();</span><br><span class=\"line\">List list = (List)redisTemplate.executePipelined((RedisOperations operations) -&gt; {</span><br><span class=\"line\">    for (int i=1; i&lt;=100000; i++) {</span><br><span class=\"line\">        operations.opsForValue().set(&quot;pipeline_&quot; + i, &quot;value_&quot; + i);</span><br><span class=\"line\">        String value = (String) operations.opsForValue().get(&quot;pipeline_&quot; + i);</span><br><span class=\"line\">        if (i == 100000) {</span><br><span class=\"line\">            System.out.println(&quot;命令只是进入队列，所以值为空【&quot; + value +&quot;】&quot;);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">});</span><br><span class=\"line\">Long end = System.currentTimeMillis();</span><br><span class=\"line\">System.out.println(&quot;耗时：&quot; + (end - start) + &quot;毫秒。&quot;);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>Redis发布订阅</strong></p>\n<ul>\n<li>实现 <code>MessageListener</code> 消息监听器</li>\n<li>创建Bean <code>RedisMessageListenerContainer</code></li>\n</ul>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">private ThreadPoolTaskScheduler taskScheduler;</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">private RedisConnectionFactory connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public ThreadPoolTaskScheduler initTaskScheduler() {</span><br><span class=\"line\">    ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();</span><br><span class=\"line\">    taskScheduler.setPoolSize(20);</span><br><span class=\"line\">    return taskScheduler;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public RedisMessageListenerContainer initRedisContainer() {</span><br><span class=\"line\">    RedisMessageListenerContainer container = new RedisMessageListenerContainer();</span><br><span class=\"line\">    // Redis连接工厂</span><br><span class=\"line\">    container.setConnectionFactory(connectionFactory);</span><br><span class=\"line\">    // 设置运行任务池</span><br><span class=\"line\">    container.setTaskExecutor(taskScheduler);</span><br><span class=\"line\">    // 定义监听渠道，名称为topic1</span><br><span class=\"line\">    Topic topic = new ChannelTopic(&quot;topic1&quot;);</span><br><span class=\"line\">    // 使用监听器监听Redis的消息</span><br><span class=\"line\">    // redisMsgListener 是自定义的消息监听器</span><br><span class=\"line\">    container.addMessageListener(redisMsgListener, topic);</span><br><span class=\"line\">    return container;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>Redis使用Lua脚本</strong></p>\n<ul>\n<li>使用 DefaultRedisScript 创建脚本实例</li>\n<li>使用 redisTemplate.execute 方法执行脚本实例</li>\n</ul>\n<blockquote>\n<ul>\n<li>Redis 2.6 以后支持了 Lua</li>\n<li>脚本执行具备原子性</li>\n</ul>\n</blockquote>\n<p><strong>Redis缓存</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    type: REDIS</span><br><span class=\"line\">    cache-names: test</span><br><span class=\"line\">    redis:</span><br><span class=\"line\">      cache-null-values: true</span><br><span class=\"line\">#      key-prefix:</span><br><span class=\"line\">      time-to-live: 0ms</span><br><span class=\"line\">#      use-key-prefix: true</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>相关注解: <code>@EnableCaching</code>, <code>@CachePut</code>, <code>@Cacheable</code>, <code>@CacheEvict</code>.</li>\n</ul>\n<p><strong>MongoDB配置</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- mongodb --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  data:</span><br><span class=\"line\">    mongodb:</span><br><span class=\"line\">      database: test</span><br><span class=\"line\">      host: localhost</span><br><span class=\"line\">      port: 27017</span><br><span class=\"line\">      password: 123456</span><br><span class=\"line\">      username: 123456</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>使用 <code>@Document</code> <code>@Id</code> <code>@Field</code> 等定义POJO</p>\n</blockquote>\n<p><strong>MongoDB持久化接口</strong></p>\n<ul>\n<li>使用 <code>MongoTemplate</code> 进行</li>\n<li>使用 <code>MongoRepository</code> 进行， 需要单独使用 <code>@EnableMongoRepository</code> 注解</li>\n<li>基础方法不够用， 可以使用自定义查询注解 <code>@Query</code> 或者实现 <code>&lt;接口名&gt;Impl</code>（这种命名时约定方式，可以通过注解EnableMongoRepository修改配置） 类即可</li>\n<li>使用WebFlux可以改成 <code>ReactiveMongoRepository</code></li>\n</ul>\n<p><strong>异步调用</strong></p>\n<ul>\n<li>相关注解 <code>@EnableAsync</code> <code>@Async</code></li>\n<li>相关接口 <code>AsyncConfigurer</code></li>\n</ul>\n<p><strong>异步消息AMQ</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--依赖于starter，这样可以使用自动配置--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--依赖于连接池，这样就可以启用JMS连接池--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  jms:</span><br><span class=\"line\">    pub-sub-domain: true # 是否使用发布订阅模式，默认为false，即用的是点对点的模式</span><br><span class=\"line\">    template:</span><br><span class=\"line\">      default-destination: activemq.default.destination # 默认目的地址</span><br><span class=\"line\">  activemq:</span><br><span class=\"line\">    packages:</span><br><span class=\"line\">      trust-all: true # 信任所有包</span><br><span class=\"line\">    broker-url: tcp://localhost:61616 # ActiveMQ地址</span><br><span class=\"line\">    user: admin # 用户名</span><br><span class=\"line\">    password: admin # 密码</span><br><span class=\"line\">    pool:</span><br><span class=\"line\">      enabled: true # 是否启用连接池</span><br><span class=\"line\">      max-connections: 50 # 连接池最大连接数配置</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>通过 <code>@JmsListener</code> 进行配置监听消息</li>\n<li>直接使用 JmsTemplate 发送消息</li>\n</ul>\n<p><strong>使用AMQP（RabbitMQ）</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    host: localhost # RabbitMQ 服务器地址</span><br><span class=\"line\">    port: 5672 # RabbitMQ 端口</span><br><span class=\"line\">    username: admin # RabbitMQ 用户</span><br><span class=\"line\">    password: admin # RabbitMQ 密码</span><br><span class=\"line\">    publisher-confirms: true # 是否确认发送的消息已经被消费</span><br><span class=\"line\"></span><br><span class=\"line\"># 并非整体配置</span><br><span class=\"line\"># rabbitmq:</span><br><span class=\"line\">#   queue:</span><br><span class=\"line\">#    msg: spring-boot-queue-msg # RabbitMQ 的消息队列名称，由它发送字符串</span><br><span class=\"line\">#    user: spring-boot-queue-user # RabbitMQ 的消息队列名称，由它发送用户对象</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>使用 <code>RabbitTemplate</code> 进行发送消息操作</li>\n<li>使用 <code>@RabbitListener</code> 进行消息监听</li>\n</ul>\n<p><strong>定时任务</strong></p>\n<ul>\n<li>相关注解 <code>@Scheduled</code>（可以配合 <code>@Async</code> 使用） <code>@@EnableScheduling</code></li>\n</ul>\n<p><strong>WebSocket</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>需要自定义Bean <code>ServerEndpointExporter</code></li>\n<li>配置注解 <code>@ServerEndpoint</code> <code>@OnOpen</code> <code>@OnClose</code> <code>@OnMessage</code> <code>@OnError</code></li>\n</ul>\n<p><strong>STOMP</strong></p>\n<blockquote>\n<p>为了解决 webSocket 的兼容性问题</p>\n</blockquote>\n<ul>\n<li>使用注解 <code>@EnableWebSocketMessageBroker</code> 启动STOMP</li>\n<li>使用接口配置 <code>WebSocketMessageBrokerConfigurer</code></li>\n</ul>\n<p><strong>热部署</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  devtools:</span><br><span class=\"line\">    lovereload:</span><br><span class=\"line\">      enabled: true # 是否启用一个livereload.com 兼容的服务器</span><br><span class=\"line\">      port: 35729 # 端口livereload.com服务器端口</span><br><span class=\"line\">    restart:</span><br><span class=\"line\">      enabled: true # 是否启用自动重启功能</span><br><span class=\"line\">      additional-exclude: # 在原来的基础上新增不重启服务的文件夹目录</span><br><span class=\"line\">      additional-paths: # 在原来的基础上新增重启服务的文件夹目录</span><br><span class=\"line\">      exclude: META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # 不重启服务的文件夹配置</span><br><span class=\"line\">      poll-interval: 1000 # 设置对路径变化进行监测的时间间隔（以毫秒为单位）</span><br><span class=\"line\">      quiet-period: 400 # 在没有改变任何classpath的情况下，在重启被触发前的静默时长（以毫秒计）</span><br><span class=\"line\">      trigger-file: # 设置触发文件，当需要实际触发重启检查时，则需要修改这个文件</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>使用 shift+ctrl+alt+&quot;/&quot; （IDEA中的快捷键） 选择&quot;Registry&quot; 然后勾选 compiler.automake.allow.when.app.running</p>\n</blockquote>\n","hasMore":true,"tags":["SpringBoot"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【SpringBoot】不完整笔记\ntags:\n  - SpringBoot\ncategories: 技术笔记\ndate: 2020-04-25\nstatus: published\n\n---\n\n这个笔记不完整。\n\n<!-- more -->\n\n**@Transactional 事物隔离级别**\n\n- Atomic（原子性）\n- Consistency（一致性）\n- Isolation（隔离性）\n- Durability（持久性）\n\n**隔离级别**\n\n- 未提交读：允许一个事务读取另一个事物未提交的数据（可能引发脏读、不可重复读、幻读）\n- 读写提交：一个事物只能读取另外一个事物已经提交的数据，不能读取未提交的数据（可能引发不可重复读、幻读）\n- 可重复读：客服读写提交中的不可重复读现象（可能引发幻读）\n- 串行化：要求所有的SQL按照顺序执行，保证了数据的一致性\n\n**使用隔离级别**\n\n```java\n@Transactional(isolation = Isolation.SERIALIZABLE) // 串行化\npublic int insertUser(){\n    // ...\n}\n```\n\n**redis配置**\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n    <exclusions>\n        <!-- 不适用 lettuce 客户端 -->\n        <exclusion>\n            <groupId>io.lettuce</groupId>\n            <artifactId>lettuce-core</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<!-- 使用 jedis 客户端 -->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n</dependency>\n```\n\n- 使用 `jedis` 客户端需要自定义Bean `RedisConnectionFactory`\n- 为了查询 `redis` 显示字符串, 需要自定义Bean `RedisTemplate`, 并设置字符串序列化方式\n\n**RedisTemplate操作**\n\n```java\n@Autowired\nprivate ReidsTemplate rt;\n\n// 地理位置操作接口\nrt.opsForGeo();\n// 散列操作接口\nrt.opsForHash();\n// 基数操作接口\nrt.opsForHyperLogLog();\n// 列表操作接口\nrt.opsForList();\n// 集合操作接口\nrt.opsForSet();\n// 字符串操作接口\nrt.opsForValue();\n// 有序集合操作接口\nrt.opsForZSet();\n\n// ## 绑定操作 - 用于连续处理 key 键对应值\nrt.boundGeoOps(\"key\");\n// ... 其他方法不再赘述\n```\n\n**Redis事物操作**\n\n```java\nredisTemplate.opsForValue().set(\"key1\", \"value1\");\n\nList list = (List)redisTemplate.execute((RedisOperations operations) -> {\n    // 设置要监控key1\n    operations.watch(\"key1\");\n    // 开启事务，在exec命令执行前，全部都只是进入队列\n    operations.multi();\n    operations.opsForValue().set(\"key2\", \"value2\");\n    // operations.opsForValue().increment(\"key1\", 1);// ①\n    // 获取值将为null，因为redis只是把命令放入队列\n    Object value2 = operations.opsForValue().get(\"key2\");\n    System.out.println(\"命令在队列，所以value为null【\"+ value2 +\"】\");\n    operations.opsForValue().set(\"key3\", \"value3\");\n    Object value3 = operations.opsForValue().get(\"key3\");\n    System.out.println(\"命令在队列，所以value为null【\"+ value3 +\"】\");\n    // 执行exec命令，将先判别key1是否在监控后被修改过，如果是则不执行事务，否则就执行事务\n    return operations.exec();// ②\n});\nSystem.out.println(list);\n```\n\n**Redis流水线**\n\n```java\nLong start = System.currentTimeMillis();\nList list = (List)redisTemplate.executePipelined((RedisOperations operations) -> {\n    for (int i=1; i<=100000; i++) {\n        operations.opsForValue().set(\"pipeline_\" + i, \"value_\" + i);\n        String value = (String) operations.opsForValue().get(\"pipeline_\" + i);\n        if (i == 100000) {\n            System.out.println(\"命令只是进入队列，所以值为空【\" + value +\"】\");\n        }\n    }\n    return null;\n});\nLong end = System.currentTimeMillis();\nSystem.out.println(\"耗时：\" + (end - start) + \"毫秒。\");\n```\n\n**Redis发布订阅**\n\n- 实现 `MessageListener` 消息监听器\n- 创建Bean `RedisMessageListenerContainer`\n\n```java\n\n@Autowired\nprivate ThreadPoolTaskScheduler taskScheduler;\n@Autowired\nprivate RedisConnectionFactory connectionFactory;\n\n@Bean\npublic ThreadPoolTaskScheduler initTaskScheduler() {\n    ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();\n    taskScheduler.setPoolSize(20);\n    return taskScheduler;\n}\n\n@Bean\npublic RedisMessageListenerContainer initRedisContainer() {\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n    // Redis连接工厂\n    container.setConnectionFactory(connectionFactory);\n    // 设置运行任务池\n    container.setTaskExecutor(taskScheduler);\n    // 定义监听渠道，名称为topic1\n    Topic topic = new ChannelTopic(\"topic1\");\n    // 使用监听器监听Redis的消息\n    // redisMsgListener 是自定义的消息监听器\n    container.addMessageListener(redisMsgListener, topic);\n    return container;\n}\n```\n\n**Redis使用Lua脚本**\n\n- 使用 DefaultRedisScript 创建脚本实例\n- 使用 redisTemplate.execute 方法执行脚本实例\n\n> - Redis 2.6 以后支持了 Lua\n> - 脚本执行具备原子性\n\n**Redis缓存**\n\n```yaml\nspring:\n  cache:\n    type: REDIS\n    cache-names: test\n    redis:\n      cache-null-values: true\n#      key-prefix:\n      time-to-live: 0ms\n#      use-key-prefix: true\n```\n\n- 相关注解: `@EnableCaching`, `@CachePut`, `@Cacheable`, `@CacheEvict`.\n\n**MongoDB配置**\n\n```xml\n<!-- mongodb -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n```\n\n```yaml\nspring:\n  data:\n    mongodb:\n      database: test\n      host: localhost\n      port: 27017\n      password: 123456\n      username: 123456\n```\n\n> 使用 `@Document` `@Id` `@Field` 等定义POJO\n\n**MongoDB持久化接口**\n\n- 使用 `MongoTemplate` 进行\n- 使用 `MongoRepository` 进行， 需要单独使用 `@EnableMongoRepository` 注解\n- 基础方法不够用， 可以使用自定义查询注解 `@Query` 或者实现 `<接口名>Impl`（这种命名时约定方式，可以通过注解EnableMongoRepository修改配置） 类即可\n- 使用WebFlux可以改成 `ReactiveMongoRepository`\n\n**异步调用**\n\n- 相关注解 `@EnableAsync` `@Async`\n- 相关接口 `AsyncConfigurer`\n\n**异步消息AMQ**\n\n```xml\n<!--依赖于starter，这样可以使用自动配置-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-activemq</artifactId>\n</dependency>\n<!--依赖于连接池，这样就可以启用JMS连接池-->\n<dependency>\n    <groupId>org.apache.activemq</groupId>\n    <artifactId>activemq-pool</artifactId>\n</dependency>\n```\n\n```yaml\nspring:\n  jms:\n    pub-sub-domain: true # 是否使用发布订阅模式，默认为false，即用的是点对点的模式\n    template:\n      default-destination: activemq.default.destination # 默认目的地址\n  activemq:\n    packages:\n      trust-all: true # 信任所有包\n    broker-url: tcp://localhost:61616 # ActiveMQ地址\n    user: admin # 用户名\n    password: admin # 密码\n    pool:\n      enabled: true # 是否启用连接池\n      max-connections: 50 # 连接池最大连接数配置\n```\n\n- 通过 `@JmsListener` 进行配置监听消息\n- 直接使用 JmsTemplate 发送消息\n\n**使用AMQP（RabbitMQ）**\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n```yaml\nspring:\n  rabbitmq:\n    host: localhost # RabbitMQ 服务器地址\n    port: 5672 # RabbitMQ 端口\n    username: admin # RabbitMQ 用户\n    password: admin # RabbitMQ 密码\n    publisher-confirms: true # 是否确认发送的消息已经被消费\n\n# 并非整体配置\n# rabbitmq:\n#   queue:\n#    msg: spring-boot-queue-msg # RabbitMQ 的消息队列名称，由它发送字符串\n#    user: spring-boot-queue-user # RabbitMQ 的消息队列名称，由它发送用户对象\n```\n\n- 使用 `RabbitTemplate` 进行发送消息操作\n- 使用 `@RabbitListener` 进行消息监听\n\n**定时任务**\n\n- 相关注解 `@Scheduled`（可以配合 `@Async` 使用） `@@EnableScheduling`\n\n**WebSocket**\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-websocket</artifactId>\n</dependency>\n```\n\n- 需要自定义Bean `ServerEndpointExporter`\n- 配置注解 `@ServerEndpoint` `@OnOpen` `@OnClose` `@OnMessage` `@OnError`\n\n**STOMP**\n\n> 为了解决 webSocket 的兼容性问题\n\n- 使用注解 `@EnableWebSocketMessageBroker` 启动STOMP\n- 使用接口配置 `WebSocketMessageBrokerConfigurer`\n\n**热部署**\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n```yaml\nspring:\n  devtools:\n    lovereload:\n      enabled: true # 是否启用一个livereload.com 兼容的服务器\n      port: 35729 # 端口livereload.com服务器端口\n    restart:\n      enabled: true # 是否启用自动重启功能\n      additional-exclude: # 在原来的基础上新增不重启服务的文件夹目录\n      additional-paths: # 在原来的基础上新增重启服务的文件夹目录\n      exclude: META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # 不重启服务的文件夹配置\n      poll-interval: 1000 # 设置对路径变化进行监测的时间间隔（以毫秒为单位）\n      quiet-period: 400 # 在没有改变任何classpath的情况下，在重启被触发前的静默时长（以毫秒计）\n      trigger-file: # 设置触发文件，当需要实际触发重启检查时，则需要修改这个文件\n```\n\n> 使用 shift+ctrl+alt+\"/\" （IDEA中的快捷键） 选择\"Registry\" 然后勾选 compiler.automake.allow.when.app.running\n"},{"title":"创新的任务","excerpt":"<p>前三章读后感 - 用户目标达成理论是什么</p>\n","url":"/2020/04/24/读书笔记/创新的任务","fromDate":"2020-04-24","category":"读书笔记","text":"<p>前三章读后感 - 用户目标达成理论是什么</p>\n<!-- more -->\n<h2>前情</h2>\n<p>讲真心，读不下去。</p>\n<p>老婆天天在医院工作（过年都不放假），我这提心吊胆得几乎没办法思考了；孩子一边在身边转悠，一边用难以拒绝的表情央求，“爸爸，玩会吧！”。想想，玩会吧，这一玩半天过去了，忙着给孩子做饭，吃饭，收拾。一抬头，已经晚上了。哄孩子睡着之后，才有点时间，静下心来，想想我是不是害怕了，真的害怕了。</p>\n<p>当年SARS来的时候，自己还是个孩子，以为放假在家真的好，希望以后多几次这样的机会。现在看来，真的是妄言。现在人到中年才晓得，平静是多么难能可贵。</p>\n<p>书，总能让人平静下来。不管什么主题，只要脑子在转，心就平静下来了。而新闻，却会起到相反的作用，忍不住看看新闻，之前的平静全都没了。所以决定放下手机，清清心，每天在阳台看看书，陪儿子玩耍，心态慢慢放松了，这才有机会看看这本书。这类书有一个通病，要么不信，要么全信，因为成功学总有赌的成分，创新的任务本质也是教人怎么成功的。不信的人认为是在忽悠；相信的人，马上身体力行，觉得得道了。而我更倾向于不信。</p>\n<p>书中有句话，我非常认同写在最前面：“人们从创新成功的故事反推成功因素，就很容易自圆其说”。作者这么说，前三章却一直在自圆其说。</p>\n<p>在我看来，书中所描绘的用户目标达成理论就像是用“妻子”代替“媳妇”一样，对用户需求换一种诠释方式，而本质，是区分了两种人。一种人喜欢用“妻子”称呼另一半，而令一种人喜欢用“媳妇”称呼另一半，当然还有人喜欢用“老婆”称呼另一半。</p>\n<h2>创新的根本在人的思维，作者在贩卖思维</h2>\n<p>首先是颠覆性创新理论，我觉得换一个说辞可能大多数人更能接受，就是新旧更替。新的事物更能引起用户共鸣的情况下，当然选择新的商品。而企业之所以败在颠覆性创新，并不是他们看不到，一方面认为影响不会很大（轻视对手），另一方面是因为现实阻挠或者说超出企业能力，就像诺基亚，那个时候谁会想到，塞班系统会灭亡。这两方面都会让企业丧失先手，而先手最为致命。</p>\n<p>奶昔实例中，在我看来顾客的“任务”实际上就是用户需求。但是店员如果背弃场景，单纯问用户奶昔口感如何，我想这应该是店员的问题。这就像我前面说的喜欢用“妻子”称呼另一半的人。而作者使用用户目标达成理论去修饰这个创新问题，我想只是想让这些喜欢用“妻子”的人，慢慢的倾向于使用“媳妇”，但是作者却忽略了人本身的问题。</p>\n<p>我认为在任何创新活动中人的思维才是最终决定性的，就像这杯奶昔，一个喜欢用“妻子”的人，看了目标达成理论，也会想：“用户的任务会不会是想喝一杯更好喝的奶昔呢？”。</p>\n<p>作者有这样一句：</p>\n<blockquote>\n<p>你可能会问，如果用户目标达成理论真的那么强大，为什么使用这个理论的公司并不多？我们后面会解释，我们所谓的“用户目标”是非常具体、明确的，这不是泛指用户想要或需要的东西，也不是新的流行术语。找到并了解用户想要完成的任务，然后开发合适的产品或服务，这需要下一番功夫。</p>\n</blockquote>\n<p>实际需求，不正是非常具体、明确的么？更需要下很大一番功夫。但作者认为的用户需求是笼统的，不确定的。这在书中有阐述，作者之所以这么说是为了肯定“臆测和相关性提升到因果机制是很大的进步”，也就是作者阐述“病菌理论”的结论。这样就和作者的理论“不谋而合”，从不确定需求到有因有果的用户目标，对作者来说，这个应该说也算是一个升华。</p>\n<h2>推销用户思维</h2>\n<p>日本汽车制造业，用修复流程的方式修复产品，本身就是一种思维方式的创新。但是这个和用户目标本身应该没有什么关系。作者只是借此引出更深入的思考。</p>\n<p>用户目标达成理论实际上强制让人们以用户的思维思考问题，这个思维正是我们需要的用户需求。作者在文章中也说：“好的理论会教会我们如何思考”，就是这个道理。</p>\n<p><strong>用户目标</strong></p>\n<ul>\n<li>用户目标是某个人在特定的情境下所追求的进步。</li>\n<li>成功的创新可以让用户取得想要的进步，解决困难，而且实现未满足的愿望，取代之前有缺陷或不存在的解决方案。</li>\n<li>用户目标不只关乎功能，社会和情感层面的用户目标也很重要。有时，社会和情感层面的用户目标可能比功能层面的用户目标更强大。</li>\n<li>用户目标通常都在日常生活中出现，所以界定用户目标时，情境是核心，也是创新的关键，用户特质、产品属性、新技术或趋势等都不是创新的关键。</li>\n<li>用户目标会持续、反复发生，很少是独立“事件”。</li>\n</ul>\n<h2>多说点</h2>\n<p>开发管理上有一种方式是领域驱动开发，和这种方式不谋而合。但是重要的是，他需要一个行业专家，而这个专家也是我们欠缺的，与其让一个员工去挖掘，不如雇佣一个用户自己说。这个人一定是最终用户，而不是管理者。</p>\n<p>我们有足够的人力，却没有足够的判断力，决断力。作为开发来说，做了很多和产品无关、最终无果的事情。</p>\n<p>从软件结构上说，我们真的缺少一位架构师，我的意思并不是雇佣外界的架构师，而是内部晋升的架构师。区别就在，感情。</p>\n<p>最后，企业创新，实际上是思维创新，有不同的思维的人很多，企业要做的是如何筛选并且让这些思维落地有声，这恰恰是很多组织做不到的。离开人，谈创新都是耍流氓。用户目标导向，本身重视了用户，却忘记了主动力在员工这件事，即便有用户至上的教条，不同的人去执行也是不一样的。</p>\n<h2>引用</h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/49835372\">诺基亚的兴衰史</a></p>\n","hasMore":true,"tags":["创新","可维护"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 创新的任务\ntags:\n - 创新\n - 可维护\ncategories: 读书笔记\ndate: 2020-04-24\nstatus: published\n\n---\n\n前三章读后感 - 用户目标达成理论是什么\n\n<!-- more -->\n\n## 前情\n\n讲真心，读不下去。\n\n老婆天天在医院工作（过年都不放假），我这提心吊胆得几乎没办法思考了；孩子一边在身边转悠，一边用难以拒绝的表情央求，“爸爸，玩会吧！”。想想，玩会吧，这一玩半天过去了，忙着给孩子做饭，吃饭，收拾。一抬头，已经晚上了。哄孩子睡着之后，才有点时间，静下心来，想想我是不是害怕了，真的害怕了。\n\n当年SARS来的时候，自己还是个孩子，以为放假在家真的好，希望以后多几次这样的机会。现在看来，真的是妄言。现在人到中年才晓得，平静是多么难能可贵。\n\n书，总能让人平静下来。不管什么主题，只要脑子在转，心就平静下来了。而新闻，却会起到相反的作用，忍不住看看新闻，之前的平静全都没了。所以决定放下手机，清清心，每天在阳台看看书，陪儿子玩耍，心态慢慢放松了，这才有机会看看这本书。这类书有一个通病，要么不信，要么全信，因为成功学总有赌的成分，创新的任务本质也是教人怎么成功的。不信的人认为是在忽悠；相信的人，马上身体力行，觉得得道了。而我更倾向于不信。\n\n书中有句话，我非常认同写在最前面：“人们从创新成功的故事反推成功因素，就很容易自圆其说”。作者这么说，前三章却一直在自圆其说。\n\n在我看来，书中所描绘的用户目标达成理论就像是用“妻子”代替“媳妇”一样，对用户需求换一种诠释方式，而本质，是区分了两种人。一种人喜欢用“妻子”称呼另一半，而令一种人喜欢用“媳妇”称呼另一半，当然还有人喜欢用“老婆”称呼另一半。\n\n## 创新的根本在人的思维，作者在贩卖思维\n\n首先是颠覆性创新理论，我觉得换一个说辞可能大多数人更能接受，就是新旧更替。新的事物更能引起用户共鸣的情况下，当然选择新的商品。而企业之所以败在颠覆性创新，并不是他们看不到，一方面认为影响不会很大（轻视对手），另一方面是因为现实阻挠或者说超出企业能力，就像诺基亚，那个时候谁会想到，塞班系统会灭亡。这两方面都会让企业丧失先手，而先手最为致命。\n\n奶昔实例中，在我看来顾客的“任务”实际上就是用户需求。但是店员如果背弃场景，单纯问用户奶昔口感如何，我想这应该是店员的问题。这就像我前面说的喜欢用“妻子”称呼另一半的人。而作者使用用户目标达成理论去修饰这个创新问题，我想只是想让这些喜欢用“妻子”的人，慢慢的倾向于使用“媳妇”，但是作者却忽略了人本身的问题。\n\n我认为在任何创新活动中人的思维才是最终决定性的，就像这杯奶昔，一个喜欢用“妻子”的人，看了目标达成理论，也会想：“用户的任务会不会是想喝一杯更好喝的奶昔呢？”。\n\n作者有这样一句：\n\n> 你可能会问，如果用户目标达成理论真的那么强大，为什么使用这个理论的公司并不多？我们后面会解释，我们所谓的“用户目标”是非常具体、明确的，这不是泛指用户想要或需要的东西，也不是新的流行术语。找到并了解用户想要完成的任务，然后开发合适的产品或服务，这需要下一番功夫。\n\n实际需求，不正是非常具体、明确的么？更需要下很大一番功夫。但作者认为的用户需求是笼统的，不确定的。这在书中有阐述，作者之所以这么说是为了肯定“臆测和相关性提升到因果机制是很大的进步”，也就是作者阐述“病菌理论”的结论。这样就和作者的理论“不谋而合”，从不确定需求到有因有果的用户目标，对作者来说，这个应该说也算是一个升华。\n\n## 推销用户思维\n\n日本汽车制造业，用修复流程的方式修复产品，本身就是一种思维方式的创新。但是这个和用户目标本身应该没有什么关系。作者只是借此引出更深入的思考。\n\n用户目标达成理论实际上强制让人们以用户的思维思考问题，这个思维正是我们需要的用户需求。作者在文章中也说：“好的理论会教会我们如何思考”，就是这个道理。\n\n**用户目标**\n\n* 用户目标是某个人在特定的情境下所追求的进步。\n* 成功的创新可以让用户取得想要的进步，解决困难，而且实现未满足的愿望，取代之前有缺陷或不存在的解决方案。\n* 用户目标不只关乎功能，社会和情感层面的用户目标也很重要。有时，社会和情感层面的用户目标可能比功能层面的用户目标更强大。\n* 用户目标通常都在日常生活中出现，所以界定用户目标时，情境是核心，也是创新的关键，用户特质、产品属性、新技术或趋势等都不是创新的关键。\n* 用户目标会持续、反复发生，很少是独立“事件”。\n\n## 多说点\n\n开发管理上有一种方式是领域驱动开发，和这种方式不谋而合。但是重要的是，他需要一个行业专家，而这个专家也是我们欠缺的，与其让一个员工去挖掘，不如雇佣一个用户自己说。这个人一定是最终用户，而不是管理者。\n\n我们有足够的人力，却没有足够的判断力，决断力。作为开发来说，做了很多和产品无关、最终无果的事情。\n\n从软件结构上说，我们真的缺少一位架构师，我的意思并不是雇佣外界的架构师，而是内部晋升的架构师。区别就在，感情。\n\n最后，企业创新，实际上是思维创新，有不同的思维的人很多，企业要做的是如何筛选并且让这些思维落地有声，这恰恰是很多组织做不到的。离开人，谈创新都是耍流氓。用户目标导向，本身重视了用户，却忘记了主动力在员工这件事，即便有用户至上的教条，不同的人去执行也是不一样的。\n\n## 引用\n\n[诺基亚的兴衰史](https://zhuanlan.zhihu.com/p/49835372)\n"},{"title":"代码不朽 - 编写可维护软件的十大要则","excerpt":"<blockquote>\n<p>可维护性是软件质量的一个特征，而性能是另一个特征。</p>\n</blockquote>\n","url":"/2020/04/23/读书笔记/代码不朽 - 编写可维护软件的十大要则","fromDate":"2020-04-23","category":"读书笔记","text":"<blockquote>\n<p>可维护性是软件质量的一个特征，而性能是另一个特征。</p>\n</blockquote>\n<!-- more -->\n<h2>软件维护的四种方式</h2>\n<ul>\n<li>发现并修复 <code>bug</code> - 纠正性维护</li>\n<li>系统需要去适应操作环境而改变 - 适应性维护</li>\n<li>系统用户有新的需求或者对之前的需求有变化 - 完善性维护</li>\n<li>确定可以改进质量或者预防将来可能产生的 <code>bug</code> 的方法 - 预防性维护</li>\n</ul>\n<h2>可维护性的原则描述</h2>\n<ul>\n<li>编写短小的代码单元</li>\n<li>编写简单的代码单元</li>\n<li>不写重复代码</li>\n<li>保持代码单元的接口简单</li>\n<li>分离模块之间的关注点</li>\n<li>架构组建松耦合</li>\n<li>保持架构组件之间的平衡</li>\n<li>保持小规模代码库</li>\n<li>自动化开发部署和测试</li>\n<li>编写简洁的代码</li>\n</ul>\n<h2>博主语</h2>\n<ul>\n<li>软件维护的方式中，用户新需求和之前需求的变化应该是分离的，这样对可维护性也算是有一定的贡献。</li>\n<li>另外作者分而治之的思想和如今流行的微服务不谋而合，但是细分导致管理成本增加也是其中一大问题。</li>\n<li>对于单独模块的可维护性而言，可能管理并不那么凸显，所以作者更偏向于可维护而非可控制性。而控制性，目前来说最好的方式就是自动化。</li>\n</ul>\n","hasMore":true,"tags":["代码","可维护","原则"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 代码不朽 - 编写可维护软件的十大要则\ntags:\n - 代码\n - 可维护\n - 原则\ncategories: 读书笔记\ndate: 2020-04-23\nstatus: published\n\n---\n\n> 可维护性是软件质量的一个特征，而性能是另一个特征。\n\n<!-- more -->\n\n## 软件维护的四种方式\n\n* 发现并修复 `bug` - 纠正性维护\n* 系统需要去适应操作环境而改变 - 适应性维护\n* 系统用户有新的需求或者对之前的需求有变化 - 完善性维护\n* 确定可以改进质量或者预防将来可能产生的 `bug` 的方法 - 预防性维护\n\n## 可维护性的原则描述\n\n* 编写短小的代码单元\n* 编写简单的代码单元\n* 不写重复代码\n* 保持代码单元的接口简单\n* 分离模块之间的关注点\n* 架构组建松耦合\n* 保持架构组件之间的平衡\n* 保持小规模代码库\n* 自动化开发部署和测试\n* 编写简洁的代码\n\n## 博主语\n\n- 软件维护的方式中，用户新需求和之前需求的变化应该是分离的，这样对可维护性也算是有一定的贡献。\n- 另外作者分而治之的思想和如今流行的微服务不谋而合，但是细分导致管理成本增加也是其中一大问题。\n- 对于单独模块的可维护性而言，可能管理并不那么凸显，所以作者更偏向于可维护而非可控制性。而控制性，目前来说最好的方式就是自动化。\n"},{"title":"【Spring】SpringCloud不完整总结","excerpt":"<p>本文不完整介绍 <code>SpringCloud</code> 最小化可用解决方案。</p>\n","url":"/2020/04/20/技术笔记/【Spring】SpringCloud不完整总结","fromDate":"2020-04-20","category":"技术笔记","text":"<p>本文不完整介绍 <code>SpringCloud</code> 最小化可用解决方案。</p>\n<!-- more -->\n<h2>概述</h2>\n<p>从 <code>Spring</code> 官网来看 <code>Cloud</code>，<strong>最小化的微服务配置应该有:</strong></p>\n<ul>\n<li>服务注册中心</li>\n<li>服务配置中心</li>\n<li>服务网关</li>\n<li>授权服务</li>\n<li>对应服务的管理服务（服务管理、配置管理、授权管理、网关管理）</li>\n</ul>\n<p><strong>隐含的技术</strong></p>\n<ul>\n<li>动态路由</li>\n<li>负载均衡</li>\n<li>熔断</li>\n<li>断路</li>\n<li>灰度发布</li>\n<li>权重</li>\n<li>限流</li>\n<li>降级</li>\n<li>隔离</li>\n<li>监控</li>\n<li>追踪</li>\n<li>Oauth2</li>\n<li>JWT</li>\n<li>缓存</li>\n</ul>\n<p><strong>深入一些，了解更多的替代方案</strong></p>\n<ul>\n<li>服务注册中心方案（Eureka、Consul、ZooKeeper）</li>\n<li>配置中心（本地存储、基于GIT仓库、基于关系数据库）</li>\n<li>服务网关（基于配置中心、基于关系数据库）</li>\n<li>授权服务（Security、Oauth2\\DB Token、Oauth2\\Java Web Token）</li>\n<li>监控（链路监控、服务监控）（Skywalking全链路监控、使用logback记录信息、当然也可以使用header记录traceId、Hystrix、Turbine）</li>\n<li>缓存机制（（caffe（本地）、redis、mongodb））</li>\n<li>当然还有 SpringCloud Alibaba 提供的整体解决方案</li>\n<li><em>管理服务不是本文重点但是确实实践重点</em></li>\n</ul>\n<p><strong>最具代表性的最小化方案</strong></p>\n<ul>\n<li>Eureka</li>\n<li>Config + HSQLDB</li>\n<li>Gateway + HSQLDB（动态路由配置）</li>\n<li>Oauth2 + JWT + HSQLDB</li>\n</ul>\n<blockquote>\n<p>为什么用 <code>HSQLDB</code>？<br>\n可以在内存创建一个数据库，独立使用而且速度很好，语法健全，我一般本地测试都用这个。仅代表关系型数据库的典型。</p>\n</blockquote>\n<p>我相信最好的学习方式就是从单元开始，单元就是不可再分的最小方案，透过最小方案的实现，在需要时定制需要的内容才是这类应用正确的打开方式。</p>\n<h2>Actuator</h2>\n<p>从监控开始，一个软件最重要的部分就是监控。所以不管是哪个应用在开发期间我都会增加这个依赖，目的就是暴露监控端点使程序状态可控。<code>Actuator</code> 可用端点可以从<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints\">这里</a>查看，下面是 <code>maven</code> 依赖：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>以及配置</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management:</span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      exposure:</span><br><span class=\"line\">        include: '*' # 暴露所有端点</span><br></pre></td></tr></tbody></table></figure>\n<h2>Eureka</h2>\n<p>服务注册中心，分为服务端和客户端两部分，服务端用于部署服务，使用 <code>@EnableEurekaServer</code> 注解启动，下面是依赖：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p>客户端用于注册服务，使用 <code>@EnableDiscoveryClient</code> 注解启动，下面是依赖：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>注册中心参考配置</strong></p>\n<p><em>更复杂的配置可以看<a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#zones\">官方文档</a>，支持 <code>region</code> 和 <code>zones</code></em></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br><span class=\"line\"></span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">    preferIpAddress: true</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    registerWithEureka: false</span><br><span class=\"line\">    fetchRegistry: false</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    peer-eureka-nodes-update-interval-ms: 10000 # 默认是10分钟即600000，这里为了验证改为10秒</span><br><span class=\"line\">    waitTimeInMsWhenSyncEmpty: 0</span><br><span class=\"line\">    enableSelfPreservation: false # 保护注册信息，独立运行时可以关闭</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>服务实例信息一致性</strong></p>\n<blockquote>\n<p>CAP理论：</p>\n<ul>\n<li>Consistency: 数据一致性</li>\n<li>Availability： 可用性</li>\n<li>Partition Tolerance： 分区容忍性</li>\n</ul>\n</blockquote>\n<p><code>Eureka</code> 是 AP 的，认为保留过期数据比丢失可用数据好。这种情况下就需要客户端支持负载均衡（Ribbon）和熔断（Hystrix），避免服务无响应。很多情况下，负载均衡会在Feign、Gateway中被隐含使用，并不需要显示的配置依赖。</p>\n<h2>Config</h2>\n<p>服务配置中心，有服务端和客户端两部分，服务端使用 <code>@EnableConfigServer</code> 注解配置，并添加maven依赖：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p>因为顺序的原因，客户端启动配置需要在 <code>bootstrap.yml</code> 中写：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      label: master</span><br><span class=\"line\">      uri: http://localhost:9090 # 如果使用了 注册中心 不需要配置这一条 当然注册中心也需要在这里配置</span><br><span class=\"line\">      name: server-config</span><br><span class=\"line\">      profile: dev</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>客户端maven依赖</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-cloud-config-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>配置服务端支持数据库</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8888</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: server-config</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: jdbc # 这里使用jdbc 减少操作</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    url: jdbc:hsqldb:hsql://localhost/config</span><br><span class=\"line\">    username: sa</span><br><span class=\"line\">    password:</span><br><span class=\"line\">    driver-class-name: org.hsqldb.jdbc.JDBCDriver</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        jdbc:</span><br><span class=\"line\">          sql: select key,value from CONFIG_PROPERTIES where application=? and profile=? and label=?</span><br></pre></td></tr></tbody></table></figure>\n<h2>Gateway</h2>\n<p>网关服务，想要使用关系数据库存储路由配置，实现 <code>RouteDefinitionRepository</code> 接口即可。动态路由管理的API，在Actuator中已经有相映的端点实现。</p>\n<p>网关服务的配置不多，但是有一个趁手的工具进行配置还是很必要的，我基于网关端点服务开发了一个节点编辑器，用于配置路由，需要的自取。</p>\n<ul>\n<li>链接：<code>https://pan.baidu.com/s/1QDoVxq8Mgr56GdoIHKB4dA</code></li>\n<li>提取码： <code>ygku</code></li>\n</ul>\n<h2>Oauth2</h2>\n<p>权限控制中讲Oauth2的其实很多，我个人也比较倾向于使用Oauth2，Oauth2其他都好说，单说说别人那没有说明白的，就是这个权限本身，在Oauth2的定义中，本来对权限也没有非常严格的划分，所以这个时候就是仁者见仁智者见智了。</p>\n<p>客户端权限管理中最重要的<strong>关键词</strong></p>\n<ul>\n<li>ResourceId 指代服务资源</li>\n<li>Scope 指代用户资源访问权限</li>\n<li>Authoritiy 指代权限</li>\n</ul>\n<p><strong>嫁接权限体系</strong>，我使用的是比较常用的系统中的权限体系（用户、安全组/角色、权限）</p>\n<ul>\n<li>用户：权限来自绑定客户端</li>\n<li>安全组/角色：对应存储位置 Authoritiy</li>\n<li>权限：对应存储位置 Authoritiy</li>\n<li>客户端：来自Oauth2中的定义，存储着与三个权限关键字之间的关系。</li>\n</ul>\n<h2>备忘</h2>\n<p><strong>Feign</strong></p>\n<p>服务间通信，用于取代直接使用URLConnection、HttpClient、Netty、RestTemplate等直接访问接口。Feign可以使用Spring注解、负载均衡、熔断机制等，使用更加方便。最重要的时它能通过简单的配置自由选择底层的实现。相关配置可以看<a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.2.2.RELEASE/reference/html/appendix.html\">官方文档</a>，下面是它的 maven 依赖：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>Ribbon负载均衡策略</strong></p>\n<ul>\n<li>RandomRule</li>\n<li>RoundRobinRule</li>\n<li>RetryRule</li>\n<li>BestAvaliableRule</li>\n<li>AvailablilityFilteringRule</li>\n<li>ResponseTimeWeightedRule</li>\n<li>ZoneAvoidanceRule</li>\n</ul>\n<p><strong>断路器和熔断区别</strong></p>\n<p>断路器是主动中断，熔断是被动中断。</p>\n<p><strong>Consul</strong></p>\n<p>Eureka 的替代方案，仅需要配置一下就可以简单使用，更多配置请查看<a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-consul/2.2.2.RELEASE/reference/html/appendix.html\">官方文档</a>。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    consul:</span><br><span class=\"line\">      host: localhost</span><br><span class=\"line\">      port: 8500</span><br></pre></td></tr></tbody></table></figure>\n<h2>其他</h2>\n<ul>\n<li>Skywalking 非侵入式的全链路跟踪，在最小化系统中并不是必须的，暂时就忽略了，但实际应用场景中全链路追踪，我更倾向于使用Skywalking。</li>\n<li>gRPC 可选择 HTTP2 替代。</li>\n<li>SpringCloudAlibaba 持续关注，如果使用阿里系应用服务，我觉得这个还是有必要用的，其他情况按需。</li>\n</ul>\n<h2>最后</h2>\n<p>当然微服务开发远不止最小化解决方案，但这完全可以是一个开端。不仅仅开发，自动化运维甚至机器学习，将来也是有必要的。学无止境，经验越多，越觉得自己无知，伴随着“无知”带来的危机感才是最可怕的。送君一句：衷于栖，即是吾名，亦是吾志，共勉之。</p>\n","hasMore":true,"tags":["Spring Cloud"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【Spring】SpringCloud不完整总结\ntags:\n  - Spring Cloud\ncategories: 技术笔记\ndate: 2020-04-20\nstatus: published\n\n---\n\n本文不完整介绍 `SpringCloud` 最小化可用解决方案。\n\n<!-- more -->\n\n## 概述\n\n从 `Spring` 官网来看 `Cloud`，**最小化的微服务配置应该有:**\n\n- 服务注册中心\n- 服务配置中心\n- 服务网关\n- 授权服务\n- 对应服务的管理服务（服务管理、配置管理、授权管理、网关管理）\n\n**隐含的技术**\n\n- 动态路由\n- 负载均衡\n- 熔断\n- 断路\n- 灰度发布\n- 权重\n- 限流\n- 降级\n- 隔离\n- 监控\n- 追踪\n- Oauth2\n- JWT\n- 缓存\n\n**深入一些，了解更多的替代方案**\n\n- 服务注册中心方案（Eureka、Consul、ZooKeeper）\n- 配置中心（本地存储、基于GIT仓库、基于关系数据库）\n- 服务网关（基于配置中心、基于关系数据库）\n- 授权服务（Security、Oauth2\\DB Token、Oauth2\\Java Web Token）\n- 监控（链路监控、服务监控）（Skywalking全链路监控、使用logback记录信息、当然也可以使用header记录traceId、Hystrix、Turbine）\n- 缓存机制（（caffe（本地）、redis、mongodb））\n- 当然还有 SpringCloud Alibaba 提供的整体解决方案\n- *管理服务不是本文重点但是确实实践重点*\n\n**最具代表性的最小化方案**\n\n- Eureka\n- Config + HSQLDB\n- Gateway + HSQLDB（动态路由配置）\n- Oauth2 + JWT + HSQLDB\n\n> 为什么用 `HSQLDB`？<br>\n> 可以在内存创建一个数据库，独立使用而且速度很好，语法健全，我一般本地测试都用这个。仅代表关系型数据库的典型。\n\n我相信最好的学习方式就是从单元开始，单元就是不可再分的最小方案，透过最小方案的实现，在需要时定制需要的内容才是这类应用正确的打开方式。\n\n## Actuator\n\n从监控开始，一个软件最重要的部分就是监控。所以不管是哪个应用在开发期间我都会增加这个依赖，目的就是暴露监控端点使程序状态可控。`Actuator` 可用端点可以从[这里](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints)查看，下面是 `maven` 依赖：\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n**以及配置**\n\n```yaml\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: '*' # 暴露所有端点\n```\n\n## Eureka\n\n服务注册中心，分为服务端和客户端两部分，服务端用于部署服务，使用 `@EnableEurekaServer` 注解启动，下面是依赖：\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n```\n\n客户端用于注册服务，使用 `@EnableDiscoveryClient` 注解启动，下面是依赖：\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n**注册中心参考配置**\n\n*更复杂的配置可以看[官方文档](https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#zones)，支持 `region` 和 `zones`*\n\n```yaml\nserver:\n  port: 8080\n\neureka:\n  instance:\n    hostname: localhost\n    preferIpAddress: true\n  client:\n    registerWithEureka: false\n    fetchRegistry: false\n    serviceUrl:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n  server:\n    peer-eureka-nodes-update-interval-ms: 10000 # 默认是10分钟即600000，这里为了验证改为10秒\n    waitTimeInMsWhenSyncEmpty: 0\n    enableSelfPreservation: false # 保护注册信息，独立运行时可以关闭\n```\n\n**服务实例信息一致性**\n\n> CAP理论：\n> - Consistency: 数据一致性\n> - Availability： 可用性\n> - Partition Tolerance： 分区容忍性\n\n`Eureka` 是 AP 的，认为保留过期数据比丢失可用数据好。这种情况下就需要客户端支持负载均衡（Ribbon）和熔断（Hystrix），避免服务无响应。很多情况下，负载均衡会在Feign、Gateway中被隐含使用，并不需要显示的配置依赖。\n\n## Config\n\n服务配置中心，有服务端和客户端两部分，服务端使用 `@EnableConfigServer` 注解配置，并添加maven依赖：\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-config-server</artifactId>\n</dependency>\n```\n\n因为顺序的原因，客户端启动配置需要在 `bootstrap.yml` 中写：\n\n```yaml\nspring:\n  cloud:\n    config:\n      label: master\n      uri: http://localhost:9090 # 如果使用了 注册中心 不需要配置这一条 当然注册中心也需要在这里配置\n      name: server-config\n      profile: dev\n```\n\n**客户端maven依赖**\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-config-client</artifactId>\n</dependency>\n```\n\n**配置服务端支持数据库**\n\n```yaml\nserver:\n  port: 8888\nspring:\n  application:\n    name: server-config\n  profiles:\n    active: jdbc # 这里使用jdbc 减少操作\n  datasource:\n    url: jdbc:hsqldb:hsql://localhost/config\n    username: sa\n    password:\n    driver-class-name: org.hsqldb.jdbc.JDBCDriver\n  cloud:\n    config:\n      server:\n        jdbc:\n          sql: select key,value from CONFIG_PROPERTIES where application=? and profile=? and label=?\n```\n\n## Gateway\n\n网关服务，想要使用关系数据库存储路由配置，实现 `RouteDefinitionRepository` 接口即可。动态路由管理的API，在Actuator中已经有相映的端点实现。\n\n网关服务的配置不多，但是有一个趁手的工具进行配置还是很必要的，我基于网关端点服务开发了一个节点编辑器，用于配置路由，需要的自取。\n\n- 链接：`https://pan.baidu.com/s/1QDoVxq8Mgr56GdoIHKB4dA` \n- 提取码： `ygku` \n\n## Oauth2\n\n权限控制中讲Oauth2的其实很多，我个人也比较倾向于使用Oauth2，Oauth2其他都好说，单说说别人那没有说明白的，就是这个权限本身，在Oauth2的定义中，本来对权限也没有非常严格的划分，所以这个时候就是仁者见仁智者见智了。\n\n客户端权限管理中最重要的**关键词**\n\n- ResourceId 指代服务资源\n- Scope 指代用户资源访问权限\n- Authoritiy 指代权限\n\n**嫁接权限体系**，我使用的是比较常用的系统中的权限体系（用户、安全组/角色、权限）\n\n- 用户：权限来自绑定客户端\n- 安全组/角色：对应存储位置 Authoritiy\n- 权限：对应存储位置 Authoritiy\n- 客户端：来自Oauth2中的定义，存储着与三个权限关键字之间的关系。\n\n## 备忘\n\n**Feign**\n\n服务间通信，用于取代直接使用URLConnection、HttpClient、Netty、RestTemplate等直接访问接口。Feign可以使用Spring注解、负载均衡、熔断机制等，使用更加方便。最重要的时它能通过简单的配置自由选择底层的实现。相关配置可以看[官方文档](https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.2.2.RELEASE/reference/html/appendix.html)，下面是它的 maven 依赖：\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```\n\n**Ribbon负载均衡策略**\n\n- RandomRule\n- RoundRobinRule\n- RetryRule\n- BestAvaliableRule\n- AvailablilityFilteringRule\n- ResponseTimeWeightedRule\n- ZoneAvoidanceRule\n\n**断路器和熔断区别**\n\n断路器是主动中断，熔断是被动中断。\n\n**Consul**\n\nEureka 的替代方案，仅需要配置一下就可以简单使用，更多配置请查看[官方文档](https://cloud.spring.io/spring-cloud-static/spring-cloud-consul/2.2.2.RELEASE/reference/html/appendix.html)。\n\n```yaml\nspring:\n  cloud:\n    consul:\n      host: localhost\n      port: 8500\n```\n\n## 其他\n\n- Skywalking 非侵入式的全链路跟踪，在最小化系统中并不是必须的，暂时就忽略了，但实际应用场景中全链路追踪，我更倾向于使用Skywalking。\n- gRPC 可选择 HTTP2 替代。\n- SpringCloudAlibaba 持续关注，如果使用阿里系应用服务，我觉得这个还是有必要用的，其他情况按需。\n\n## 最后\n\n当然微服务开发远不止最小化解决方案，但这完全可以是一个开端。不仅仅开发，自动化运维甚至机器学习，将来也是有必要的。学无止境，经验越多，越觉得自己无知，伴随着“无知”带来的危机感才是最可怕的。送君一句：衷于栖，即是吾名，亦是吾志，共勉之。\n"},{"title":"【Spring】使用 ANT 构建 Spring Boot 工程","excerpt":"<blockquote>\n<p>这件事可做，但是做的时候有点无奈而已。</p>\n</blockquote>\n","url":"/2020/04/19/技术笔记/【Spring】使用 ANT 构建 Spring Boot 工程","fromDate":"2020-04-19","category":"技术笔记","text":"<blockquote>\n<p>这件事可做，但是做的时候有点无奈而已。</p>\n</blockquote>\n<!-- more -->\n<p>我知道你一定会说，用 <code>maven</code> 就行了为什么还要用 <code>ant</code>，变态......不巧的是，某银行就有这方面的要求。所以还是回忆了一下这个技术。</p>\n<p>首先原来的项目是基于 <code>maven</code> 的，所以第一步就是下载依赖，然后是打包成 <code>spring</code> 的 <code>jar</code> 包。</p>\n<p>需要两个额外的 <code>jar</code> 包，放在 <code>bin</code> 目录下：</p>\n<ul>\n<li><code>maven-ant-tasks-2.1.3.jar</code></li>\n<li><code>spring-boot-antlib-2.0.5.RELEASE.jar</code></li>\n</ul>\n<p><code>ant</code> 使用 <code>build</code> 作为输出的目录结构，区别于 <code>target</code>。</p>\n<p>下面是 <code>build.xml</code> 配置：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns:artifact=&quot;antlib:org.apache.maven.artifact.ant&quot;</span><br><span class=\"line\">         xmlns:spring-boot=&quot;antlib:org.springframework.boot.ant&quot;</span><br><span class=\"line\">         name=&quot;projectName&quot; default=&quot;default&quot; basedir=&quot;bin&quot;&gt;</span><br><span class=\"line\">    &lt;description&gt;Builds, tests, and runs the project dsolrcloud.&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置开发环境 --&gt;</span><br><span class=\"line\">    &lt;property environment=&quot;env&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;property name=&quot;spring-boot.version&quot; value=&quot;2.0.5.RELEASE&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;property name=&quot;version&quot; value=&quot;1.0&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;project&quot; value=&quot;projectName&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;package&quot; value=&quot;projectName&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;domain&quot; value=&quot;com.zhoyq&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 项目源代码目录 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;src.dir&quot; location=&quot;${user.dir}/src/main/java&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- javac编译后生成的class文件路径 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;build.dir&quot; location=&quot;${user.dir}/build/classes&quot; /&gt;</span><br><span class=\"line\">    &lt;!-- 最终生成jar包的路径 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;dist.dir&quot; location=&quot;${user.dir}/build/dist&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 项目配置文件路径 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;config.dir&quot; location=&quot;${user.dir}/src/main/resources&quot; /&gt;</span><br><span class=\"line\">    &lt;!-- 项目生成JavaDoc文件路径  --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;doc.dir&quot; location=&quot;${user.dir}/build/doc&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- maven-ant-tasks 下载maven依赖jar包的存放路径  --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;lib.dir&quot; location=&quot;${user.dir}/build/dependency&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;path id=&quot;classpath&quot;&gt;</span><br><span class=\"line\">        &lt;fileset dir=&quot;${lib.dir}&quot; includes=&quot;**/*.jar&quot;/&gt;</span><br><span class=\"line\">    &lt;/path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;target name=&quot;clean&quot; description=&quot;清理ant编译文件&quot;&gt;</span><br><span class=\"line\">        &lt;delete dir=&quot;${user.dir}/build&quot; /&gt;</span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;target name=&quot;mkdir&quot; description=&quot;建立文件夹&quot;&gt;</span><br><span class=\"line\">        &lt;mkdir dir=&quot;${dist.dir}&quot;/&gt;</span><br><span class=\"line\">        &lt;mkdir dir=&quot;${build.dir}&quot;/&gt;</span><br><span class=\"line\">        &lt;mkdir dir=&quot;${lib.dir}&quot;/&gt;</span><br><span class=\"line\">        &lt;mkdir dir=&quot;${doc.dir}&quot;/&gt; </span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;target name=&quot;dependency&quot; depends=&quot;mkdir&quot; description=&quot;配置ant自动下载maven的依赖包&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 下载maven依赖--&gt;</span><br><span class=\"line\">        &lt;path id=&quot;maven-ant-tasks.classpath&quot; path=&quot;${user.dir}/bin/maven-ant-tasks-2.1.3.jar&quot; /&gt;</span><br><span class=\"line\">        &lt;typedef resource=&quot;org/apache/maven/artifact/ant/antlib.xml&quot;</span><br><span class=\"line\">                 uri=&quot;antlib:org.apache.maven.artifact.ant&quot;</span><br><span class=\"line\">                 classpathref=&quot;maven-ant-tasks.classpath&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;artifact:dependencies filesetId=&quot;mavenlib&quot; pathId=&quot;mavenclasspath&quot; useScope=&quot;runtime&quot;&gt;</span><br><span class=\"line\">            &lt;pom file=&quot;${user.dir}/pom.xml&quot; /&gt;</span><br><span class=\"line\">        &lt;/artifact:dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;copy todir=&quot;${lib.dir}&quot;&gt;</span><br><span class=\"line\">            &lt;fileset refid=&quot;mavenlib&quot; /&gt;</span><br><span class=\"line\">            &lt;mapper type=&quot;flatten&quot; /&gt;</span><br><span class=\"line\">        &lt;/copy&gt;</span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;target name=&quot;compile&quot; depends=&quot;dependency&quot; description=&quot;编译代码&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 编译所有的Java代码 --&gt;</span><br><span class=\"line\">        &lt;javac srcdir=&quot;${src.dir}&quot;</span><br><span class=\"line\">               destdir=&quot;${build.dir}&quot;</span><br><span class=\"line\">               encoding=&quot;UTF-8&quot;</span><br><span class=\"line\">               includeantruntime=&quot;no&quot;</span><br><span class=\"line\">               excludes=&quot;**/test/*,**/test/bean/*,**/*.svn,*.svn&quot;</span><br><span class=\"line\">               includes=&quot;**/*.java&quot;</span><br><span class=\"line\">               source=&quot;1.8&quot;</span><br><span class=\"line\">               target=&quot;1.8&quot;</span><br><span class=\"line\">               deprecation=&quot;true&quot;</span><br><span class=\"line\">               failonerror=&quot;true&quot;</span><br><span class=\"line\">               debug=&quot;true&quot;&gt;</span><br><span class=\"line\">            &lt;classpath refid=&quot;classpath&quot; /&gt;</span><br><span class=\"line\">        &lt;/javac&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 把所有文件copy到build目录 --&gt;</span><br><span class=\"line\">        &lt;copy todir=&quot;${build.dir}&quot;&gt;</span><br><span class=\"line\">            &lt;fileset dir=&quot;${config.dir}&quot; includes=&quot;**/*&quot;/&gt;</span><br><span class=\"line\">        &lt;/copy&gt;</span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 生成Javadoc 文档 --&gt;</span><br><span class=\"line\">    &lt;target name=&quot;javadoc&quot; description=&quot;生成Javadoc文档&quot;&gt;</span><br><span class=\"line\">        &lt;delete dir=&quot;${doc.dir}&quot;/&gt;</span><br><span class=\"line\">        &lt;mkdir dir=&quot;${doc.dir}&quot;/&gt;</span><br><span class=\"line\">        &lt;javadoc packagenames=&quot;com.zhoyq.*&quot; sourcepath=&quot;${src.dir}&quot; destdir=&quot;${doc.dir}&quot;</span><br><span class=\"line\">                 windowtitle=&quot;${project} Javadoc&quot; use=&quot;yes&quot;</span><br><span class=\"line\">                 linksource=&quot;no&quot; splitindex=&quot;yes&quot; encoding=&quot;UTF-8&quot;</span><br><span class=\"line\">                 docencoding=&quot;GBK&quot; locale=&quot;zh_CN&quot;&gt;</span><br><span class=\"line\">            &lt;classpath refid=&quot;classpath&quot;/&gt;</span><br><span class=\"line\">            &lt;packageset dir=&quot;${src.dir}&quot; defaultexcludes=&quot;yes&quot;&gt;</span><br><span class=\"line\">                &lt;include name=&quot;${domain}/${package}/**&quot;/&gt;</span><br><span class=\"line\">            &lt;/packageset&gt;</span><br><span class=\"line\">        &lt;/javadoc&gt;</span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;target name=&quot;package&quot; depends=&quot;compile&quot; description=&quot;打jar包&quot; &gt;</span><br><span class=\"line\">        &lt;tstamp&gt;</span><br><span class=\"line\">            &lt;format property=&quot;TIME&quot; pattern=&quot;yyMMddHHmm&quot;/&gt;</span><br><span class=\"line\">        &lt;/tstamp&gt;  </span><br><span class=\"line\">        &lt;path id=&quot;spring-boot-antlib.classpath&quot; path=&quot;${user.dir}/bin/spring-boot-antlib-2.0.5.RELEASE.jar&quot; /&gt;</span><br><span class=\"line\">        &lt;typedef resource=&quot;org/springframework/boot/ant/antlib.xml&quot;</span><br><span class=\"line\">                 uri=&quot;antlib:org.springframework.boot.ant&quot;</span><br><span class=\"line\">                 classpathref=&quot;spring-boot-antlib.classpath&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;spring-boot:exejar destfile=&quot;${dist.dir}/${project}-${version}-${TIME}.jar&quot;</span><br><span class=\"line\">                classes=&quot;${build.dir}&quot;</span><br><span class=\"line\">                start-class=&quot;com.zhoyq.App&quot;&gt; </span><br><span class=\"line\">            &lt;lib&gt;</span><br><span class=\"line\">                &lt;fileset dir=&quot;${lib.dir}&quot; /&gt;</span><br><span class=\"line\">            &lt;/lib&gt;</span><br><span class=\"line\">        &lt;/spring-boot:exejar&gt;</span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;target name=&quot;default&quot; depends=&quot;clean, package, javadoc&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p>修改对应参数，然后运行 <code>ant</code> 即可。</p>\n","hasMore":true,"tags":["Spring","Spring Boot","Ant"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【Spring】使用 ANT 构建 Spring Boot 工程\ntags:\n  - Spring\n  - Spring Boot\n  - Ant\ncategories: 技术笔记\ndate: 2020-04-19\nstatus: published\n\n---\n\n> 这件事可做，但是做的时候有点无奈而已。\n\n<!-- more -->\n\n我知道你一定会说，用 `maven` 就行了为什么还要用 `ant`，变态......不巧的是，某银行就有这方面的要求。所以还是回忆了一下这个技术。\n\n首先原来的项目是基于 `maven` 的，所以第一步就是下载依赖，然后是打包成 `spring` 的 `jar` 包。\n\n需要两个额外的 `jar` 包，放在 `bin` 目录下：\n\n- `maven-ant-tasks-2.1.3.jar`\n- `spring-boot-antlib-2.0.5.RELEASE.jar`\n\n`ant` 使用 `build` 作为输出的目录结构，区别于 `target`。\n\n下面是 `build.xml` 配置：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:artifact=\"antlib:org.apache.maven.artifact.ant\"\n         xmlns:spring-boot=\"antlib:org.springframework.boot.ant\"\n         name=\"projectName\" default=\"default\" basedir=\"bin\">\n    <description>Builds, tests, and runs the project dsolrcloud.</description>\n\n    <!-- 配置开发环境 -->\n    <property environment=\"env\"/>\n\n    <property name=\"spring-boot.version\" value=\"2.0.5.RELEASE\" />\n\n    <property name=\"version\" value=\"1.0\"/>\n    <property name=\"project\" value=\"projectName\"/>\n    <property name=\"package\" value=\"projectName\"/>\n    <property name=\"domain\" value=\"com.zhoyq\"/>\n\n    <!-- 项目源代码目录 -->\n    <property name=\"src.dir\" location=\"${user.dir}/src/main/java\"/>\n    <!-- javac编译后生成的class文件路径 -->\n    <property name=\"build.dir\" location=\"${user.dir}/build/classes\" />\n    <!-- 最终生成jar包的路径 -->\n    <property name=\"dist.dir\" location=\"${user.dir}/build/dist\"/>\n    <!-- 项目配置文件路径 -->\n    <property name=\"config.dir\" location=\"${user.dir}/src/main/resources\" />\n    <!-- 项目生成JavaDoc文件路径  -->\n    <property name=\"doc.dir\" location=\"${user.dir}/build/doc\"/>\n\n    <!-- maven-ant-tasks 下载maven依赖jar包的存放路径  -->\n    <property name=\"lib.dir\" location=\"${user.dir}/build/dependency\"/>\n\n    <path id=\"classpath\">\n        <fileset dir=\"${lib.dir}\" includes=\"**/*.jar\"/>\n    </path>\n\n    <target name=\"clean\" description=\"清理ant编译文件\">\n        <delete dir=\"${user.dir}/build\" />\n    </target>\n\n    <target name=\"mkdir\" description=\"建立文件夹\">\n        <mkdir dir=\"${dist.dir}\"/>\n        <mkdir dir=\"${build.dir}\"/>\n        <mkdir dir=\"${lib.dir}\"/>\n        <mkdir dir=\"${doc.dir}\"/> \n    </target>\n\n    <target name=\"dependency\" depends=\"mkdir\" description=\"配置ant自动下载maven的依赖包\">\n        <!-- 下载maven依赖-->\n        <path id=\"maven-ant-tasks.classpath\" path=\"${user.dir}/bin/maven-ant-tasks-2.1.3.jar\" />\n        <typedef resource=\"org/apache/maven/artifact/ant/antlib.xml\"\n                 uri=\"antlib:org.apache.maven.artifact.ant\"\n                 classpathref=\"maven-ant-tasks.classpath\" />\n\n        <artifact:dependencies filesetId=\"mavenlib\" pathId=\"mavenclasspath\" useScope=\"runtime\">\n            <pom file=\"${user.dir}/pom.xml\" />\n        </artifact:dependencies>\n\n        <copy todir=\"${lib.dir}\">\n            <fileset refid=\"mavenlib\" />\n            <mapper type=\"flatten\" />\n        </copy>\n    </target>\n\n    <target name=\"compile\" depends=\"dependency\" description=\"编译代码\">\n        <!-- 编译所有的Java代码 -->\n        <javac srcdir=\"${src.dir}\"\n               destdir=\"${build.dir}\"\n               encoding=\"UTF-8\"\n               includeantruntime=\"no\"\n               excludes=\"**/test/*,**/test/bean/*,**/*.svn,*.svn\"\n               includes=\"**/*.java\"\n               source=\"1.8\"\n               target=\"1.8\"\n               deprecation=\"true\"\n               failonerror=\"true\"\n               debug=\"true\">\n            <classpath refid=\"classpath\" />\n        </javac>\n\n        <!-- 把所有文件copy到build目录 -->\n        <copy todir=\"${build.dir}\">\n            <fileset dir=\"${config.dir}\" includes=\"**/*\"/>\n        </copy>\n    </target>\n\n    <!-- 生成Javadoc 文档 -->\n    <target name=\"javadoc\" description=\"生成Javadoc文档\">\n        <delete dir=\"${doc.dir}\"/>\n        <mkdir dir=\"${doc.dir}\"/>\n        <javadoc packagenames=\"com.zhoyq.*\" sourcepath=\"${src.dir}\" destdir=\"${doc.dir}\"\n                 windowtitle=\"${project} Javadoc\" use=\"yes\"\n                 linksource=\"no\" splitindex=\"yes\" encoding=\"UTF-8\"\n                 docencoding=\"GBK\" locale=\"zh_CN\">\n            <classpath refid=\"classpath\"/>\n            <packageset dir=\"${src.dir}\" defaultexcludes=\"yes\">\n                <include name=\"${domain}/${package}/**\"/>\n            </packageset>\n        </javadoc>\n    </target>\n\n    <target name=\"package\" depends=\"compile\" description=\"打jar包\" >\n        <tstamp>\n            <format property=\"TIME\" pattern=\"yyMMddHHmm\"/>\n        </tstamp>  \n        <path id=\"spring-boot-antlib.classpath\" path=\"${user.dir}/bin/spring-boot-antlib-2.0.5.RELEASE.jar\" />\n        <typedef resource=\"org/springframework/boot/ant/antlib.xml\"\n                 uri=\"antlib:org.springframework.boot.ant\"\n                 classpathref=\"spring-boot-antlib.classpath\" />\n\n        <spring-boot:exejar destfile=\"${dist.dir}/${project}-${version}-${TIME}.jar\"\n                classes=\"${build.dir}\"\n                start-class=\"com.zhoyq.App\"> \n            <lib>\n                <fileset dir=\"${lib.dir}\" />\n            </lib>\n        </spring-boot:exejar>\n    </target>\n\n    <target name=\"default\" depends=\"clean, package, javadoc\">\n\n    </target>\n\n</project>\n```\n\n修改对应参数，然后运行 `ant` 即可。\n"},{"title":"【应用】SpringCloud网关路由节点编辑器","excerpt":"<p>最近有些时间做了一个 SpringCloudGateway 路由的节点编辑器</p>\n","url":"/2020/04/18/应用/【应用】SpringCloud网关路由节点编辑器","headPic":"/attaches/0FE80E1DB4B7C0027DF2A309B7710B67.PNG","fromDate":"2020-04-18","category":"应用","text":"<p>最近有些时间做了一个 SpringCloudGateway 路由的节点编辑器</p>\n<!-- more -->\n<p>需要的可以自取：</p>\n<ul>\n<li>链接：<code>https://pan.baidu.com/s/1QDoVxq8Mgr56GdoIHKB4dA</code></li>\n<li>提取码: <code>ygku</code></li>\n<li>两个文件下载任意一个就可以，一个是免安装zip需要解压运行，一个免安装exe，直接双击运行即可。</li>\n<li>如果有需要linux或者mac版本的，可以给我发邮件或者私信我，我可能过段时间才会迁移到其他系统。</li>\n<li>目前是beta版本，仅仅是初步展示功能，看看合不合大家胃口。</li>\n</ul>\n","hasMore":true,"tags":["SpringCloud","路由节点编辑器"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【应用】SpringCloud网关路由节点编辑器\nheadPicture: ../DATA/nodeEditor.PNG\ntags:\n  - SpringCloud\n  - 路由节点编辑器\ncategories: 应用\ndate: 2020-04-18\nstatus: published\n\n---\n\n最近有些时间做了一个 SpringCloudGateway 路由的节点编辑器\n\n<!-- more -->\n\n需要的可以自取：\n\n- 链接：`https://pan.baidu.com/s/1QDoVxq8Mgr56GdoIHKB4dA` \n- 提取码: `ygku` \n- 两个文件下载任意一个就可以，一个是免安装zip需要解压运行，一个免安装exe，直接双击运行即可。\n- 如果有需要linux或者mac版本的，可以给我发邮件或者私信我，我可能过段时间才会迁移到其他系统。\n- 目前是beta版本，仅仅是初步展示功能，看看合不合大家胃口。\n"},{"title":"【WEBGL】谷歌瓦片图加载从原理到实现","excerpt":"<p>年前为 <code>NothingJs</code> 实现了一个扩展 <code>NJ_lod_ground</code>，目标是简单实现加载谷歌瓦片。为了让读者更加容易的理解，我直接改成了 <code>WebGL</code> 实例（总代码800行左右、依赖glMatrix）。并且把相关内容整理到本文，希望能帮助到刚刚入门的同学。</p>\n<p>工程地址在文章结尾。</p>\n","url":"/2020/01/24/三维技术/【WEBGL】谷歌瓦片图加载从原理到实现","fromDate":"2020-01-24","category":"三维技术","text":"<p>年前为 <code>NothingJs</code> 实现了一个扩展 <code>NJ_lod_ground</code>，目标是简单实现加载谷歌瓦片。为了让读者更加容易的理解，我直接改成了 <code>WebGL</code> 实例（总代码800行左右、依赖glMatrix）。并且把相关内容整理到本文，希望能帮助到刚刚入门的同学。</p>\n<p>工程地址在文章结尾。</p>\n<!-- more -->\n<h2>WGS84 大地坐标系 和 Web 墨卡托投影</h2>\n<p><code>GIS</code> 领域最离不开的就是坐标变换，首先要搞清楚的就是地球上的一个点如何变换成地图上的一个点。文章不会详细讲解变换方法，因为本文重点并不是算法。但是还是要说清楚整个过程，我们已经清楚地球本身不是一个规则的球体，为了计算方便，需要有一个标准的大地坐标系来简化计算，而 <code>WGS84（World Geodetic System一1984 Coordinate System）</code> 就是这样一个坐标系。但是大地坐标系是三维坐标系，要映射到二维地图上还需要一步，就是投影变换（仿射变换），比如墨卡托投影。</p>\n<p><code>Web 墨卡托</code> 定义的大地坐标系是 <code>WGS84</code> 坐标系，投影方式与墨卡托投影类似，但是投影时地球不再当做是椭球体而是半径是6378137米的标准球体。</p>\n<p>首先我们先简单了解一下 <code>Web 墨卡托投影</code> 的历史：</p>\n<ul>\n<li>2005年 - 谷歌在谷歌地图中首次使用，当时的 <code>Web墨卡托</code> 使用者还称其为 <code>世界墨卡托（World Mercator）- Spherical Mercator (unofficial deprecated ESRI)</code>，代号 <code>WKID 54004</code>。</li>\n<li>2006年 - <code>OSGeo</code> 在提出的 <code>TMS - Tile Map Service</code> 标准中使用代号 <code>OSGEO:41001（WGS84 / Simple Mercator）- Spherical Mercator (unofficial deprecated OSGEO / Tile Map Service)</code>。</li>\n<li>2007年 - <code>Christopher Schmidt（OpenLayers的重要贡献者之一）</code> 在通过一次 <code>GIS</code> 讨论中为了在 <code>OpenLayers</code> 中使用谷歌投影，提出给 <code>Web墨卡托</code> 使用一个统一的代号 <code>900913 - 形似 Google</code>，并在OpenLayers的 <code>OpenLayers/Layer/SphericalMercator.js</code> 中正式使用代号 <code>900913</code>。</li>\n<li>2008年 - <code>EPSG</code> 在6.15版本中正式给谷歌地图投影赋予 CRS 代号 <code>EPSG:3785（Popular Visualisation CRS / Mercator）</code>，这也是 <code>Web墨卡托</code> 正式被 <code>EPSG</code> 组织承认。</li>\n<li>2009年 - <code>EPSG</code> 使用新代号 <code>EPSG:3857</code> 代替之前的 <code>EPSG:3785</code>，给谷歌地图投影方法命名为 <code>“公共可视化伪墨卡托投影（PVPM）”</code>。</li>\n<li>至今 - <code>EPSG:3857（WGS 84 / Pseudo-Mercator）</code> 代号是 <code>web墨卡托</code> 的正式代号。</li>\n</ul>\n<h2>谷歌瓦片</h2>\n<p>经过投影变换后，地理坐标就变成了平面地图坐标。考虑到需要地图的精度有大有小（缩放），所以将地图分级：顶层为0级，由一张256像素见方的图片存储，向后每多一级，像素是当前级别的4倍。由此便组成了一个金字塔式的地图瓦片层级结构，每张瓦片的大小固定为256像素的方形。</p>\n<p><img src=\"/attaches/F28150AA96C6FF1DEFA266C399C8E3D6.png\" alt=\"瓦片金字塔\" class=\"img-responsive\" /></p>\n<p>有了地图瓦片还需要对地图瓦片进行编号才行，谷歌采用XYZ表示瓦片的坐标和显示级别（缩放级别），其中XY的原点在左上角，X从左向右，Y从上向下，Z则表示显示级别（缩放级别）。</p>\n<p>假如我们需要一张256像素的世界卫星地图，我们可以在浏览器访问：<code>http://mt2.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;gl=cn&amp;x=0&amp;y=0&amp;z=0</code></p>\n<h2>如何决定缩放级别</h2>\n<p>了解了投影和瓦片获取方式，还是不能实现一个简单的地图，我们还需要知道什么条件下加载哪些瓦片图。我程序里处理方式比较简单，需要知道当前显示级别，然后根据显示级别和摄像机与地平面的交点推导出中心瓦片坐标，然后在按中心瓦片坐标计算当前需要加载的全部瓦片坐标。</p>\n<p>最重要的一点就是，如何获取当前级别呢？我并没有去想计算级别的方法，因为 <code>WebGIS</code> 领域里，开源的 <code>Cesium</code> 发展非常不错，于是就在 <code>Cesium</code> 源码中搜索了一下，找到了相关代码，借鉴这部分代码很快就完成了我们需要的方法。</p>\n<p>不多说，上代码：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过给定参数计算纹素间距, 核心就是理解视坐标</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：这里为了计算方便 仅仅算了纵向的像素间距</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getCurrentTexelSpacing(camera, screen, pos) {</span><br><span class=\"line\">  <span class=\"comment\">// 相机 和 相机朝向与地面的交点 的距离</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> distanceToPos = glMatrix.vec3.distance(camera.position, pos);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 实际上是 </span></span><br><span class=\"line\">  <span class=\"comment\">// Math.tan(相机yFov / 2.0) * distanceToPos = 纹素间距 * 屏幕高度 / 2.0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (2.0 * Math.tan(camera.yfov / 2.0) * distanceToPos) / screen[1];</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过零级别的纹素间距定义当前级别</span></span><br><span class=\"line\"><span class=\"comment\">// 零级别的纹素间距是一定的，即 2.0 * Math.PI * 地球半径 / 256 = 地球周长 / 256</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getLevel(texelSpacing) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> twoToTheLevelPower = levelZeroTexelSpacing / texelSpacing;</span><br><span class=\"line\">  <span class=\"comment\">// 实际上计算的是 2 的几次方是 twoToTheLevelPower 这样就不难理解了</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> level = Math.log(twoToTheLevelPower) / Math.log(2);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rounded = Math.round(level);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Math.max(rounded | 0, 0);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// camera 相机</span></span><br><span class=\"line\"><span class=\"comment\">// screen 渲染的长宽</span></span><br><span class=\"line\"><span class=\"comment\">// pos 相机朝向与地面夹角（这个夹角算法也是 Cesium 里的原始方法）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getCurrentLevel(camera, screen, pos) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> texelSpacing = getCurrentTexelSpacing(camera, screen, pos);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> getLevel(texelSpacing);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>核心代码就这些，<code>getCurrentLevel</code> 就是获取当前显示级别的方法（当然我对原始方法稍微修改了一下以适应本地代码）。</p>\n<p>通过代码以及注释不难理解，实际上缩放级别是通过 显示级别0下的纹素间距 和 摄像机位置与其朝向同地面的交点间距离上的纹素间距 比值决定的。</p>\n<h2>坐标转换</h2>\n<p>知道了当前级别还是不能实现一个简单的地图，因为是使用 <code>WebGL</code> 绘制的，所以还需要知道如何通过级别确定需要绘制的顶点坐标，这个就涉及到坐标转换的问题了。</p>\n<p>假如我们知道了一个瓦片的 <code>XYZ</code>，如何获取一个瓦片所涉及到的正方形在世界坐标系下的顶点信息呢？有了目标我们再查看 <code>Cesium</code> ，就能很快找到需要的代码，然后借鉴之。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取某个级别横向瓦片数量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getNumberOfXTilesAtLevel(level) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> numberOfLevelZeroTilesX &lt;&lt; level;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取某个级别纵向瓦片数量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getNumberOfYTilesAtLevel(level) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> numberOfLevelZeroTilesY &lt;&lt; level;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 瓦片坐标 转 经纬度边界坐标（东西南北）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> tileXYToRadians(x, y, level) {</span><br><span class=\"line\">  <span class=\"comment\">// 获取整个世界地图的区域边界（弧度）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rectangle = boundary;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前显示级别横向纵向瓦片数量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> xTiles = getNumberOfXTilesAtLevel(level);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> yTiles = getNumberOfYTilesAtLevel(level);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 计算每个瓦片的宽度（弧度）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> xTileWidth = rectangle.width / xTiles;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> west = x * xTileWidth + rectangle.west;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> east = (x + 1) * xTileWidth + rectangle.west;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 计算每个瓦片的高度（弧度）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> yTileHeight = rectangle.height / yTiles;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> north = rectangle.north - y * yTileHeight;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> south = rectangle.north - (y + 1) * yTileHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回边界信息 弧度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br><span class=\"line\">    west,</span><br><span class=\"line\">    south,</span><br><span class=\"line\">    east,</span><br><span class=\"line\">    north</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弧度经纬度信息 转换成 世界坐标</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> tileLonlatRadians2world(lonlat) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = ((lonlat[0]) / boundary.width) * WIDTH;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = ((-lonlat[1]) / boundary.height) * HEIGHT;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>由源码可知，通过 <code>tileXYToRadians</code> 可以根据当前瓦片信息转换成边界弧度信息，再通过 <code>tileLonlatRadians2world</code> 由弧度信息可以获取世界坐标信息。</p>\n<h2>预备知识</h2>\n<p>好了，我们了解了投影，瓦片，级别和坐标之后，我们就可以着手写这个瓦片加载程序了。</p>\n<p>但是再看源码之前还需要了解一些相关知识：</p>\n<ul>\n<li><a href=\"https://www.zhoyq.com/2020/01/22/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/%E3%80%90WebGL%E3%80%91WebGL%20API%20%E8%AF%A6%E8%A7%A3/\">WebGL API</a>。</li>\n<li>前端鼠标事件相关操作，可以查看源码了解。</li>\n<li>前端类的封装以及闭包方式（为了简化开发环境和提高兼容性，源码并没有采用es6编写）。</li>\n</ul>\n<h2>工程文件说明</h2>\n<div class=\"table-responsive\"><table class=\"table table-condensed table-hover\">\n<thead>\n<tr>\n<th>路径</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>css/main.css</code></td>\n<td>全局样式</td>\n</tr>\n<tr>\n<td><code>js/Camera.js</code></td>\n<td>摄像机对象</td>\n</tr>\n<tr>\n<td><code>js/gl-matrix-min.js</code></td>\n<td>数学计算库压缩版</td>\n</tr>\n<tr>\n<td><code>js/gl-matrix.js</code></td>\n<td>数学计算库</td>\n</tr>\n<tr>\n<td><code>js/mouse-utils.js</code></td>\n<td>鼠标事件工具类</td>\n</tr>\n<tr>\n<td><code>js/Quad.js</code></td>\n<td>瓦片对象</td>\n</tr>\n<tr>\n<td><code>js/tiles-utils.js</code></td>\n<td>瓦片相关工具类</td>\n</tr>\n<tr>\n<td><code>js/webgl-utils.js</code></td>\n<td>gl相关工具类</td>\n</tr>\n<tr>\n<td><code>index.html</code></td>\n<td>html页面</td>\n</tr>\n<tr>\n<td><code>main.js</code></td>\n<td>主要运行过程</td>\n</tr>\n</tbody>\n</table></div>\n<h2>实例</h2>\n<p><div class=\"pad-no mar-btm\" style=\"height: 400px;\"><iframe src=\"https://zhoyq.gitee.io/from-principle-to-implementation-of-webgl-loading-google-tiles/\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allowfullscreen=\"true\"></iframe></div></p>\n<h2>已知问题</h2>\n<p>这部分是因为工程本身是为了简化代码说明瓦片加载过程，所以就忽略了部分问题，如果读者有兴趣可以自己着手解决这部分问题。</p>\n<ul>\n<li>采样 - 目前使用的是前向渲染，用的是默认硬件采样方式。</li>\n<li>坐标抖动 - 这个是坐标计算精度的问题。</li>\n<li>摄像机操作 - 摄像机操作还比较生硬，平移速度没有根据缩放而变化；嵌入iframe鼠标操作并没有兼容。</li>\n<li>瓦片加载方式 - 瓦片加载方式是按级别加载的， 并不会平滑过渡，也不会按照需要加载不同级别的瓦片。</li>\n</ul>\n<h2>引用</h2>\n<ul>\n<li><a href=\"http://www.rivermap.cn/docs/show-1829.html\">GCJ02/BD09/80/54/2000常用坐标系详解-第六节（二）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011276788?utm_source=tag-newest\">瓦片地图原理</a></li>\n<li><a href=\"https://www.cnblogs.com/fwc1994/p/6519229.html\">WebGIS前端瓦片地图显示原理及实现</a></li>\n<li><a href=\"https://www.cnblogs.com/naaoveGIS/category/600559.html\">从底层谈，WebGIS 原理、设计、实现</a></li>\n<li><a href=\"https://www.cnblogs.com/tuncaysanli/p/3805421.html\">Web墨卡托投影</a></li>\n<li><a href=\"https://blog.csdn.net/iispring/article/details/8565177\">Web Mercator投影与反投影计算公式</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30906701/article/details/95465439\">墨卡托投影坐标系（Mercator Projection）原理及实现C代码</a></li>\n<li><a href=\"https://blog.csdn.net/youngkingyj/article/details/23365849\">OpenStreetMap/Google/百度/Bing瓦片地图服务(TMS)</a></li>\n</ul>\n<h2>源码</h2>\n<p><script src=\"https://gitee.com/zhoyq/from-principle-to-implementation-of-WebGL-loading-Google-tiles/widget_preview\"></script></p>\n<style>/*use*/\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n</style>","hasMore":true,"tags":["WEBGL","谷歌瓦片"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【WEBGL】谷歌瓦片图加载从原理到实现\ntags:\n  - WEBGL\n  - 谷歌瓦片\ncategories: 三维技术\ndate: 2020-01-24\nstatus: published\n\n---\n\n年前为 `NothingJs` 实现了一个扩展 `NJ_lod_ground`，目标是简单实现加载谷歌瓦片。为了让读者更加容易的理解，我直接改成了 `WebGL` 实例（总代码800行左右、依赖glMatrix）。并且把相关内容整理到本文，希望能帮助到刚刚入门的同学。\n\n工程地址在文章结尾。\n\n<!-- more -->\n\n## WGS84 大地坐标系 和 Web 墨卡托投影\n\n`GIS` 领域最离不开的就是坐标变换，首先要搞清楚的就是地球上的一个点如何变换成地图上的一个点。文章不会详细讲解变换方法，因为本文重点并不是算法。但是还是要说清楚整个过程，我们已经清楚地球本身不是一个规则的球体，为了计算方便，需要有一个标准的大地坐标系来简化计算，而 `WGS84（World Geodetic System一1984 Coordinate System）` 就是这样一个坐标系。但是大地坐标系是三维坐标系，要映射到二维地图上还需要一步，就是投影变换（仿射变换），比如墨卡托投影。\n\n`Web 墨卡托` 定义的大地坐标系是 `WGS84` 坐标系，投影方式与墨卡托投影类似，但是投影时地球不再当做是椭球体而是半径是6378137米的标准球体。\n\n首先我们先简单了解一下 `Web 墨卡托投影` 的历史：\n\n* 2005年 - 谷歌在谷歌地图中首次使用，当时的 `Web墨卡托` 使用者还称其为 `世界墨卡托（World Mercator）- Spherical Mercator (unofficial deprecated ESRI)`，代号 `WKID 54004`。\n* 2006年 - `OSGeo` 在提出的 `TMS - Tile Map Service` 标准中使用代号 `OSGEO:41001（WGS84 / Simple Mercator）- Spherical Mercator (unofficial deprecated OSGEO / Tile Map Service)`。\n* 2007年 - `Christopher Schmidt（OpenLayers的重要贡献者之一）` 在通过一次 `GIS` 讨论中为了在 `OpenLayers` 中使用谷歌投影，提出给 `Web墨卡托` 使用一个统一的代号 `900913 - 形似 Google`，并在OpenLayers的 `OpenLayers/Layer/SphericalMercator.js` 中正式使用代号 `900913`。\n* 2008年 - `EPSG` 在6.15版本中正式给谷歌地图投影赋予 CRS 代号 `EPSG:3785（Popular Visualisation CRS / Mercator）`，这也是 `Web墨卡托` 正式被 `EPSG` 组织承认。\n* 2009年 - `EPSG` 使用新代号 `EPSG:3857` 代替之前的 `EPSG:3785`，给谷歌地图投影方法命名为 `“公共可视化伪墨卡托投影（PVPM）”`。\n* 至今 - `EPSG:3857（WGS 84 / Pseudo-Mercator）` 代号是 `web墨卡托` 的正式代号。\n\n## 谷歌瓦片\n\n经过投影变换后，地理坐标就变成了平面地图坐标。考虑到需要地图的精度有大有小（缩放），所以将地图分级：顶层为0级，由一张256像素见方的图片存储，向后每多一级，像素是当前级别的4倍。由此便组成了一个金字塔式的地图瓦片层级结构，每张瓦片的大小固定为256像素的方形。\n\n![瓦片金字塔](../../DATA/200129183-59c20e23b5220_articlex.png)\n\n有了地图瓦片还需要对地图瓦片进行编号才行，谷歌采用XYZ表示瓦片的坐标和显示级别（缩放级别），其中XY的原点在左上角，X从左向右，Y从上向下，Z则表示显示级别（缩放级别）。\n\n假如我们需要一张256像素的世界卫星地图，我们可以在浏览器访问：`http://mt2.google.cn/vt/lyrs=s&hl=zh-CN&gl=cn&x=0&y=0&z=0`\n\n## 如何决定缩放级别\n\n了解了投影和瓦片获取方式，还是不能实现一个简单的地图，我们还需要知道什么条件下加载哪些瓦片图。我程序里处理方式比较简单，需要知道当前显示级别，然后根据显示级别和摄像机与地平面的交点推导出中心瓦片坐标，然后在按中心瓦片坐标计算当前需要加载的全部瓦片坐标。\n\n最重要的一点就是，如何获取当前级别呢？我并没有去想计算级别的方法，因为 `WebGIS` 领域里，开源的 `Cesium` 发展非常不错，于是就在 `Cesium` 源码中搜索了一下，找到了相关代码，借鉴这部分代码很快就完成了我们需要的方法。\n\n不多说，上代码：\n\n```js\n// 通过给定参数计算纹素间距, 核心就是理解视坐标\n// 注意：这里为了计算方便 仅仅算了纵向的像素间距\nfunction getCurrentTexelSpacing(camera, screen, pos) {\n  // 相机 和 相机朝向与地面的交点 的距离\n  const distanceToPos = glMatrix.vec3.distance(camera.position, pos);\n\n  // 实际上是 \n  // Math.tan(相机yFov / 2.0) * distanceToPos = 纹素间距 * 屏幕高度 / 2.0\n  return (2.0 * Math.tan(camera.yfov / 2.0) * distanceToPos) / screen[1];\n}\n\n// 通过零级别的纹素间距定义当前级别\n// 零级别的纹素间距是一定的，即 2.0 * Math.PI * 地球半径 / 256 = 地球周长 / 256\nfunction getLevel(texelSpacing) {\n  const twoToTheLevelPower = levelZeroTexelSpacing / texelSpacing;\n  // 实际上计算的是 2 的几次方是 twoToTheLevelPower 这样就不难理解了\n  const level = Math.log(twoToTheLevelPower) / Math.log(2);\n  const rounded = Math.round(level);\n\n  return Math.max(rounded | 0, 0);\n}\n\n// camera 相机\n// screen 渲染的长宽\n// pos 相机朝向与地面夹角（这个夹角算法也是 Cesium 里的原始方法）\nfunction getCurrentLevel(camera, screen, pos) {\n  const texelSpacing = getCurrentTexelSpacing(camera, screen, pos);\n\n  return getLevel(texelSpacing);\n}\n```\n\n核心代码就这些，`getCurrentLevel` 就是获取当前显示级别的方法（当然我对原始方法稍微修改了一下以适应本地代码）。\n\n通过代码以及注释不难理解，实际上缩放级别是通过 显示级别0下的纹素间距 和 摄像机位置与其朝向同地面的交点间距离上的纹素间距 比值决定的。\n\n## 坐标转换\n\n知道了当前级别还是不能实现一个简单的地图，因为是使用 `WebGL` 绘制的，所以还需要知道如何通过级别确定需要绘制的顶点坐标，这个就涉及到坐标转换的问题了。\n\n假如我们知道了一个瓦片的 `XYZ`，如何获取一个瓦片所涉及到的正方形在世界坐标系下的顶点信息呢？有了目标我们再查看 `Cesium` ，就能很快找到需要的代码，然后借鉴之。\n\n```js\n// 获取某个级别横向瓦片数量\nfunction getNumberOfXTilesAtLevel(level) {\n  return numberOfLevelZeroTilesX << level;\n}\n\n// 获取某个级别纵向瓦片数量\nfunction getNumberOfYTilesAtLevel(level) {\n  return numberOfLevelZeroTilesY << level;\n}\n\n// 瓦片坐标 转 经纬度边界坐标（东西南北）\nfunction tileXYToRadians(x, y, level) {\n  // 获取整个世界地图的区域边界（弧度）\n  const rectangle = boundary;\n  // 获取当前显示级别横向纵向瓦片数量\n  const xTiles = getNumberOfXTilesAtLevel(level);\n  const yTiles = getNumberOfYTilesAtLevel(level);\n\n  // 计算每个瓦片的宽度（弧度）\n  const xTileWidth = rectangle.width / xTiles;\n  const west = x * xTileWidth + rectangle.west;\n  const east = (x + 1) * xTileWidth + rectangle.west;\n\n  // 计算每个瓦片的高度（弧度）\n  const yTileHeight = rectangle.height / yTiles;\n  const north = rectangle.north - y * yTileHeight;\n  const south = rectangle.north - (y + 1) * yTileHeight;\n\n  // 返回边界信息 弧度\n  return {\n    west,\n    south,\n    east,\n    north\n  };\n}\n\n// 弧度经纬度信息 转换成 世界坐标\nfunction tileLonlatRadians2world(lonlat) {\n  const x = ((lonlat[0]) / boundary.width) * WIDTH;\n  const y = ((-lonlat[1]) / boundary.height) * HEIGHT;\n\n  return [x, y];\n}\n```\n\n由源码可知，通过 `tileXYToRadians` 可以根据当前瓦片信息转换成边界弧度信息，再通过 `tileLonlatRadians2world` 由弧度信息可以获取世界坐标信息。\n\n## 预备知识\n\n好了，我们了解了投影，瓦片，级别和坐标之后，我们就可以着手写这个瓦片加载程序了。\n\n但是再看源码之前还需要了解一些相关知识：\n\n* [WebGL API](https://www.zhoyq.com/2020/01/22/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/%E3%80%90WebGL%E3%80%91WebGL%20API%20%E8%AF%A6%E8%A7%A3/)。\n* 前端鼠标事件相关操作，可以查看源码了解。\n* 前端类的封装以及闭包方式（为了简化开发环境和提高兼容性，源码并没有采用es6编写）。\n\n## 工程文件说明\n\n| 路径 | 说明 |\n| - | - |\n| `css/main.css` | 全局样式 |\n| `js/Camera.js` | 摄像机对象 |\n| `js/gl-matrix-min.js` | 数学计算库压缩版 |\n| `js/gl-matrix.js` | 数学计算库 |\n| `js/mouse-utils.js` | 鼠标事件工具类 |\n| `js/Quad.js` | 瓦片对象 |\n| `js/tiles-utils.js` | 瓦片相关工具类 |\n| `js/webgl-utils.js` | gl相关工具类 |\n| `index.html` | html页面 |\n| `main.js` | 主要运行过程 |\n\n## 实例\n\n[iframe引用占位符](iframe:400:https://zhoyq.gitee.io/from-principle-to-implementation-of-webgl-loading-google-tiles/)\n\n## 已知问题\n\n这部分是因为工程本身是为了简化代码说明瓦片加载过程，所以就忽略了部分问题，如果读者有兴趣可以自己着手解决这部分问题。\n\n* 采样 - 目前使用的是前向渲染，用的是默认硬件采样方式。\n* 坐标抖动 - 这个是坐标计算精度的问题。\n* 摄像机操作 - 摄像机操作还比较生硬，平移速度没有根据缩放而变化；嵌入iframe鼠标操作并没有兼容。\n* 瓦片加载方式 - 瓦片加载方式是按级别加载的， 并不会平滑过渡，也不会按照需要加载不同级别的瓦片。\n\n## 引用\n\n* [GCJ02/BD09/80/54/2000常用坐标系详解-第六节（二）](http://www.rivermap.cn/docs/show-1829.html)\n* [瓦片地图原理](https://segmentfault.com/a/1190000011276788?utm_source=tag-newest)\n* [WebGIS前端瓦片地图显示原理及实现](https://www.cnblogs.com/fwc1994/p/6519229.html)\n* [从底层谈，WebGIS 原理、设计、实现](https://www.cnblogs.com/naaoveGIS/category/600559.html)\n* [Web墨卡托投影](https://www.cnblogs.com/tuncaysanli/p/3805421.html)\n* [Web Mercator投影与反投影计算公式](https://blog.csdn.net/iispring/article/details/8565177)\n* [墨卡托投影坐标系（Mercator Projection）原理及实现C代码](https://blog.csdn.net/weixin_30906701/article/details/95465439)\n* [OpenStreetMap/Google/百度/Bing瓦片地图服务(TMS)](https://blog.csdn.net/youngkingyj/article/details/23365849)\n\n## 源码\n\n[引入JS占位符](script:https://gitee.com/zhoyq/from-principle-to-implementation-of-WebGL-loading-Google-tiles/widget_preview)\n\n```css\n/*use*/\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n```\n"},{"title":"【WebGL】WebGL API 详解","excerpt":"<p>基于 <a href=\"/attaches/FAAD61EAB3377ED8376ECDC2A15BF452.idl\">WebGL Specifications</a> 最全面的API释疑。</p>\n<blockquote>\n<p>20201224 更新，删除其他标题，分类到对应标题下并添加注释</p>\n</blockquote>\n","url":"/2020/01/22/三维技术/【WebGL】WebGL API 详解","fromDate":"2020-01-22","category":"三维技术","text":"<p>基于 <a href=\"/attaches/FAAD61EAB3377ED8376ECDC2A15BF452.idl\">WebGL Specifications</a> 最全面的API释疑。</p>\n<blockquote>\n<p>20201224 更新，删除其他标题，分类到对应标题下并添加注释</p>\n</blockquote>\n<!-- more -->\n<h2>类型以及对象定义</h2>\n<p>这部分内容主要定义一部分类型和数据结构。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef unsigned <span class=\"keyword\">long</span>  GLenum;</span><br><span class=\"line\">typedef <span class=\"keyword\">boolean</span>        GLboolean;</span><br><span class=\"line\">typedef unsigned <span class=\"keyword\">long</span>  GLbitfield;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"keyword\">byte</span>           GLbyte;</span><br><span class=\"line\">typedef <span class=\"keyword\">short</span>          GLshort;</span><br><span class=\"line\">typedef <span class=\"keyword\">long</span>           GLint;</span><br><span class=\"line\">typedef <span class=\"keyword\">long</span>           GLsizei;</span><br><span class=\"line\">typedef <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>      GLintptr;</span><br><span class=\"line\">typedef <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>      GLsizeiptr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个类型应该是 无符号整型 8位</span></span><br><span class=\"line\"><span class=\"comment\">// 但是Web IDL中并不存在这种类型</span></span><br><span class=\"line\"><span class=\"comment\">// 所以用 octet 代替 占位</span></span><br><span class=\"line\">typedef octet          GLubyte;</span><br><span class=\"line\">typedef unsigned <span class=\"keyword\">short</span> GLushort;</span><br><span class=\"line\">typedef unsigned <span class=\"keyword\">long</span>  GLuint;</span><br><span class=\"line\">typedef unrestricted <span class=\"keyword\">float</span> GLfloat;</span><br><span class=\"line\">typedef unrestricted <span class=\"keyword\">float</span> GLclampf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由 WebGLContextAttributes 引用</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> WebGLPowerPreference { &quot;<span class=\"keyword\">default</span>&quot;, &quot;low-power&quot;, &quot;high-performance&quot; };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文时支持的参数</span></span><br><span class=\"line\"><span class=\"comment\">// getContext('webgl', &lt;WebGLContextAttributes&gt;)</span></span><br><span class=\"line\">dictionary WebGLContextAttributes {</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> alpha = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> depth = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> stencil = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> antialias = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> premultipliedAlpha = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> preserveDrawingBuffer = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    WebGLPowerPreference powerPreference = &quot;<span class=\"keyword\">default</span>&quot;;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> failIfMajorPerformanceCaveat = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [Exposed=(Window,Worker)] 代表可以同时在主线程和后台线程使用本对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLBuffer : WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLFramebuffer : WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLProgram : WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLRenderbuffer : WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLShader : WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLTexture : WebGLObject {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLUniformLocation {};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLActiveInfo {</span><br><span class=\"line\">    readonly attribute GLint size;</span><br><span class=\"line\">    readonly attribute GLenum type;</span><br><span class=\"line\">    readonly attribute DOMString name;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLShaderPrecisionFormat {</span><br><span class=\"line\">    readonly attribute GLint rangeMin;</span><br><span class=\"line\">    readonly attribute GLint rangeMax;</span><br><span class=\"line\">    readonly attribute GLint precision;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">typedef (ImageBitmap or</span><br><span class=\"line\">         ImageData or</span><br><span class=\"line\">         HTMLImageElement or</span><br><span class=\"line\">         HTMLCanvasElement or</span><br><span class=\"line\">         HTMLVideoElement or</span><br><span class=\"line\">         OffscreenCanvas) TexImageSource;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef ([AllowShared] Float32Array or sequence&lt;GLfloat&gt;) Float32List;</span><br><span class=\"line\">typedef ([AllowShared] Int32Array or sequence&lt;GLint&gt;) Int32List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> mixin WebGLRenderingContextBase {</span><br><span class=\"line\">    <span class=\"comment\">// 内容整理到 'WebGLRenderingContext 对象'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> mixin WebGLRenderingContextOverloads {</span><br><span class=\"line\">    <span class=\"comment\">// 内容整理到 'WebGLRenderingContext 对象'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLRenderingContext {</span><br><span class=\"line\">    <span class=\"comment\">// 内容整理到 'WebGLRenderingContext 对象'</span></span><br><span class=\"line\">};</span><br><span class=\"line\">WebGLRenderingContext includes WebGLRenderingContextBase;</span><br><span class=\"line\">WebGLRenderingContext includes WebGLRenderingContextOverloads;</span><br><span class=\"line\"></span><br><span class=\"line\">[Exposed=(Window,Worker),</span><br><span class=\"line\"> Constructor(DOMString type,</span><br><span class=\"line\"> optional WebGLContextEventInit eventInit)]</span><br><span class=\"line\"><span class=\"keyword\">interface</span> WebGLContextEvent : Event {</span><br><span class=\"line\">    readonly attribute DOMString statusMessage;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventInit is defined in the DOM4 specification.</span></span><br><span class=\"line\">dictionary WebGLContextEventInit : EventInit {</span><br><span class=\"line\">    DOMString statusMessage = &quot;&quot;;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n<h2>WebGLRenderingContext 对象</h2>\n<h3>上下文相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Exposed=Window] readonly attribute (HTMLCanvasElement or OffscreenCanvas) canvas;</span><br><span class=\"line\"><span class=\"comment\">// 可以在 Web Work 上使用 canvas api</span></span><br><span class=\"line\"><span class=\"comment\">// 需要调用 canvas.transferControlToOffscreen() 将渲染权转移给后台线程</span></span><br><span class=\"line\">[Exposed=Worker] readonly attribute OffscreenCanvas canvas;</span><br><span class=\"line\">readonly attribute GLsizei drawingBufferWidth;</span><br><span class=\"line\">readonly attribute GLsizei drawingBufferHeight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回类似下列上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">// { </span></span><br><span class=\"line\"><span class=\"comment\">//   alpha: true, </span></span><br><span class=\"line\"><span class=\"comment\">//   antialias: true, </span></span><br><span class=\"line\"><span class=\"comment\">//   depth: true, </span></span><br><span class=\"line\"><span class=\"comment\">//   failIfMajorPerformanceCaveat: false, </span></span><br><span class=\"line\"><span class=\"comment\">//   premultipliedAlpha: true, </span></span><br><span class=\"line\"><span class=\"comment\">//   preserveDrawingBuffer: false, </span></span><br><span class=\"line\"><span class=\"comment\">//   stencil: false </span></span><br><span class=\"line\"><span class=\"comment\">// }</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过下列方法设置</span></span><br><span class=\"line\"><span class=\"comment\">// canvas.getContext('webgl', { antialias: false, depth: false });</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] WebGLContextAttributes? getContextAttributes();</span><br><span class=\"line\"><span class=\"comment\">// 标记上下文是否已经丢失</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] <span class=\"keyword\">boolean</span> isContextLost();</span><br><span class=\"line\"><span class=\"comment\">// 阻断执行，直到之前所有的操作都完成。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> finish();</span><br><span class=\"line\"><span class=\"comment\">// 清空缓冲的命令，这会导致所有命令尽快执行完。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> flush();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* HintTarget */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum GENERATE_MIPMAP_HINT            = 0x8192;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* HintMode */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DONT_CARE                      = 0x1100;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FASTEST                        = 0x1101;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NICEST                         = 0x1102;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给某些行为设置建议使用的模式。具体建议需要看执行的情况。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> hint(GLenum target, GLenum mode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回给入的缓冲是否有效。</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isBuffer(WebGLBuffer? buffer);</span><br><span class=\"line\"><span class=\"comment\">// 测试这个上下文的WebGL功能是否开启。</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isEnabled(GLenum cap);</span><br><span class=\"line\"><span class=\"comment\">// 返回 Boolean 值，表示给入的 WebGLFrameBuffer 对象是否有效。</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);</span><br><span class=\"line\"><span class=\"comment\">// 返回一个 Boolean 值，表示给入的 WebGLProgram 是否有效。</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isProgram(WebGLProgram? program);</span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);</span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isShader(WebGLShader? shader);</span><br><span class=\"line\">[WebGLHandlesContextLoss] GLboolean isTexture(WebGLTexture? texture);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为抗锯齿效果设置多重取样覆盖参数。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> sampleCoverage(GLclampf value, GLboolean invert);</span><br></pre></td></tr></tbody></table></figure>\n<h3>视口相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置视口宽度</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> viewport(GLint x, GLint y, GLsizei width, GLsizei height);</span><br><span class=\"line\"><span class=\"comment\">// 设置裁剪框。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> scissor(GLint x, GLint y, GLsizei width, GLsizei height);</span><br></pre></td></tr></tbody></table></figure>\n<h3>缓冲区配置</h3>\n<p><strong>配置缓冲区默认值</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置指定缓冲区为指定的值（参数范围都是 0.0 - 1.0）</span></span><br><span class=\"line\"><span class=\"comment\">// clearColor 为颜色缓冲区指定值 默认 0.0, 0.0, 0.0, 0.0</span></span><br><span class=\"line\"><span class=\"comment\">// clearDepth 为深度缓冲区指定值 默认 1.0</span></span><br><span class=\"line\"><span class=\"comment\">// clearStencil 为模板缓冲区指定值 默认 0</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);</span><br><span class=\"line\"><span class=\"keyword\">void</span> clearDepth(GLclampf depth);</span><br><span class=\"line\"><span class=\"keyword\">void</span> clearStencil(GLint s);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>配置颜色缓冲区处理方式</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 透明混合参数</span></span><br><span class=\"line\"><span class=\"comment\">// blendFunc 的 sfactor dfactor 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ZERO                           = 0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE                            = 1;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SRC_COLOR                      = 0x0300;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE_MINUS_SRC_COLOR            = 0x0301;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SRC_ALPHA                      = 0x0302;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE_MINUS_SRC_ALPHA            = 0x0303;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DST_ALPHA                      = 0x0304;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE_MINUS_DST_ALPHA            = 0x0305;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// blendFunc 的 sfactor 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DST_COLOR                      = 0x0306;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE_MINUS_DST_COLOR            = 0x0307;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SRC_ALPHA_SATURATE             = 0x0308;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// blendEquation 的 mode 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FUNC_ADD                       = 0x8006;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FUNC_SUBTRACT                  = 0x800A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FUNC_REVERSE_SUBTRACT          = 0x800B;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过参数 sfactor 和 dfactor 指定进行混合操作的函数 混合后的颜色如下计算</span></span><br><span class=\"line\"><span class=\"comment\">// 混合后颜色 = 源颜色 * sfactor + 目标颜色 * dfactor</span></span><br><span class=\"line\"><span class=\"comment\">// @param sfactor 见此方法上枚举</span></span><br><span class=\"line\"><span class=\"comment\">// @param dfactor 见此方法上枚举</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> blendFunc(GLenum sfactor, GLenum dfactor);</span><br><span class=\"line\"><span class=\"comment\">// 同上 只是分开设置RGB 和 ALPHA</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> blendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);</span><br><span class=\"line\"><span class=\"comment\">// 设置源和目标混合因子 值范围 在0到1之间</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将RGB混合方程和阿尔法混合方程设置为单个方程。</span></span><br><span class=\"line\"><span class=\"comment\">// 混合方程式确定新像素如何与 WebGLFramebuffer 中的像素组合</span></span><br><span class=\"line\"><span class=\"comment\">// @ext EXT_blend_minmax</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> blendEquation(GLenum mode);</span><br><span class=\"line\"><span class=\"comment\">// 同上 只是分开设置RGB 和 ALPHA</span></span><br><span class=\"line\"><span class=\"comment\">// @ext EXT_blend_minmax</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);</span><br><span class=\"line\"><span class=\"comment\">// 设置在绘制或渲染WebGLFramebuffer时要开启或关闭的颜色分量。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>配置裁剪面</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cullFace 的 mode 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRONT                          = 0x0404;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BACK                           = 0x0405;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRONT_AND_BACK                 = 0x0408;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* FrontFaceDirection */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CW                             = 0x0900;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CCW                            = 0x0901;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置多边形的正面或反面是否要被排除。</span></span><br><span class=\"line\"><span class=\"comment\">// gl.enable(gl.CULL_FACE);</span></span><br><span class=\"line\"><span class=\"comment\">// gl.cullFace(gl.FRONT_AND_BACK);</span></span><br><span class=\"line\"><span class=\"comment\">// gl.getParameter(gl.CULL_FACE_MODE) === gl.FRONT_AND_BACK;</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> cullFace(GLenum mode);</span><br><span class=\"line\"><span class=\"comment\">// 设置多边形的正面使用顺时针还是逆时针绘制表示。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> frontFace(GLenum mode);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>配置深度缓冲区处理方式</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// depthFunc 的 func 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NEVER                          = 0x0200;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LESS                           = 0x0201;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum EQUAL                          = 0x0202;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LEQUAL                         = 0x0203;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum GREATER                        = 0x0204;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NOTEQUAL                       = 0x0205;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum GEQUAL                         = 0x0206;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ALWAYS                         = 0x0207;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置比较输入像素深度和深度缓存值得函数</span></span><br><span class=\"line\"><span class=\"comment\">// gl.enable(gl.DEPTH_TEST);</span></span><br><span class=\"line\"><span class=\"comment\">// gl.depthFunc(gl.NEVER);</span></span><br><span class=\"line\"><span class=\"comment\">// gl.getParameter(gl.DEPTH_FUNC) === gl.NEVER;</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> depthFunc(GLenum func);</span><br><span class=\"line\"><span class=\"comment\">// 设置从规范化设备坐标映射到窗口或视口坐标时的深度范围。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> depthRange(GLclampf zNear, GLclampf zFar);</span><br><span class=\"line\"><span class=\"comment\">// 锁定或者释放深度缓冲区的写入操作</span></span><br><span class=\"line\"><span class=\"comment\">// @param flag false 只读 true 可读写</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> depthMask(GLboolean flag);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>配置线宽</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置线宽。无效</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> lineWidth(GLfloat width);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>配置模板缓冲区处理方式</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* StencilOp */</span></span><br><span class=\"line\"><span class=\"comment\">/* ZERO */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum KEEP                           = 0x1E00;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum REPLACE                        = 0x1E01;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INCR                           = 0x1E02;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DECR                           = 0x1E03;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INVERT                         = 0x150A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INCR_WRAP                      = 0x8507;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DECR_WRAP                      = 0x8508;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时设置前面和背面的模板测试函数，及其引用值。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> stencilFunc(GLenum func, GLint ref, GLuint mask);</span><br><span class=\"line\"><span class=\"comment\">// 可分开设置前面或背面的模板测试函数，及其引用值。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);</span><br><span class=\"line\"><span class=\"comment\">// 同时启用或禁用，前面和背面的模板测试掩码。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> stencilMask(GLuint mask);</span><br><span class=\"line\"><span class=\"comment\">// 可分开启用或禁用，前面和背面的模板测试掩码。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> stencilMaskSeparate(GLenum face, GLuint mask);</span><br><span class=\"line\"><span class=\"comment\">// 同时设置，在前面和背面的模板缓冲区上执行的操作。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> stencilOp(GLenum fail, GLenum zfail, GLenum zpass);</span><br><span class=\"line\"><span class=\"comment\">// 可分开设置，在前面和背面的模板缓冲区上执行的操作。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);</span><br></pre></td></tr></tbody></table></figure>\n<h3>缓冲区相关方法</h3>\n<p><strong>清理缓冲区</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓冲区类型</span></span><br><span class=\"line\"><span class=\"comment\">// 为 gl.clear 的参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_BUFFER_BIT               = 0x00000100;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BUFFER_BIT             = 0x00000400;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum COLOR_BUFFER_BIT               = 0x00004000;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理指定缓缓冲区内容, 可以通过或运算符一次清理多个类型的缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">// @param mask 颜色缓冲区（COLOR_BUFFER_BIT） | 深度缓冲区（DEPTH_BUFFER_BIT） | 模板缓冲区（STENCIL_BUFFER_BIT）</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> clear(GLbitfield mask);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>读取缓冲区</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从颜色缓冲区中读取 x y width height 参数确定的矩形块中的所有像素值 并保存在pixels指定的数组中</span></span><br><span class=\"line\"><span class=\"comment\">// @param x y 选择矩形区域左上角坐标</span></span><br><span class=\"line\"><span class=\"comment\">// @param width height 选择矩形区域的宽 长</span></span><br><span class=\"line\"><span class=\"comment\">// @param format 指定像素值的颜色格式 必须为 gl.RGB</span></span><br><span class=\"line\"><span class=\"comment\">// @param type 指定像素值得数据格式 必须是 gl.UNSIGNED_BYTE</span></span><br><span class=\"line\"><span class=\"comment\">// @param pixels 类型化数组 Unit8Array</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>帧缓冲区</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Framebuffer Object. */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER                    = 0x8D40;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER                   = 0x8D41;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示渲染缓冲区将替代颜色缓冲区中的数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RGBA4                          = 0x8056;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RGB5_A1                        = 0x8057;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RGB565                         = 0x8D62;</span><br><span class=\"line\"><span class=\"comment\">// 表示渲染缓冲区将替代深度缓冲区中的数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_COMPONENT16              = 0x81A5;</span><br><span class=\"line\"><span class=\"comment\">// 表示渲染缓冲区将替代模板缓冲区中的数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_INDEX8                 = 0x8D48;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 帧缓冲区作为 attachment（附件）的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 颜色附件 深度附件 模板附件 模板深度附件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum COLOR_ATTACHMENT0              = 0x8CE0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_ATTACHMENT               = 0x8D00;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_ATTACHMENT             = 0x8D20;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_STENCIL_ATTACHMENT       = 0x821A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ============</span></span><br><span class=\"line\"><span class=\"comment\">// = 渲染缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">// ============</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建渲染缓冲区对象</span></span><br><span class=\"line\">WebGLRenderbuffer? createRenderbuffer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除渲染缓冲区对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 renderbuffer 指定的渲染缓冲区对象绑定在target目标上</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 renderbuffer 为 null 则将已经绑定在target目标上的渲染缓冲区对象解除绑定</span></span><br><span class=\"line\"><span class=\"comment\">// @param target 必须是 gl.RENDERBUFFER</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并初始化渲染缓冲区的数据区</span></span><br><span class=\"line\"><span class=\"comment\">// @param target 必须是 gl.RENDERBUFFER</span></span><br><span class=\"line\"><span class=\"comment\">// @param internalformat 指定渲染缓冲区中的数据格式 见方法上枚举</span></span><br><span class=\"line\"><span class=\"comment\">// @param width height 指定渲染缓冲区的宽度和高度 单位像素</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> renderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==========</span></span><br><span class=\"line\"><span class=\"comment\">// = 帧缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">// ==========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建帧缓冲区对象</span></span><br><span class=\"line\">WebGLFramebuffer? createFramebuffer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除帧缓冲区对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> deleteFramebuffer(WebGLFramebuffer? framebuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定帧缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">// FBO就是由颜色附件（COLOR_ATTACHMENT0)，深度附件（DEPTH_ATTACHMENT），模板附件（STENCIL_ATTACHMENT）组成的一个逻辑存储对象</span></span><br><span class=\"line\"><span class=\"comment\">// RBO是一个2D图像缓冲区，可以用于分配和存储颜色值，深度或者模板值，可以作为FBO的颜色，深度模板附件。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置纹理为 attachment 附件</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level);</span><br><span class=\"line\"><span class=\"comment\">// 设置渲染缓冲区对象为 attachment 附件</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> framebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查帧缓冲区</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLenum checkFramebufferStatus(GLenum target);</span><br></pre></td></tr></tbody></table></figure>\n<h3>缓存对象</h3>\n<p>使用缓存的五个步骤</p>\n<ol>\n<li>createBuffer</li>\n<li>bindBuffer</li>\n<li>bufferData</li>\n<li>vertexAttribPointer</li>\n<li>enableVertexAttribArray</li>\n</ol>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓存对象</span></span><br><span class=\"line\"><span class=\"comment\">// bindBuffer 第一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ARRAY_BUFFER                   = 0x8892;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ELEMENT_ARRAY_BUFFER           = 0x8893;</span><br><span class=\"line\"><span class=\"comment\">// const GLenum ARRAY_BUFFER_BINDING           = 0x8894;</span></span><br><span class=\"line\"><span class=\"comment\">// const GLenum ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绘制模式</span></span><br><span class=\"line\"><span class=\"comment\">// 下文中的usage参数值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STREAM_DRAW                    = 0x88E0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STATIC_DRAW                    = 0x88E4;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DYNAMIC_DRAW                   = 0x88E8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">// vertexAttribPointer 中参数type的取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BYTE                           = 0x1400;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_BYTE                  = 0x1401;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SHORT                          = 0x1402;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_SHORT                 = 0x1403;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INT                            = 0x1404;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_INT                   = 0x1405;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT                          = 0x1406;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建缓冲区对象</span></span><br><span class=\"line\">WebGLBuffer? createBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 允许使用buffer表示的缓冲区对象并将其绑定到target表示的目标上</span></span><br><span class=\"line\"><span class=\"comment\">// @param target </span></span><br><span class=\"line\"><span class=\"comment\">//        ARRAY_BUFFER 表示缓冲区对象中包含顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">//        ELEMENT_ARRAY_BUFFER 表示缓冲去对象中包含了顶点的索引值</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> bindBuffer(GLenum target, WebGLBuffer? buffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开辟存储空间，向绑定在target上的缓冲区对象写入数据data</span></span><br><span class=\"line\"><span class=\"comment\">// @param target 同上</span></span><br><span class=\"line\"><span class=\"comment\">// @param data 类型化数组 比如：Float32Array...</span></span><br><span class=\"line\"><span class=\"comment\">// @param usage 优化效率 可以是以下值：</span></span><br><span class=\"line\"><span class=\"comment\">//        STATIC_DRAW 只会向缓冲区写入一次数据 需要绘制很多次</span></span><br><span class=\"line\"><span class=\"comment\">//        STREAM_DRAW 只会向缓冲区写入一次数据 需要绘制若干次</span></span><br><span class=\"line\"><span class=\"comment\">//        DYNAMIC_DRAW 会向缓冲区对象中多次写入数据 并绘制很多次</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> bufferData(GLenum target, [AllowShared] BufferSource? data, GLenum usage);</span><br><span class=\"line\"><span class=\"keyword\">void</span> bufferData(GLenum target, GLsizeiptr size, GLenum usage);</span><br><span class=\"line\"><span class=\"keyword\">void</span> bufferSubData(GLenum target, GLintptr offset, [AllowShared] BufferSource data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将绑定到ARRAY_BUFFER的缓冲区对象分配给index指定的attribute变量</span></span><br><span class=\"line\"><span class=\"comment\">// @param index 指向attribute变量</span></span><br><span class=\"line\"><span class=\"comment\">// @param size 指定缓冲区中每个顶点分量的个数</span></span><br><span class=\"line\"><span class=\"comment\">// @param type 数据格式 见上面的枚举</span></span><br><span class=\"line\"><span class=\"comment\">// @param normalized 是否将浮点型数据归一化到[0, 1]或者[-1, 1]区间</span></span><br><span class=\"line\"><span class=\"comment\">// @param stride 指定相邻两个顶点之间的字节数 默认是0</span></span><br><span class=\"line\"><span class=\"comment\">// @param offset 指定缓冲区对象中的偏移量 单位字节 可以利用这个偏移量赋值多个attribute</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启index对应的attribute对象</span></span><br><span class=\"line\"><span class=\"comment\">// 开启后不能通过 vertexAttrib[1234]f 传值</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> enableVertexAttribArray(GLuint index);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭index对应的attribute对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> disableVertexAttribArray(GLuint index);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除参数buffer表示的缓冲区对象</span></span><br><span class=\"line\"><span class=\"comment\">// @param buffer 缓冲区对象 由createBuffer创建</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> deleteBuffer(WebGLBuffer? buffer);</span><br></pre></td></tr></tbody></table></figure>\n<h3>attribute 相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取由 name 参数指定的 attribute 变量存储地址</span></span><br><span class=\"line\"><span class=\"comment\">// @param program 指定包含顶点或者片元着色器的程序对象</span></span><br><span class=\"line\"><span class=\"comment\">// @param name 获取其存储的 attribute 变量名称，最大长度256字节</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLint getAttribLocation(WebGLProgram program, DOMString name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定顶点索引到属性变量</span></span><br><span class=\"line\"><span class=\"comment\">// 使用缓冲区数据的时候需要用到的方法</span></span><br><span class=\"line\"><span class=\"comment\">// @param index 指定要绑定的通用顶点的索引 这个值直接赋值给 vertexAttribPointer 的 index 参数</span></span><br><span class=\"line\"><span class=\"comment\">// @param name 指定变量名</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 index 和 getAttribLocation 返回值是一样的</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> bindAttribLocation(WebGLProgram program, GLuint index, DOMString name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数据传给由index参数指定的attribute变量</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib1f(GLuint index, GLfloat x);</span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib2f(GLuint index, GLfloat x, GLfloat y);</span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);</span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);</span><br><span class=\"line\"><span class=\"comment\">// 接收参数为 Float32Array 数组</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib1fv(GLuint index, Float32List values);</span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib2fv(GLuint index, Float32List values);</span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib3fv(GLuint index, Float32List values);</span><br><span class=\"line\"><span class=\"keyword\">void</span> vertexAttrib4fv(GLuint index, Float32List values);</span><br></pre></td></tr></tbody></table></figure>\n<h3>uniform 相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Uniform Types */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT_VEC2                     = 0x8B50;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT_VEC3                     = 0x8B51;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT_VEC4                     = 0x8B52;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INT_VEC2                       = 0x8B53;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INT_VEC3                       = 0x8B54;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INT_VEC4                       = 0x8B55;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BOOL                           = 0x8B56;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BOOL_VEC2                      = 0x8B57;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BOOL_VEC3                      = 0x8B58;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BOOL_VEC4                      = 0x8B59;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT_MAT2                     = 0x8B5A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT_MAT3                     = 0x8B5B;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FLOAT_MAT4                     = 0x8B5C;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLER_2D                     = 0x8B5E;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLER_CUBE                   = 0x8B60;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定名称的 uniform 变量存储位置</span></span><br><span class=\"line\"><span class=\"comment\">// @param program 制定的包含顶点或者片元着色器的程序对象</span></span><br><span class=\"line\"><span class=\"comment\">// @param name 指定想要获取其存储位置的uniform变量名称 最大长度256字节</span></span><br><span class=\"line\">WebGLUniformLocation? getUniformLocation(WebGLProgram program, DOMString name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数据传给location指定的uniform变量</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform1f(WebGLUniformLocation? location, GLfloat x);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform1i(WebGLUniformLocation? location, GLint x);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform2i(WebGLUniformLocation? location, GLint x, GLint y);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform1fv(WebGLUniformLocation? location, Float32List v);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform2fv(WebGLUniformLocation? location, Float32List v);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform3fv(WebGLUniformLocation? location, Float32List v);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform4fv(WebGLUniformLocation? location, Float32List v);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform1iv(WebGLUniformLocation? location, Int32List v);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform2iv(WebGLUniformLocation? location, Int32List v);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform3iv(WebGLUniformLocation? location, Int32List v);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniform4iv(WebGLUniformLocation? location, Int32List v);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @param 是否对矩阵进行转置 默认 false 在webgl中必须是false</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);</span><br><span class=\"line\"><span class=\"keyword\">void</span> uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);</span><br></pre></td></tr></tbody></table></figure>\n<h3>texture 相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pixelStorei 中参数pname取值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对图像进行Y轴反转，默认false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNPACK_FLIP_Y_WEBGL            = 0x9240; </span><br><span class=\"line\"><span class=\"comment\">// 将图像RGB颜色值每一个分量乘以A 默认false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// activeTexture 方法使用的枚举常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE0                       = 0x84C0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE1                       = 0x84C1;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE2                       = 0x84C2;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE3                       = 0x84C3;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE4                       = 0x84C4;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE5                       = 0x84C5;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE6                       = 0x84C6;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE7                       = 0x84C7;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE8                       = 0x84C8;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE9                       = 0x84C9;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE10                      = 0x84CA;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE11                      = 0x84CB;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE12                      = 0x84CC;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE13                      = 0x84CD;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE14                      = 0x84CE;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE15                      = 0x84CF;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE16                      = 0x84D0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE17                      = 0x84D1;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE18                      = 0x84D2;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE19                      = 0x84D3;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE20                      = 0x84D4;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE21                      = 0x84D5;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE22                      = 0x84D6;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE23                      = 0x84D7;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE24                      = 0x84D8;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE25                      = 0x84D9;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE26                      = 0x84DA;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE27                      = 0x84DB;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE28                      = 0x84DC;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE29                      = 0x84DD;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE30                      = 0x84DE;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE31                      = 0x84DF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bindTexture texParameterf texParameteri texImage2D 的 target 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_2D                     = 0x0DE1;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP               = 0x8513;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// texParameterf pname 参数</span></span><br><span class=\"line\"><span class=\"comment\">// texParameteri pname 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_MAG_FILTER             = 0x2800;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_MIN_FILTER             = 0x2801;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_WRAP_S                 = 0x2802;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_WRAP_T                 = 0x2803;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// texParameterf param 参数 当 pname = TEXTURE_MAG_FILTER | TEXTURE_MIN_FILTER</span></span><br><span class=\"line\"><span class=\"comment\">// texParameteri param 参数 当 pname = TEXTURE_MAG_FILTER | TEXTURE_MIN_FILTER</span></span><br><span class=\"line\"><span class=\"comment\">// 以下是非金字塔纹理常量</span></span><br><span class=\"line\"><span class=\"comment\">// 使用原纹理上距离映射后像素（新像素）中心最近的那个像素的颜色值，作为新像素的值（使用曼哈顿距离）</span></span><br><span class=\"line\"><span class=\"comment\">// 曼哈顿距离又称直角距离、棋盘距离。如(x1, y1) (x2, y2)的曼哈顿距离是 |x1 - x2| + |y1 - y2|</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NEAREST                        = 0x2600;</span><br><span class=\"line\"><span class=\"comment\">// 使用距离新像素中心最近的四个像素的颜色值得加权平均，作为新像素的值（与 NEAREST对比，该方法图像质量更好，但是会有比较大的开销）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINEAR                         = 0x2601;</span><br><span class=\"line\"><span class=\"comment\">// 以下是金字塔纹理常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NEAREST_MIPMAP_NEAREST         = 0x2700;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINEAR_MIPMAP_NEAREST          = 0x2701;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NEAREST_MIPMAP_LINEAR          = 0x2702;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINEAR_MIPMAP_LINEAR           = 0x2703;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// texParameterf param 参数 当 pname = TEXTURE_WRAP_S | TEXTURE_WRAP_T</span></span><br><span class=\"line\"><span class=\"comment\">// texParameteri param 参数 当 pname = TEXTURE_WRAP_S | TEXTURE_WRAP_T</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 平铺式的重复纹理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum REPEAT                         = 0x2901; </span><br><span class=\"line\"><span class=\"comment\">// 镜像对称式的重复纹理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CLAMP_TO_EDGE                  = 0x812F; </span><br><span class=\"line\"><span class=\"comment\">// 使用纹理图像的边缘值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MIRRORED_REPEAT                = 0x8370; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// texImage2D 的 internalformat 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ALPHA                          = 0x1906;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RGB                            = 0x1907;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RGBA                           = 0x1908;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LUMINANCE                      = 0x1909;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LUMINANCE_ALPHA                = 0x190A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// texImage2D 的 type 参数</span></span><br><span class=\"line\"><span class=\"comment\">// 前文已定义</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_BYTE; </span><br><span class=\"line\"><span class=\"comment\">// RGBA</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_SHORT_4_4_4_4         = 0x8033; </span><br><span class=\"line\"><span class=\"comment\">// RGBA</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_SHORT_5_5_5_1         = 0x8034; </span><br><span class=\"line\"><span class=\"comment\">// RGB</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNSIGNED_SHORT_5_6_5           = 0x8363; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建纹理对象以存储纹理图像</span></span><br><span class=\"line\">WebGLTexture? createTexture();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用texture删除纹理对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> deleteTexture(WebGLTexture? texture);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 pname 和 param 指定的方式加载得到的图像</span></span><br><span class=\"line\"><span class=\"comment\">// @param pname 见上面的枚举</span></span><br><span class=\"line\"><span class=\"comment\">// @param param 指定 非0为true、0为false 必须是整数</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> pixelStorei(GLenum pname, GLint param);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 激活纹理单元 参数是常量 gl.TEXTURE&lt;I&gt; 见上面枚举</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> activeTexture(GLenum texture);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启 texture 指定的纹理对象，并将其绑定到 target 上。 </span></span><br><span class=\"line\"><span class=\"comment\">// 如果已经通过 gl.activeTexture 激活了某个纹理单元，则纹理对象也会绑定到这个纹理单元上</span></span><br><span class=\"line\"><span class=\"comment\">// @param target 绑定类型 TEXTURE_CUBE_MAP（立方体纹理） | TEXTURE_2D （平面纹理）</span></span><br><span class=\"line\"><span class=\"comment\">// @param texture 绑定的纹理单元</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> bindTexture(GLenum target, WebGLTexture? texture);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置纹理，将param值赋给绑定到目标的纹理对象的pname参数上</span></span><br><span class=\"line\"><span class=\"comment\">// @param target 同上</span></span><br><span class=\"line\"><span class=\"comment\">// @param pname 见上面枚举 纹理参数</span></span><br><span class=\"line\"><span class=\"comment\">// @param param 见上面枚举 纹理参数的值</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> texParameterf(GLenum target, GLenum pname, GLfloat param);</span><br><span class=\"line\"><span class=\"keyword\">void</span> texParameteri(GLenum target, GLenum pname, GLint param);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 source 指定的图像分配给绑定到目标上的纹理对象</span></span><br><span class=\"line\"><span class=\"comment\">// @param target 同上</span></span><br><span class=\"line\"><span class=\"comment\">// @param level 传入0 （该参数是为金字塔纹理准备的）</span></span><br><span class=\"line\"><span class=\"comment\">// @param internalformat 图像的内部格式 见上枚举</span></span><br><span class=\"line\"><span class=\"comment\">// @param format 纹理数据的格式 必须使用与 internalformat 相同的值</span></span><br><span class=\"line\"><span class=\"comment\">// @param type 纹理数据的类型</span></span><br><span class=\"line\"><span class=\"comment\">// @param source 包含纹理图像的Image对象</span></span><br><span class=\"line\"><span class=\"comment\">// May throw DOMException</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> texImage2D(GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source);</span><br><span class=\"line\"><span class=\"keyword\">void</span> texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定一个为压缩格式的2D纹理图片。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, [AllowShared] ArrayBufferView data);</span><br><span class=\"line\"><span class=\"comment\">// 指定一个为压缩格式的2D纹理子图片。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, [AllowShared] ArrayBufferView data);</span><br><span class=\"line\"><span class=\"comment\">// 复制2D纹理图片。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> copyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);</span><br><span class=\"line\"><span class=\"comment\">// 复制2D纹理子图片。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为 WebGLTexture 对象生成一组mip纹理映射。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> generateMipmap(GLenum target);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新当前 WebGLTexture 的子矩形。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);</span><br><span class=\"line\"><span class=\"keyword\">void</span> texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source); <span class=\"comment\">// May throw DOMException</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后指定纹理单元编号</span></span><br><span class=\"line\"><span class=\"comment\">// gl.uniform1i(sampler, 0);</span></span><br></pre></td></tr></tbody></table></figure>\n<h3>启用功能</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// enable disable 的 cap 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CULL_FACE                      = 0x0B44;</span><br><span class=\"line\"><span class=\"comment\">// 混合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND                          = 0x0BE2;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DITHER                         = 0x0BD0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_TEST                   = 0x0B90;</span><br><span class=\"line\"><span class=\"comment\">// 隐藏面消除</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_TEST                     = 0x0B71;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SCISSOR_TEST                   = 0x0C11;</span><br><span class=\"line\"><span class=\"comment\">// 多边形位移 （解决深度冲突问题）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum POLYGON_OFFSET_FILL            = 0x8037;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLE_COVERAGE                = 0x80A0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用功能</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> enable(GLenum cap);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭功能</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> disable(GLenum cap);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决深度冲突</span></span><br><span class=\"line\"><span class=\"comment\">// gl.enable(POLYGON_OFFSET_FILL);</span></span><br><span class=\"line\"><span class=\"comment\">// 指定加到每个顶点绘制后Z值上的偏移量，偏移量按照公式 m * factor + r * units 计算，其中m代表顶点所在表面</span></span><br><span class=\"line\"><span class=\"comment\">// 相对于观察者的实现角度，而r表示硬件能够区分两个Z值之差的最小值</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> polygonOffset(GLfloat factor, GLfloat units);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 虽然上面的方法可以使用，但是在渲染器中用起来还是很麻烦的。</span></span><br><span class=\"line\"><span class=\"comment\">// 解决深度冲突有更好的方式，就是缩小远近裁剪面的距离</span></span><br></pre></td></tr></tbody></table></figure>\n<h3>着色器相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// createShader 的 type 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAGMENT_SHADER                  = 0x8B30;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_SHADER                    = 0x8B31;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getShaderParameter 的 pname 参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SHADER_TYPE                      = 0x8B4F;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DELETE_STATUS                    = 0x8B80;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum COMPILE_STATUS                   = 0x8B81;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建由type指定的着色器对象</span></span><br><span class=\"line\"><span class=\"comment\">// @param type 见上枚举</span></span><br><span class=\"line\">WebGLShader? createShader(GLenum type);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 shader 指定的着色器对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> deleteShader(WebGLShader? shader);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 source 指定的字符串形式的代码传入shader指定的着色器 如果之前已经向shader传入了代码 旧的代码就会被替换掉</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> shaderSource(WebGLShader shader, DOMString source);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译 shader 指定的着色器中的源代码</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> compileShader(WebGLShader shader);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取 shader 指定的着色器中 pname 指定的参数信息</span></span><br><span class=\"line\"><span class=\"comment\">// @param pname 见上枚举</span></span><br><span class=\"line\">any getShaderParameter(WebGLShader shader, GLenum pname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 getShaderParameter(shader, COMPILE_STATUS) 返回false </span></span><br><span class=\"line\"><span class=\"comment\">// 则可以通过 此函数获取 指定shader 的信息日志</span></span><br><span class=\"line\">DOMString? getShaderInfoLog(WebGLShader shader);</span><br></pre></td></tr></tbody></table></figure>\n<h3>着色器程序相关</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getProgramParameter 的 pname 参数</span></span><br><span class=\"line\"><span class=\"comment\">// 着色器相关 章节已定义</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DELETE_STATUS; </span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINK_STATUS                      = 0x8B82;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VALIDATE_STATUS                  = 0x8B83;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ATTACHED_SHADERS                 = 0x8B85;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ACTIVE_UNIFORMS                  = 0x8B86;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ACTIVE_ATTRIBUTES                = 0x8B89;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建着色器程序对象</span></span><br><span class=\"line\">WebGLProgram? createProgram();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除着色器程序对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> deleteProgram(WebGLProgram? program);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 shader 指定的着色器对象分配给 program 指定的程序对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> attachShader(WebGLProgram program, WebGLShader shader);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消 shader 指定的着色器对 program 对象的分配</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> detachShader(WebGLProgram program, WebGLShader shader);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接 program 指定的程序对象中的着色器</span></span><br><span class=\"line\"><span class=\"comment\">// 目的：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 保证顶点着色器 和 片元着色器的varying变量同名同类型，且一一对应</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 保证顶点着色器对每个varying变量赋了值</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 保证顶点着色器 和 片元着色器中的同名 uniform 变量也是同类型的 无需一一对应</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 保证着色器中的attribute、uniform、varying变量的个数没有超过着色器上限</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> linkProgram(WebGLProgram program);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取 program 指定的程序对象中 pname 指定的参数信息</span></span><br><span class=\"line\"><span class=\"comment\">// @param pname 见上枚举</span></span><br><span class=\"line\">any getProgramParameter(WebGLProgram program, GLenum pname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果通过 getProgramParameter(LINK_STATUS) 获得返回值 为 false</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过 此函数获取 program 指定的程序对象的信息日志</span></span><br><span class=\"line\">DOMString? getProgramInfoLog(WebGLProgram program);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证 WebGLProgram </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> validateProgram(WebGLProgram program);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 告知 WEBGL 系统绘制时使用的 program 对象</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> useProgram(WebGLProgram? program);</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>获取着色器程序相关代码</strong></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> program = gl.createProgram();</span><br><span class=\"line\">gl.attacheShader(program, vertexShader);</span><br><span class=\"line\">gl.attacheShader(program, fragmentShader);</span><br><span class=\"line\">gl.linkProgram(program);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!gl.getProgramParameter(program, gl.LINK_STATUS)){</span><br><span class=\"line\">  <span class=\"keyword\">var</span> info = gl.getProgramInfoLog(program);</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'Could not compile WebGL program. \\n\\n '</span> + info);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3>绘制相关方法</h3>\n<p>绘制缓存中的顶点数据。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绘制的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 为 gl.drawArrays、gl.drawElements 第一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum POINTS                         = 0x0000;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINES                          = 0x0001;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINE_LOOP                      = 0x0002;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINE_STRIP                     = 0x0003;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TRIANGLES                      = 0x0004;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TRIANGLE_STRIP                 = 0x0005;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TRIANGLE_FAN                   = 0x0006;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行绘制， 按照mode参数指定的方式绘制图形</span></span><br><span class=\"line\"><span class=\"comment\">// @param model 绘制模式。</span></span><br><span class=\"line\"><span class=\"comment\">// @param first 指定从哪个定点开始绘制</span></span><br><span class=\"line\"><span class=\"comment\">// @param count 指定绘制需要用到多少个顶点</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> drawArrays(GLenum mode, GLint first, GLsizei count);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行绘制，按照mode参数制定的方式，根据绑定到 ELEMENT_ARRAY_BUFFER 的缓冲区中的顶点索引绘制图形</span></span><br><span class=\"line\"><span class=\"comment\">// @param model 绘制模式。</span></span><br><span class=\"line\"><span class=\"comment\">// @param count 指定绘制顶点的个数</span></span><br><span class=\"line\"><span class=\"comment\">// @param type 指定索引值数据类型。包括：UNSIGNED_BYTE、UNSIGNED_SHORT、UNSIGNED_INT</span></span><br><span class=\"line\"><span class=\"comment\">// @param offset 指定索引数组中绘制的偏移位置，以字节为单位</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);</span><br></pre></td></tr></tbody></table></figure>\n<h3>查询状态参数</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前激活的材质枚举值 getParameter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ACTIVE_TEXTURE                 = 0x84E0;</span><br><span class=\"line\"><span class=\"comment\">// 获取材质最大支持数量 getParameter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器可使用最大 attribute 数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_VERTEX_ATTRIBS               = 0x8869;</span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器可使用 uniform 最大数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;</span><br><span class=\"line\"><span class=\"comment\">// 可使用最大 varying 变量数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_VARYING_VECTORS              = 0x8DFC;</span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器纹理单元最大数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;</span><br><span class=\"line\"><span class=\"comment\">// 片元着色器纹理单元最大数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_TEXTURE_IMAGE_UNITS          = 0x8872;</span><br><span class=\"line\"><span class=\"comment\">// 当前片元着色器可使用 uniform 最大数量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 着色器语言版本</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SHADING_LANGUAGE_VERSION         = 0x8B8C;</span><br><span class=\"line\"><span class=\"comment\">// 当前运行的着色器程序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CURRENT_PROGRAM                  = 0x8B8D;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取混合方程</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_EQUATION                 = 0x8009;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_EQUATION_RGB             = 0x8009;   <span class=\"comment\">/* same as BLEND_EQUATION */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_EQUATION_ALPHA           = 0x883D;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 面消除查询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CULL_FACE_MODE                 = 0x0B45;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Separate Blend Functions */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_DST_RGB                  = 0x80C8;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_SRC_RGB                  = 0x80C9;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_DST_ALPHA                = 0x80CA;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_SRC_ALPHA                = 0x80CB;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CONSTANT_COLOR                 = 0x8001;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE_MINUS_CONSTANT_COLOR       = 0x8002;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CONSTANT_ALPHA                 = 0x8003;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ONE_MINUS_CONSTANT_ALPHA       = 0x8004;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLEND_COLOR                    = 0x8005;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// buffer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BUFFER_SIZE                    = 0x8764;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BUFFER_USAGE                   = 0x8765;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CURRENT_VERTEX_ATTRIB          = 0x8626;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ErrorCode */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NO_ERROR                       = 0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INVALID_ENUM                   = 0x0500;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INVALID_VALUE                  = 0x0501;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INVALID_OPERATION              = 0x0502;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum OUT_OF_MEMORY                  = 0x0505;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GetPName */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LINE_WIDTH                     = 0x0B21;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ALIASED_POINT_SIZE_RANGE       = 0x846D;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ALIASED_LINE_WIDTH_RANGE       = 0x846E;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRONT_FACE                     = 0x0B46;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_RANGE                    = 0x0B70;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_WRITEMASK                = 0x0B72;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_CLEAR_VALUE              = 0x0B73;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_FUNC                     = 0x0B74;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_CLEAR_VALUE            = 0x0B91;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_FUNC                   = 0x0B92;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_FAIL                   = 0x0B94;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_PASS_DEPTH_FAIL        = 0x0B95;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_PASS_DEPTH_PASS        = 0x0B96;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_REF                    = 0x0B97;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_VALUE_MASK             = 0x0B93;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_WRITEMASK              = 0x0B98;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_FUNC              = 0x8800;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_FAIL              = 0x8801;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_REF               = 0x8CA3;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_VALUE_MASK        = 0x8CA4;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BACK_WRITEMASK         = 0x8CA5;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VIEWPORT                       = 0x0BA2;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SCISSOR_BOX                    = 0x0C10;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SCISSOR_TEST */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum COLOR_CLEAR_VALUE              = 0x0C22;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum COLOR_WRITEMASK                = 0x0C23;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNPACK_ALIGNMENT               = 0x0CF5;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum PACK_ALIGNMENT                 = 0x0D05;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_TEXTURE_SIZE               = 0x0D33;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_VIEWPORT_DIMS              = 0x0D3A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SUBPIXEL_BITS                  = 0x0D50;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RED_BITS                       = 0x0D52;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum GREEN_BITS                     = 0x0D53;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BLUE_BITS                      = 0x0D54;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum ALPHA_BITS                     = 0x0D55;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_BITS                     = 0x0D56;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum STENCIL_BITS                   = 0x0D57;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum POLYGON_OFFSET_UNITS           = 0x2A00;</span><br><span class=\"line\"><span class=\"comment\">/* POLYGON_OFFSET_FILL */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum POLYGON_OFFSET_FACTOR          = 0x8038;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_BINDING_2D             = 0x8069;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLE_BUFFERS                 = 0x80A8;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLES                        = 0x80A9;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLE_COVERAGE_VALUE          = 0x80AA;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum SAMPLE_COVERAGE_INVERT         = 0x80AB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum COMPRESSED_TEXTURE_FORMATS     = 0x86A3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* PixelFormat */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_COMPONENT                = 0x1902;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* StringName */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VENDOR                         = 0x1F00;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERER                       = 0x1F01;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERSION                        = 0x1F02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE                        = 0x1702;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_BINDING_CUBE_MAP       = 0x8514;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Vertex Arrays */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Read Format */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum IMPLEMENTATION_COLOR_READ_TYPE   = 0x8B9A;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Shader Precision-Specified Types */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LOW_FLOAT                      = 0x8DF0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MEDIUM_FLOAT                   = 0x8DF1;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum HIGH_FLOAT                     = 0x8DF2;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum LOW_INT                        = 0x8DF3;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MEDIUM_INT                     = 0x8DF4;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum HIGH_INT                       = 0x8DF5;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum DEPTH_STENCIL                  = 0x84F9;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_WIDTH             = 0x8D42;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_HEIGHT            = 0x8D43;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_RED_SIZE          = 0x8D50;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_GREEN_SIZE        = 0x8D51;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_BLUE_SIZE         = 0x8D52;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_ALPHA_SIZE        = 0x8D53;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_DEPTH_SIZE        = 0x8D54;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_STENCIL_SIZE      = 0x8D55;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum NONE                           = 0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_COMPLETE                      = 0x8CD5;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum FRAMEBUFFER_BINDING            = 0x8CA6;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum RENDERBUFFER_BINDING           = 0x8CA7;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum MAX_RENDERBUFFER_SIZE          = 0x84E8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum INVALID_FRAMEBUFFER_OPERATION  = 0x0506;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum CONTEXT_LOST_WEBGL                 = 0x9242;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;</span><br><span class=\"line\"><span class=\"keyword\">const</span> GLenum BROWSER_DEFAULT_WEBGL              = 0x9244;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过查询参数获取值</span></span><br><span class=\"line\">any getParameter(GLenum pname);</span><br><span class=\"line\">any getTexParameter(GLenum target, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 查询着色器相关参数</span></span><br><span class=\"line\">any getShaderParameter(WebGLShader shader, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 查询着色器程序相关参数</span></span><br><span class=\"line\">any getProgramParameter(WebGLProgram program, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 返回激活状态的attribute变量信息。</span></span><br><span class=\"line\">WebGLActiveInfo? getActiveAttrib(WebGLProgram program, GLuint index);</span><br><span class=\"line\"><span class=\"comment\">// 返回激活状态的uniform 变量信息。</span></span><br><span class=\"line\">WebGLActiveInfo? getActiveUniform(WebGLProgram program, GLuint index);</span><br><span class=\"line\"><span class=\"comment\">// 返回附加在 WebGLProgram 上的 WebGLShader 对象的列表</span></span><br><span class=\"line\">sequence&lt;WebGLShader&gt;? getAttachedShaders(WebGLProgram program);</span><br><span class=\"line\"><span class=\"comment\">// 返回缓冲信息。</span></span><br><span class=\"line\">any getBufferParameter(GLenum target, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 返回错误信息。</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLenum getError();</span><br><span class=\"line\"><span class=\"comment\">// 返回帧缓冲区的信息。</span></span><br><span class=\"line\">any getFramebufferAttachmentParameter(GLenum target, GLenum attachment, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 返回渲染缓冲区的信息。</span></span><br><span class=\"line\">any getRenderbufferParameter(GLenum target, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 返回一个描述着色器数字类型精度的WebGLShaderPrecisionFormat 对象。</span></span><br><span class=\"line\">WebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);</span><br><span class=\"line\"><span class=\"comment\">// 以字符串形式返回 WebGLShader 的源码。</span></span><br><span class=\"line\">DOMString? getShaderSource(WebGLShader shader);</span><br><span class=\"line\"><span class=\"comment\">// 返回指定位置的uniform 变量。</span></span><br><span class=\"line\">any getUniform(WebGLProgram program, WebGLUniformLocation location);</span><br><span class=\"line\"><span class=\"comment\">// 返回指定位置的顶点attribute变量。</span></span><br><span class=\"line\">any getVertexAttrib(GLuint index, GLenum pname);</span><br><span class=\"line\"><span class=\"comment\">// 获取给定索引的顶点attribute位置。</span></span><br><span class=\"line\">[WebGLHandlesContextLoss] GLintptr getVertexAttribOffset(GLuint index, GLenum pname);</span><br></pre></td></tr></tbody></table></figure>\n<h3>扩展</h3>\n<p>通过扩展基本上能使 <code>WebGL1</code> 拥有 <code>WebGL2</code> 的能力。</p>\n<ol>\n<li>获取扩展以及扩展支持信息</li>\n</ol>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取扩展</span></span><br><span class=\"line\">object? getExtension(DOMString name);</span><br><span class=\"line\"><span class=\"comment\">// 获取扩展支持信息</span></span><br><span class=\"line\">sequence&lt;DOMString&gt;? getSupportedExtensions();</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>使用扩展字符串获取扩展对象</li>\n</ol>\n<div class=\"table-responsive\"><table class=\"table table-condensed table-hover\">\n<thead>\n<tr>\n<th>扩展名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ANGLE_instanced_arrays</td>\n<td>允许绘制多次同样的一个或者多个对象<br>条件：分享顶点数据、原始计数和类型</td>\n</tr>\n<tr>\n<td>EXT_blend_minmax</td>\n<td>通过添加两个新的混合方程来扩展混合能力</td>\n</tr>\n<tr>\n<td>EXT_color_buffer_float</td>\n<td>添加渲染各种浮点格式的能力</td>\n</tr>\n<tr>\n<td>EXT_color_buffer_half_float</td>\n<td>添加渲染各种16位浮点格式的能力</td>\n</tr>\n<tr>\n<td>EXT_disjoint_timer_query</td>\n<td>提供一种测量一组GL命令的持续时间的方法，<br>不会影响渲染管道的稳定性</td>\n</tr>\n<tr>\n<td>EXT_frag_depth</td>\n<td>能够在片段着色器中设置片段深度值</td>\n</tr>\n<tr>\n<td>EXT_sRGB</td>\n<td>为 FrameBuffer 提供sRGB支持</td>\n</tr>\n<tr>\n<td>EXT_shader_texture_lod</td>\n<td>为着色器提供LOD能力</td>\n</tr>\n<tr>\n<td>EXT_texture_filter_anisotropic</td>\n<td>提高斜角观察质量</td>\n</tr>\n<tr>\n<td>OES_element_index_uint</td>\n<td>使 drawElements 支持 UNSIGNED_INT 类型</td>\n</tr>\n<tr>\n<td>OES_standard_derivatives</td>\n<td>为着色器提供 <code>dFdx/dFdy/fwidth</code> 函数</td>\n</tr>\n<tr>\n<td>OES_texture_float</td>\n<td>为材质添加 FLOAT 类型</td>\n</tr>\n<tr>\n<td>OES_texture_float_linear</td>\n<td>允许材质的线性过滤</td>\n</tr>\n<tr>\n<td>OES_texture_half_float</td>\n<td>为材质添加 16 位支持</td>\n</tr>\n<tr>\n<td>OES_texture_half_float_linear</td>\n<td>允许16 位材质精度的线性过滤</td>\n</tr>\n<tr>\n<td>OES_vertex_array_object</td>\n<td>提供压缩顶点数组的方法，指向不同顶点数据缓存</td>\n</tr>\n<tr>\n<td>WEBGL_color_buffer_float</td>\n<td>允许输出32位颜色缓冲</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_astc</td>\n<td>exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_atc</td>\n<td>exposes 3 ATC compressed texture formats.</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_etc</td>\n<td>exposes 10 ETC/EAC compressed texture formats</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_etc1</td>\n<td>exposes the ETC1 compressed texture format.</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_pvrtc</td>\n<td>exposes four PVRTC compressed texture formats.</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_s3tc</td>\n<td>exposes four S3TC compressed texture formats.</td>\n</tr>\n<tr>\n<td>WEBGL_compressed_texture_s3tc_srgb</td>\n<td>exposes four S3TC compressed texture formats for the sRGB colorspace.</td>\n</tr>\n<tr>\n<td>WEBGL_debug_renderer_info</td>\n<td>获取渲染信息（公司等）</td>\n</tr>\n<tr>\n<td>WEBGL_debug_shaders</td>\n<td>获取着色器源码信息</td>\n</tr>\n<tr>\n<td>WEBGL_depth_texture</td>\n<td>定义深度和深度模板材质</td>\n</tr>\n<tr>\n<td>WEBGL_draw_buffers</td>\n<td>允许着色器一次性输出多张材质，对延迟渲染大有帮助</td>\n</tr>\n<tr>\n<td>WEBGL_lose_context</td>\n<td>暴露上下文丢失和恢复函数</td>\n</tr>\n</tbody>\n</table></div>\n<h2>引用</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext\">WebGLRenderingContext</a></li>\n</ul>\n<blockquote>\n<p>另外：欢迎邮件交流。</p>\n</blockquote>\n","hasMore":true,"tags":["WebGL","API"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【WebGL】WebGL API 详解\ntags:\n  - WebGL\n  - API\ncategories: 三维技术\ndate: 2020-01-22\nstatus: published\n\n---\n\n基于 [WebGL Specifications](../../DATA/webgl.idl) 最全面的API释疑。\n\n> 20201224 更新，删除其他标题，分类到对应标题下并添加注释\n\n<!-- more -->\n\n## 类型以及对象定义\n\n这部分内容主要定义一部分类型和数据结构。\n\n```js\ntypedef unsigned long  GLenum;\ntypedef boolean        GLboolean;\ntypedef unsigned long  GLbitfield;\n\ntypedef byte           GLbyte;\ntypedef short          GLshort;\ntypedef long           GLint;\ntypedef long           GLsizei;\ntypedef long long      GLintptr;\ntypedef long long      GLsizeiptr;\n\n// 这个类型应该是 无符号整型 8位\n// 但是Web IDL中并不存在这种类型\n// 所以用 octet 代替 占位\ntypedef octet          GLubyte;\ntypedef unsigned short GLushort;\ntypedef unsigned long  GLuint;\ntypedef unrestricted float GLfloat;\ntypedef unrestricted float GLclampf;\n\n// 由 WebGLContextAttributes 引用\nenum WebGLPowerPreference { \"default\", \"low-power\", \"high-performance\" };\n\n// 获取上下文时支持的参数\n// getContext('webgl', <WebGLContextAttributes>)\ndictionary WebGLContextAttributes {\n    boolean alpha = true;\n    boolean depth = true;\n    boolean stencil = false;\n    boolean antialias = true;\n    boolean premultipliedAlpha = true;\n    boolean preserveDrawingBuffer = false;\n    WebGLPowerPreference powerPreference = \"default\";\n    boolean failIfMajorPerformanceCaveat = false;\n};\n\n// [Exposed=(Window,Worker)] 代表可以同时在主线程和后台线程使用本对象\n\n[Exposed=(Window,Worker)]\ninterface WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLBuffer : WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLFramebuffer : WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLProgram : WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLRenderbuffer : WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLShader : WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLTexture : WebGLObject {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLUniformLocation {};\n\n[Exposed=(Window,Worker)]\ninterface WebGLActiveInfo {\n    readonly attribute GLint size;\n    readonly attribute GLenum type;\n    readonly attribute DOMString name;\n};\n\n[Exposed=(Window,Worker)]\ninterface WebGLShaderPrecisionFormat {\n    readonly attribute GLint rangeMin;\n    readonly attribute GLint rangeMax;\n    readonly attribute GLint precision;\n};\n\ntypedef (ImageBitmap or\n         ImageData or\n         HTMLImageElement or\n         HTMLCanvasElement or\n         HTMLVideoElement or\n         OffscreenCanvas) TexImageSource;\n\ntypedef ([AllowShared] Float32Array or sequence<GLfloat>) Float32List;\ntypedef ([AllowShared] Int32Array or sequence<GLint>) Int32List;\n\ninterface mixin WebGLRenderingContextBase {\n    // 内容整理到 'WebGLRenderingContext 对象'\n}\n\ninterface mixin WebGLRenderingContextOverloads {\n    // 内容整理到 'WebGLRenderingContext 对象'\n}\n\n[Exposed=(Window,Worker)]\ninterface WebGLRenderingContext {\n    // 内容整理到 'WebGLRenderingContext 对象'\n};\nWebGLRenderingContext includes WebGLRenderingContextBase;\nWebGLRenderingContext includes WebGLRenderingContextOverloads;\n\n[Exposed=(Window,Worker),\n Constructor(DOMString type,\n optional WebGLContextEventInit eventInit)]\ninterface WebGLContextEvent : Event {\n    readonly attribute DOMString statusMessage;\n};\n\n// EventInit is defined in the DOM4 specification.\ndictionary WebGLContextEventInit : EventInit {\n    DOMString statusMessage = \"\";\n};\n```\n\n## WebGLRenderingContext 对象\n\n### 上下文相关\n\n```js\n[Exposed=Window] readonly attribute (HTMLCanvasElement or OffscreenCanvas) canvas;\n// 可以在 Web Work 上使用 canvas api\n// 需要调用 canvas.transferControlToOffscreen() 将渲染权转移给后台线程\n[Exposed=Worker] readonly attribute OffscreenCanvas canvas;\nreadonly attribute GLsizei drawingBufferWidth;\nreadonly attribute GLsizei drawingBufferHeight;\n\n// 返回类似下列上下文参数\n// { \n//   alpha: true, \n//   antialias: true, \n//   depth: true, \n//   failIfMajorPerformanceCaveat: false, \n//   premultipliedAlpha: true, \n//   preserveDrawingBuffer: false, \n//   stencil: false \n// }\n// 可以通过下列方法设置\n// canvas.getContext('webgl', { antialias: false, depth: false });\n[WebGLHandlesContextLoss] WebGLContextAttributes? getContextAttributes();\n// 标记上下文是否已经丢失\n[WebGLHandlesContextLoss] boolean isContextLost();\n// 阻断执行，直到之前所有的操作都完成。\nvoid finish();\n// 清空缓冲的命令，这会导致所有命令尽快执行完。\nvoid flush();\n\n/* HintTarget */\nconst GLenum GENERATE_MIPMAP_HINT            = 0x8192;\n\n/* HintMode */\nconst GLenum DONT_CARE                      = 0x1100;\nconst GLenum FASTEST                        = 0x1101;\nconst GLenum NICEST                         = 0x1102;\n\n// 给某些行为设置建议使用的模式。具体建议需要看执行的情况。\nvoid hint(GLenum target, GLenum mode);\n\n// 返回给入的缓冲是否有效。\n[WebGLHandlesContextLoss] GLboolean isBuffer(WebGLBuffer? buffer);\n// 测试这个上下文的WebGL功能是否开启。\n[WebGLHandlesContextLoss] GLboolean isEnabled(GLenum cap);\n// 返回 Boolean 值，表示给入的 WebGLFrameBuffer 对象是否有效。\n[WebGLHandlesContextLoss] GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);\n// 返回一个 Boolean 值，表示给入的 WebGLProgram 是否有效。\n[WebGLHandlesContextLoss] GLboolean isProgram(WebGLProgram? program);\n[WebGLHandlesContextLoss] GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);\n[WebGLHandlesContextLoss] GLboolean isShader(WebGLShader? shader);\n[WebGLHandlesContextLoss] GLboolean isTexture(WebGLTexture? texture);\n\n// 为抗锯齿效果设置多重取样覆盖参数。\nvoid sampleCoverage(GLclampf value, GLboolean invert);\n```\n\n### 视口相关\n\n```js\n// 设置视口宽度\nvoid viewport(GLint x, GLint y, GLsizei width, GLsizei height);\n// 设置裁剪框。\nvoid scissor(GLint x, GLint y, GLsizei width, GLsizei height);\n```\n\n### 缓冲区配置\n\n**配置缓冲区默认值**\n\n```js\n// 配置指定缓冲区为指定的值（参数范围都是 0.0 - 1.0）\n// clearColor 为颜色缓冲区指定值 默认 0.0, 0.0, 0.0, 0.0\n// clearDepth 为深度缓冲区指定值 默认 1.0\n// clearStencil 为模板缓冲区指定值 默认 0\nvoid clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\nvoid clearDepth(GLclampf depth);\nvoid clearStencil(GLint s);\n```\n\n**配置颜色缓冲区处理方式**\n\n```js\n// 透明混合参数\n// blendFunc 的 sfactor dfactor 参数\nconst GLenum ZERO                           = 0;\nconst GLenum ONE                            = 1;\nconst GLenum SRC_COLOR                      = 0x0300;\nconst GLenum ONE_MINUS_SRC_COLOR            = 0x0301;\nconst GLenum SRC_ALPHA                      = 0x0302;\nconst GLenum ONE_MINUS_SRC_ALPHA            = 0x0303;\nconst GLenum DST_ALPHA                      = 0x0304;\nconst GLenum ONE_MINUS_DST_ALPHA            = 0x0305;\n\n// blendFunc 的 sfactor 参数\nconst GLenum DST_COLOR                      = 0x0306;\nconst GLenum ONE_MINUS_DST_COLOR            = 0x0307;\nconst GLenum SRC_ALPHA_SATURATE             = 0x0308;\n\n// blendEquation 的 mode 参数\nconst GLenum FUNC_ADD                       = 0x8006;\nconst GLenum FUNC_SUBTRACT                  = 0x800A;\nconst GLenum FUNC_REVERSE_SUBTRACT          = 0x800B;\n\n// 通过参数 sfactor 和 dfactor 指定进行混合操作的函数 混合后的颜色如下计算\n// 混合后颜色 = 源颜色 * sfactor + 目标颜色 * dfactor\n// @param sfactor 见此方法上枚举\n// @param dfactor 见此方法上枚举\nvoid blendFunc(GLenum sfactor, GLenum dfactor);\n// 同上 只是分开设置RGB 和 ALPHA\nvoid blendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n// 设置源和目标混合因子 值范围 在0到1之间\nvoid blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n\n// 将RGB混合方程和阿尔法混合方程设置为单个方程。\n// 混合方程式确定新像素如何与 WebGLFramebuffer 中的像素组合\n// @ext EXT_blend_minmax\nvoid blendEquation(GLenum mode);\n// 同上 只是分开设置RGB 和 ALPHA\n// @ext EXT_blend_minmax\nvoid blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);\n// 设置在绘制或渲染WebGLFramebuffer时要开启或关闭的颜色分量。\nvoid colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);\n```\n\n**配置裁剪面**\n\n```js\n// cullFace 的 mode 参数\nconst GLenum FRONT                          = 0x0404;\nconst GLenum BACK                           = 0x0405;\nconst GLenum FRONT_AND_BACK                 = 0x0408;\n\n/* FrontFaceDirection */\nconst GLenum CW                             = 0x0900;\nconst GLenum CCW                            = 0x0901;\n\n// 设置多边形的正面或反面是否要被排除。\n// gl.enable(gl.CULL_FACE);\n// gl.cullFace(gl.FRONT_AND_BACK);\n// gl.getParameter(gl.CULL_FACE_MODE) === gl.FRONT_AND_BACK;\nvoid cullFace(GLenum mode);\n// 设置多边形的正面使用顺时针还是逆时针绘制表示。\nvoid frontFace(GLenum mode);\n```\n\n**配置深度缓冲区处理方式**\n\n```js\n// depthFunc 的 func 参数\nconst GLenum NEVER                          = 0x0200;\nconst GLenum LESS                           = 0x0201;\nconst GLenum EQUAL                          = 0x0202;\nconst GLenum LEQUAL                         = 0x0203;\nconst GLenum GREATER                        = 0x0204;\nconst GLenum NOTEQUAL                       = 0x0205;\nconst GLenum GEQUAL                         = 0x0206;\nconst GLenum ALWAYS                         = 0x0207;\n\n// 设置比较输入像素深度和深度缓存值得函数\n// gl.enable(gl.DEPTH_TEST);\n// gl.depthFunc(gl.NEVER);\n// gl.getParameter(gl.DEPTH_FUNC) === gl.NEVER;\nvoid depthFunc(GLenum func);\n// 设置从规范化设备坐标映射到窗口或视口坐标时的深度范围。\nvoid depthRange(GLclampf zNear, GLclampf zFar);\n// 锁定或者释放深度缓冲区的写入操作\n// @param flag false 只读 true 可读写\nvoid depthMask(GLboolean flag);\n```\n\n**配置线宽**\n\n```js\n// 设置线宽。无效\nvoid lineWidth(GLfloat width);\n```\n\n**配置模板缓冲区处理方式**\n\n```js\n/* StencilOp */\n/* ZERO */\nconst GLenum KEEP                           = 0x1E00;\nconst GLenum REPLACE                        = 0x1E01;\nconst GLenum INCR                           = 0x1E02;\nconst GLenum DECR                           = 0x1E03;\nconst GLenum INVERT                         = 0x150A;\nconst GLenum INCR_WRAP                      = 0x8507;\nconst GLenum DECR_WRAP                      = 0x8508;\n\n// 同时设置前面和背面的模板测试函数，及其引用值。\nvoid stencilFunc(GLenum func, GLint ref, GLuint mask);\n// 可分开设置前面或背面的模板测试函数，及其引用值。\nvoid stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);\n// 同时启用或禁用，前面和背面的模板测试掩码。\nvoid stencilMask(GLuint mask);\n// 可分开启用或禁用，前面和背面的模板测试掩码。\nvoid stencilMaskSeparate(GLenum face, GLuint mask);\n// 同时设置，在前面和背面的模板缓冲区上执行的操作。\nvoid stencilOp(GLenum fail, GLenum zfail, GLenum zpass);\n// 可分开设置，在前面和背面的模板缓冲区上执行的操作。\nvoid stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);\n```\n\n### 缓冲区相关方法\n\n**清理缓冲区**\n\n```js\n// 缓冲区类型\n// 为 gl.clear 的参数\nconst GLenum DEPTH_BUFFER_BIT               = 0x00000100;\nconst GLenum STENCIL_BUFFER_BIT             = 0x00000400;\nconst GLenum COLOR_BUFFER_BIT               = 0x00004000;\n\n// 清理指定缓缓冲区内容, 可以通过或运算符一次清理多个类型的缓冲区\n// @param mask 颜色缓冲区（COLOR_BUFFER_BIT） | 深度缓冲区（DEPTH_BUFFER_BIT） | 模板缓冲区（STENCIL_BUFFER_BIT）\nvoid clear(GLbitfield mask);\n```\n\n**读取缓冲区**\n\n```js\n// 从颜色缓冲区中读取 x y width height 参数确定的矩形块中的所有像素值 并保存在pixels指定的数组中\n// @param x y 选择矩形区域左上角坐标\n// @param width height 选择矩形区域的宽 长\n// @param format 指定像素值的颜色格式 必须为 gl.RGB\n// @param type 指定像素值得数据格式 必须是 gl.UNSIGNED_BYTE\n// @param pixels 类型化数组 Unit8Array\nvoid readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\n```\n\n**帧缓冲区**\n\n```js\n/* Framebuffer Object. */\nconst GLenum FRAMEBUFFER                    = 0x8D40;\nconst GLenum RENDERBUFFER                   = 0x8D41;\n\n// 表示渲染缓冲区将替代颜色缓冲区中的数据格式\nconst GLenum RGBA4                          = 0x8056;\nconst GLenum RGB5_A1                        = 0x8057;\nconst GLenum RGB565                         = 0x8D62;\n// 表示渲染缓冲区将替代深度缓冲区中的数据格式\nconst GLenum DEPTH_COMPONENT16              = 0x81A5;\n// 表示渲染缓冲区将替代模板缓冲区中的数据格式\nconst GLenum STENCIL_INDEX8                 = 0x8D48;\n\n// 帧缓冲区作为 attachment（附件）的参数\n// 颜色附件 深度附件 模板附件 模板深度附件\nconst GLenum COLOR_ATTACHMENT0              = 0x8CE0;\nconst GLenum DEPTH_ATTACHMENT               = 0x8D00;\nconst GLenum STENCIL_ATTACHMENT             = 0x8D20;\nconst GLenum DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n// ============\n// = 渲染缓冲区\n// ============\n\n// 创建渲染缓冲区对象\nWebGLRenderbuffer? createRenderbuffer();\n\n// 删除渲染缓冲区对象\nvoid deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);\n\n// 将 renderbuffer 指定的渲染缓冲区对象绑定在target目标上\n// 如果 renderbuffer 为 null 则将已经绑定在target目标上的渲染缓冲区对象解除绑定\n// @param target 必须是 gl.RENDERBUFFER\nvoid bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);\n\n// 创建并初始化渲染缓冲区的数据区\n// @param target 必须是 gl.RENDERBUFFER\n// @param internalformat 指定渲染缓冲区中的数据格式 见方法上枚举\n// @param width height 指定渲染缓冲区的宽度和高度 单位像素\nvoid renderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\n\n// ==========\n// = 帧缓冲区\n// ==========\n\n// 创建帧缓冲区对象\nWebGLFramebuffer? createFramebuffer();\n\n// 删除帧缓冲区对象\nvoid deleteFramebuffer(WebGLFramebuffer? framebuffer);\n\n// 绑定帧缓冲区\n// FBO就是由颜色附件（COLOR_ATTACHMENT0)，深度附件（DEPTH_ATTACHMENT），模板附件（STENCIL_ATTACHMENT）组成的一个逻辑存储对象\n// RBO是一个2D图像缓冲区，可以用于分配和存储颜色值，深度或者模板值，可以作为FBO的颜色，深度模板附件。\nvoid bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);\n\n// 设置纹理为 attachment 附件\nvoid framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level);\n// 设置渲染缓冲区对象为 attachment 附件\nvoid framebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer);\n\n// 检查帧缓冲区\n[WebGLHandlesContextLoss] GLenum checkFramebufferStatus(GLenum target);\n```\n\n### 缓存对象\n\n使用缓存的五个步骤\n\n1. createBuffer \n1. bindBuffer \n1. bufferData \n1. vertexAttribPointer \n1. enableVertexAttribArray\n\n```js\n// 缓存对象\n// bindBuffer 第一个参数\nconst GLenum ARRAY_BUFFER                   = 0x8892;\nconst GLenum ELEMENT_ARRAY_BUFFER           = 0x8893;\n// const GLenum ARRAY_BUFFER_BINDING           = 0x8894;\n// const GLenum ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;\n\n// 绘制模式\n// 下文中的usage参数值\nconst GLenum STREAM_DRAW                    = 0x88E0;\nconst GLenum STATIC_DRAW                    = 0x88E4;\nconst GLenum DYNAMIC_DRAW                   = 0x88E8;\n\n// 数据类型\n// vertexAttribPointer 中参数type的取值\nconst GLenum BYTE                           = 0x1400;\nconst GLenum UNSIGNED_BYTE                  = 0x1401;\nconst GLenum SHORT                          = 0x1402;\nconst GLenum UNSIGNED_SHORT                 = 0x1403;\nconst GLenum INT                            = 0x1404;\nconst GLenum UNSIGNED_INT                   = 0x1405;\nconst GLenum FLOAT                          = 0x1406;\n\n// 创建缓冲区对象\nWebGLBuffer? createBuffer();\n\n// 允许使用buffer表示的缓冲区对象并将其绑定到target表示的目标上\n// @param target \n//        ARRAY_BUFFER 表示缓冲区对象中包含顶点数据\n//        ELEMENT_ARRAY_BUFFER 表示缓冲去对象中包含了顶点的索引值\nvoid bindBuffer(GLenum target, WebGLBuffer? buffer);\n\n// 开辟存储空间，向绑定在target上的缓冲区对象写入数据data\n// @param target 同上\n// @param data 类型化数组 比如：Float32Array...\n// @param usage 优化效率 可以是以下值：\n//        STATIC_DRAW 只会向缓冲区写入一次数据 需要绘制很多次\n//        STREAM_DRAW 只会向缓冲区写入一次数据 需要绘制若干次\n//        DYNAMIC_DRAW 会向缓冲区对象中多次写入数据 并绘制很多次\nvoid bufferData(GLenum target, [AllowShared] BufferSource? data, GLenum usage);\nvoid bufferData(GLenum target, GLsizeiptr size, GLenum usage);\nvoid bufferSubData(GLenum target, GLintptr offset, [AllowShared] BufferSource data);\n\n// 将绑定到ARRAY_BUFFER的缓冲区对象分配给index指定的attribute变量\n// @param index 指向attribute变量\n// @param size 指定缓冲区中每个顶点分量的个数\n// @param type 数据格式 见上面的枚举\n// @param normalized 是否将浮点型数据归一化到[0, 1]或者[-1, 1]区间\n// @param stride 指定相邻两个顶点之间的字节数 默认是0\n// @param offset 指定缓冲区对象中的偏移量 单位字节 可以利用这个偏移量赋值多个attribute\nvoid vertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);\n\n// 开启index对应的attribute对象\n// 开启后不能通过 vertexAttrib[1234]f 传值\nvoid enableVertexAttribArray(GLuint index);\n\n// 关闭index对应的attribute对象\nvoid disableVertexAttribArray(GLuint index);\n\n// 删除参数buffer表示的缓冲区对象\n// @param buffer 缓冲区对象 由createBuffer创建\nvoid deleteBuffer(WebGLBuffer? buffer);\n```\n\n\n### attribute 相关\n\n```js\n// 获取由 name 参数指定的 attribute 变量存储地址\n// @param program 指定包含顶点或者片元着色器的程序对象\n// @param name 获取其存储的 attribute 变量名称，最大长度256字节\n[WebGLHandlesContextLoss] GLint getAttribLocation(WebGLProgram program, DOMString name);\n\n// 绑定顶点索引到属性变量\n// 使用缓冲区数据的时候需要用到的方法\n// @param index 指定要绑定的通用顶点的索引 这个值直接赋值给 vertexAttribPointer 的 index 参数\n// @param name 指定变量名\n// 这里的 index 和 getAttribLocation 返回值是一样的\nvoid bindAttribLocation(WebGLProgram program, GLuint index, DOMString name);\n\n// 将数据传给由index参数指定的attribute变量\nvoid vertexAttrib1f(GLuint index, GLfloat x);\nvoid vertexAttrib2f(GLuint index, GLfloat x, GLfloat y);\nvoid vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);\nvoid vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n// 接收参数为 Float32Array 数组\nvoid vertexAttrib1fv(GLuint index, Float32List values);\nvoid vertexAttrib2fv(GLuint index, Float32List values);\nvoid vertexAttrib3fv(GLuint index, Float32List values);\nvoid vertexAttrib4fv(GLuint index, Float32List values);\n```\n\n### uniform 相关\n\n```js\n/* Uniform Types */\nconst GLenum FLOAT_VEC2                     = 0x8B50;\nconst GLenum FLOAT_VEC3                     = 0x8B51;\nconst GLenum FLOAT_VEC4                     = 0x8B52;\nconst GLenum INT_VEC2                       = 0x8B53;\nconst GLenum INT_VEC3                       = 0x8B54;\nconst GLenum INT_VEC4                       = 0x8B55;\nconst GLenum BOOL                           = 0x8B56;\nconst GLenum BOOL_VEC2                      = 0x8B57;\nconst GLenum BOOL_VEC3                      = 0x8B58;\nconst GLenum BOOL_VEC4                      = 0x8B59;\nconst GLenum FLOAT_MAT2                     = 0x8B5A;\nconst GLenum FLOAT_MAT3                     = 0x8B5B;\nconst GLenum FLOAT_MAT4                     = 0x8B5C;\nconst GLenum SAMPLER_2D                     = 0x8B5E;\nconst GLenum SAMPLER_CUBE                   = 0x8B60;\n\n// 获取指定名称的 uniform 变量存储位置\n// @param program 制定的包含顶点或者片元着色器的程序对象\n// @param name 指定想要获取其存储位置的uniform变量名称 最大长度256字节\nWebGLUniformLocation? getUniformLocation(WebGLProgram program, DOMString name);\n\n// 将数据传给location指定的uniform变量\nvoid uniform1f(WebGLUniformLocation? location, GLfloat x);\nvoid uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);\nvoid uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);\nvoid uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n\nvoid uniform1i(WebGLUniformLocation? location, GLint x);\nvoid uniform2i(WebGLUniformLocation? location, GLint x, GLint y);\nvoid uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);\nvoid uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);\n\nvoid uniform1fv(WebGLUniformLocation? location, Float32List v);\nvoid uniform2fv(WebGLUniformLocation? location, Float32List v);\nvoid uniform3fv(WebGLUniformLocation? location, Float32List v);\nvoid uniform4fv(WebGLUniformLocation? location, Float32List v);\n\nvoid uniform1iv(WebGLUniformLocation? location, Int32List v);\nvoid uniform2iv(WebGLUniformLocation? location, Int32List v);\nvoid uniform3iv(WebGLUniformLocation? location, Int32List v);\nvoid uniform4iv(WebGLUniformLocation? location, Int32List v);\n\n// @param 是否对矩阵进行转置 默认 false 在webgl中必须是false\nvoid uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);\nvoid uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);\nvoid uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);\n```\n\n### texture 相关\n\n```js\n// pixelStorei 中参数pname取值\n\n// 对图像进行Y轴反转，默认false\nconst GLenum UNPACK_FLIP_Y_WEBGL            = 0x9240; \n// 将图像RGB颜色值每一个分量乘以A 默认false\nconst GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241; \n\n// activeTexture 方法使用的枚举常量\nconst GLenum TEXTURE0                       = 0x84C0;\nconst GLenum TEXTURE1                       = 0x84C1;\nconst GLenum TEXTURE2                       = 0x84C2;\nconst GLenum TEXTURE3                       = 0x84C3;\nconst GLenum TEXTURE4                       = 0x84C4;\nconst GLenum TEXTURE5                       = 0x84C5;\nconst GLenum TEXTURE6                       = 0x84C6;\nconst GLenum TEXTURE7                       = 0x84C7;\nconst GLenum TEXTURE8                       = 0x84C8;\nconst GLenum TEXTURE9                       = 0x84C9;\nconst GLenum TEXTURE10                      = 0x84CA;\nconst GLenum TEXTURE11                      = 0x84CB;\nconst GLenum TEXTURE12                      = 0x84CC;\nconst GLenum TEXTURE13                      = 0x84CD;\nconst GLenum TEXTURE14                      = 0x84CE;\nconst GLenum TEXTURE15                      = 0x84CF;\nconst GLenum TEXTURE16                      = 0x84D0;\nconst GLenum TEXTURE17                      = 0x84D1;\nconst GLenum TEXTURE18                      = 0x84D2;\nconst GLenum TEXTURE19                      = 0x84D3;\nconst GLenum TEXTURE20                      = 0x84D4;\nconst GLenum TEXTURE21                      = 0x84D5;\nconst GLenum TEXTURE22                      = 0x84D6;\nconst GLenum TEXTURE23                      = 0x84D7;\nconst GLenum TEXTURE24                      = 0x84D8;\nconst GLenum TEXTURE25                      = 0x84D9;\nconst GLenum TEXTURE26                      = 0x84DA;\nconst GLenum TEXTURE27                      = 0x84DB;\nconst GLenum TEXTURE28                      = 0x84DC;\nconst GLenum TEXTURE29                      = 0x84DD;\nconst GLenum TEXTURE30                      = 0x84DE;\nconst GLenum TEXTURE31                      = 0x84DF;\n\n// bindTexture texParameterf texParameteri texImage2D 的 target 参数\nconst GLenum TEXTURE_2D                     = 0x0DE1;\nconst GLenum TEXTURE_CUBE_MAP               = 0x8513;\n\n// texParameterf pname 参数\n// texParameteri pname 参数\nconst GLenum TEXTURE_MAG_FILTER             = 0x2800;\nconst GLenum TEXTURE_MIN_FILTER             = 0x2801;\nconst GLenum TEXTURE_WRAP_S                 = 0x2802;\nconst GLenum TEXTURE_WRAP_T                 = 0x2803;\n\n// texParameterf param 参数 当 pname = TEXTURE_MAG_FILTER | TEXTURE_MIN_FILTER\n// texParameteri param 参数 当 pname = TEXTURE_MAG_FILTER | TEXTURE_MIN_FILTER\n// 以下是非金字塔纹理常量\n// 使用原纹理上距离映射后像素（新像素）中心最近的那个像素的颜色值，作为新像素的值（使用曼哈顿距离）\n// 曼哈顿距离又称直角距离、棋盘距离。如(x1, y1) (x2, y2)的曼哈顿距离是 |x1 - x2| + |y1 - y2|\nconst GLenum NEAREST                        = 0x2600;\n// 使用距离新像素中心最近的四个像素的颜色值得加权平均，作为新像素的值（与 NEAREST对比，该方法图像质量更好，但是会有比较大的开销）\nconst GLenum LINEAR                         = 0x2601;\n// 以下是金字塔纹理常量\nconst GLenum NEAREST_MIPMAP_NEAREST         = 0x2700;\nconst GLenum LINEAR_MIPMAP_NEAREST          = 0x2701;\nconst GLenum NEAREST_MIPMAP_LINEAR          = 0x2702;\nconst GLenum LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n// texParameterf param 参数 当 pname = TEXTURE_WRAP_S | TEXTURE_WRAP_T\n// texParameteri param 参数 当 pname = TEXTURE_WRAP_S | TEXTURE_WRAP_T\n\n// 平铺式的重复纹理\nconst GLenum REPEAT                         = 0x2901; \n// 镜像对称式的重复纹理\nconst GLenum CLAMP_TO_EDGE                  = 0x812F; \n// 使用纹理图像的边缘值\nconst GLenum MIRRORED_REPEAT                = 0x8370; \n\n// texImage2D 的 internalformat 参数\nconst GLenum ALPHA                          = 0x1906;\nconst GLenum RGB                            = 0x1907;\nconst GLenum RGBA                           = 0x1908;\nconst GLenum LUMINANCE                      = 0x1909;\nconst GLenum LUMINANCE_ALPHA                = 0x190A;\n\n// texImage2D 的 type 参数\n// 前文已定义\nconst GLenum UNSIGNED_BYTE; \n// RGBA\nconst GLenum UNSIGNED_SHORT_4_4_4_4         = 0x8033; \n// RGBA\nconst GLenum UNSIGNED_SHORT_5_5_5_1         = 0x8034; \n// RGB\nconst GLenum UNSIGNED_SHORT_5_6_5           = 0x8363; \n\n// 创建纹理对象以存储纹理图像\nWebGLTexture? createTexture();\n\n// 使用texture删除纹理对象\nvoid deleteTexture(WebGLTexture? texture);\n\n// 使用 pname 和 param 指定的方式加载得到的图像\n// @param pname 见上面的枚举\n// @param param 指定 非0为true、0为false 必须是整数\nvoid pixelStorei(GLenum pname, GLint param);\n\n// 激活纹理单元 参数是常量 gl.TEXTURE<I> 见上面枚举\nvoid activeTexture(GLenum texture);\n\n// 开启 texture 指定的纹理对象，并将其绑定到 target 上。 \n// 如果已经通过 gl.activeTexture 激活了某个纹理单元，则纹理对象也会绑定到这个纹理单元上\n// @param target 绑定类型 TEXTURE_CUBE_MAP（立方体纹理） | TEXTURE_2D （平面纹理）\n// @param texture 绑定的纹理单元\nvoid bindTexture(GLenum target, WebGLTexture? texture);\n\n// 配置纹理，将param值赋给绑定到目标的纹理对象的pname参数上\n// @param target 同上\n// @param pname 见上面枚举 纹理参数\n// @param param 见上面枚举 纹理参数的值\nvoid texParameterf(GLenum target, GLenum pname, GLfloat param);\nvoid texParameteri(GLenum target, GLenum pname, GLint param);\n\n// 将 source 指定的图像分配给绑定到目标上的纹理对象\n// @param target 同上\n// @param level 传入0 （该参数是为金字塔纹理准备的）\n// @param internalformat 图像的内部格式 见上枚举\n// @param format 纹理数据的格式 必须使用与 internalformat 相同的值\n// @param type 纹理数据的类型\n// @param source 包含纹理图像的Image对象\n// May throw DOMException\nvoid texImage2D(GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source);\nvoid texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\n\n// 指定一个为压缩格式的2D纹理图片。\nvoid compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, [AllowShared] ArrayBufferView data);\n// 指定一个为压缩格式的2D纹理子图片。\nvoid compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, [AllowShared] ArrayBufferView data);\n// 复制2D纹理图片。\nvoid copyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n// 复制2D纹理子图片。\nvoid copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n\n// 为 WebGLTexture 对象生成一组mip纹理映射。\nvoid generateMipmap(GLenum target);\n\n// 更新当前 WebGLTexture 的子矩形。\nvoid texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\nvoid texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source); // May throw DOMException\n\n// 最后指定纹理单元编号\n// gl.uniform1i(sampler, 0);\n```\n\n### 启用功能\n\n```js\n// enable disable 的 cap 参数\nconst GLenum CULL_FACE                      = 0x0B44;\n// 混合\nconst GLenum BLEND                          = 0x0BE2;\nconst GLenum DITHER                         = 0x0BD0;\nconst GLenum STENCIL_TEST                   = 0x0B90;\n// 隐藏面消除\nconst GLenum DEPTH_TEST                     = 0x0B71;\nconst GLenum SCISSOR_TEST                   = 0x0C11;\n// 多边形位移 （解决深度冲突问题）\nconst GLenum POLYGON_OFFSET_FILL            = 0x8037;\nconst GLenum SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;\nconst GLenum SAMPLE_COVERAGE                = 0x80A0;\n\n// 启用功能\nvoid enable(GLenum cap);\n\n// 关闭功能\nvoid disable(GLenum cap);\n\n// 解决深度冲突\n// gl.enable(POLYGON_OFFSET_FILL);\n// 指定加到每个顶点绘制后Z值上的偏移量，偏移量按照公式 m * factor + r * units 计算，其中m代表顶点所在表面\n// 相对于观察者的实现角度，而r表示硬件能够区分两个Z值之差的最小值\nvoid polygonOffset(GLfloat factor, GLfloat units);\n\n// 虽然上面的方法可以使用，但是在渲染器中用起来还是很麻烦的。\n// 解决深度冲突有更好的方式，就是缩小远近裁剪面的距离\n```\n\n### 着色器相关\n\n```js\n// createShader 的 type 参数\nconst GLenum FRAGMENT_SHADER                  = 0x8B30;\nconst GLenum VERTEX_SHADER                    = 0x8B31;\n\n// getShaderParameter 的 pname 参数\nconst GLenum SHADER_TYPE                      = 0x8B4F;\nconst GLenum DELETE_STATUS                    = 0x8B80;\nconst GLenum COMPILE_STATUS                   = 0x8B81;\n\n// 创建由type指定的着色器对象\n// @param type 见上枚举\nWebGLShader? createShader(GLenum type);\n\n// 删除 shader 指定的着色器对象\nvoid deleteShader(WebGLShader? shader);\n\n// 将 source 指定的字符串形式的代码传入shader指定的着色器 如果之前已经向shader传入了代码 旧的代码就会被替换掉\nvoid shaderSource(WebGLShader shader, DOMString source);\n\n// 编译 shader 指定的着色器中的源代码\nvoid compileShader(WebGLShader shader);\n\n// 获取 shader 指定的着色器中 pname 指定的参数信息\n// @param pname 见上枚举\nany getShaderParameter(WebGLShader shader, GLenum pname);\n\n// 如果 getShaderParameter(shader, COMPILE_STATUS) 返回false \n// 则可以通过 此函数获取 指定shader 的信息日志\nDOMString? getShaderInfoLog(WebGLShader shader);\n```\n\n### 着色器程序相关\n\n```js\n// getProgramParameter 的 pname 参数\n// 着色器相关 章节已定义\nconst GLenum DELETE_STATUS; \nconst GLenum LINK_STATUS                      = 0x8B82;\nconst GLenum VALIDATE_STATUS                  = 0x8B83;\nconst GLenum ATTACHED_SHADERS                 = 0x8B85;\nconst GLenum ACTIVE_UNIFORMS                  = 0x8B86;\nconst GLenum ACTIVE_ATTRIBUTES                = 0x8B89;\n\n// 创建着色器程序对象\nWebGLProgram? createProgram();\n\n// 删除着色器程序对象\nvoid deleteProgram(WebGLProgram? program);\n\n// 将 shader 指定的着色器对象分配给 program 指定的程序对象\nvoid attachShader(WebGLProgram program, WebGLShader shader);\n\n// 取消 shader 指定的着色器对 program 对象的分配\nvoid detachShader(WebGLProgram program, WebGLShader shader);\n\n// 连接 program 指定的程序对象中的着色器\n// 目的：\n// 1. 保证顶点着色器 和 片元着色器的varying变量同名同类型，且一一对应\n// 2. 保证顶点着色器对每个varying变量赋了值\n// 3. 保证顶点着色器 和 片元着色器中的同名 uniform 变量也是同类型的 无需一一对应\n// 4. 保证着色器中的attribute、uniform、varying变量的个数没有超过着色器上限\nvoid linkProgram(WebGLProgram program);\n\n// 获取 program 指定的程序对象中 pname 指定的参数信息\n// @param pname 见上枚举\nany getProgramParameter(WebGLProgram program, GLenum pname);\n\n// 如果通过 getProgramParameter(LINK_STATUS) 获得返回值 为 false\n// 可以通过 此函数获取 program 指定的程序对象的信息日志\nDOMString? getProgramInfoLog(WebGLProgram program);\n\n// 验证 WebGLProgram \nvoid validateProgram(WebGLProgram program);\n\n// 告知 WEBGL 系统绘制时使用的 program 对象\nvoid useProgram(WebGLProgram? program);\n```\n\n**获取着色器程序相关代码**\n\n```js\nconst program = gl.createProgram();\ngl.attacheShader(program, vertexShader);\ngl.attacheShader(program, fragmentShader);\ngl.linkProgram(program);\nif(!gl.getProgramParameter(program, gl.LINK_STATUS)){\n  var info = gl.getProgramInfoLog(program);\n  throw new Error('Could not compile WebGL program. \\n\\n ' + info);\n}\n```\n\n### 绘制相关方法\n\n绘制缓存中的顶点数据。\n\n```js\n// 绘制的类型\n// 为 gl.drawArrays、gl.drawElements 第一个参数\nconst GLenum POINTS                         = 0x0000;\nconst GLenum LINES                          = 0x0001;\nconst GLenum LINE_LOOP                      = 0x0002;\nconst GLenum LINE_STRIP                     = 0x0003;\nconst GLenum TRIANGLES                      = 0x0004;\nconst GLenum TRIANGLE_STRIP                 = 0x0005;\nconst GLenum TRIANGLE_FAN                   = 0x0006;\n\n// 执行绘制， 按照mode参数指定的方式绘制图形\n// @param model 绘制模式。\n// @param first 指定从哪个定点开始绘制\n// @param count 指定绘制需要用到多少个顶点\nvoid drawArrays(GLenum mode, GLint first, GLsizei count);\n\n// 执行绘制，按照mode参数制定的方式，根据绑定到 ELEMENT_ARRAY_BUFFER 的缓冲区中的顶点索引绘制图形\n// @param model 绘制模式。\n// @param count 指定绘制顶点的个数\n// @param type 指定索引值数据类型。包括：UNSIGNED_BYTE、UNSIGNED_SHORT、UNSIGNED_INT\n// @param offset 指定索引数组中绘制的偏移位置，以字节为单位\nvoid drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);\n```\n\n### 查询状态参数\n\n```js\n// 获取当前激活的材质枚举值 getParameter\nconst GLenum ACTIVE_TEXTURE                 = 0x84E0;\n// 获取材质最大支持数量 getParameter\nconst GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\n\n// 顶点着色器可使用最大 attribute 数量\nconst GLenum MAX_VERTEX_ATTRIBS               = 0x8869;\n// 顶点着色器可使用 uniform 最大数量\nconst GLenum MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;\n// 可使用最大 varying 变量数量\nconst GLenum MAX_VARYING_VECTORS              = 0x8DFC;\n// 顶点着色器纹理单元最大数量\nconst GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;\n// 片元着色器纹理单元最大数量\nconst GLenum MAX_TEXTURE_IMAGE_UNITS          = 0x8872;\n// 当前片元着色器可使用 uniform 最大数量\nconst GLenum MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;\n\n// 着色器语言版本\nconst GLenum SHADING_LANGUAGE_VERSION         = 0x8B8C;\n// 当前运行的着色器程序\nconst GLenum CURRENT_PROGRAM                  = 0x8B8D;\n\n// 获取混合方程\nconst GLenum BLEND_EQUATION                 = 0x8009;\nconst GLenum BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */\nconst GLenum BLEND_EQUATION_ALPHA           = 0x883D;\n\n// 面消除查询\nconst GLenum CULL_FACE_MODE                 = 0x0B45;\n\n/* Separate Blend Functions */\nconst GLenum BLEND_DST_RGB                  = 0x80C8;\nconst GLenum BLEND_SRC_RGB                  = 0x80C9;\nconst GLenum BLEND_DST_ALPHA                = 0x80CA;\nconst GLenum BLEND_SRC_ALPHA                = 0x80CB;\nconst GLenum CONSTANT_COLOR                 = 0x8001;\nconst GLenum ONE_MINUS_CONSTANT_COLOR       = 0x8002;\nconst GLenum CONSTANT_ALPHA                 = 0x8003;\nconst GLenum ONE_MINUS_CONSTANT_ALPHA       = 0x8004;\nconst GLenum BLEND_COLOR                    = 0x8005;\n\n// buffer\nconst GLenum BUFFER_SIZE                    = 0x8764;\nconst GLenum BUFFER_USAGE                   = 0x8765;\n\nconst GLenum CURRENT_VERTEX_ATTRIB          = 0x8626;\n\n/* ErrorCode */\nconst GLenum NO_ERROR                       = 0;\nconst GLenum INVALID_ENUM                   = 0x0500;\nconst GLenum INVALID_VALUE                  = 0x0501;\nconst GLenum INVALID_OPERATION              = 0x0502;\nconst GLenum OUT_OF_MEMORY                  = 0x0505;\n\n/* GetPName */\nconst GLenum LINE_WIDTH                     = 0x0B21;\nconst GLenum ALIASED_POINT_SIZE_RANGE       = 0x846D;\nconst GLenum ALIASED_LINE_WIDTH_RANGE       = 0x846E;\n\nconst GLenum FRONT_FACE                     = 0x0B46;\nconst GLenum DEPTH_RANGE                    = 0x0B70;\nconst GLenum DEPTH_WRITEMASK                = 0x0B72;\nconst GLenum DEPTH_CLEAR_VALUE              = 0x0B73;\nconst GLenum DEPTH_FUNC                     = 0x0B74;\nconst GLenum STENCIL_CLEAR_VALUE            = 0x0B91;\nconst GLenum STENCIL_FUNC                   = 0x0B92;\nconst GLenum STENCIL_FAIL                   = 0x0B94;\nconst GLenum STENCIL_PASS_DEPTH_FAIL        = 0x0B95;\nconst GLenum STENCIL_PASS_DEPTH_PASS        = 0x0B96;\nconst GLenum STENCIL_REF                    = 0x0B97;\nconst GLenum STENCIL_VALUE_MASK             = 0x0B93;\nconst GLenum STENCIL_WRITEMASK              = 0x0B98;\nconst GLenum STENCIL_BACK_FUNC              = 0x8800;\nconst GLenum STENCIL_BACK_FAIL              = 0x8801;\nconst GLenum STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;\nconst GLenum STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;\nconst GLenum STENCIL_BACK_REF               = 0x8CA3;\nconst GLenum STENCIL_BACK_VALUE_MASK        = 0x8CA4;\nconst GLenum STENCIL_BACK_WRITEMASK         = 0x8CA5;\nconst GLenum VIEWPORT                       = 0x0BA2;\nconst GLenum SCISSOR_BOX                    = 0x0C10;\n\n/* SCISSOR_TEST */\nconst GLenum COLOR_CLEAR_VALUE              = 0x0C22;\nconst GLenum COLOR_WRITEMASK                = 0x0C23;\nconst GLenum UNPACK_ALIGNMENT               = 0x0CF5;\nconst GLenum PACK_ALIGNMENT                 = 0x0D05;\nconst GLenum MAX_TEXTURE_SIZE               = 0x0D33;\nconst GLenum MAX_VIEWPORT_DIMS              = 0x0D3A;\nconst GLenum SUBPIXEL_BITS                  = 0x0D50;\nconst GLenum RED_BITS                       = 0x0D52;\nconst GLenum GREEN_BITS                     = 0x0D53;\nconst GLenum BLUE_BITS                      = 0x0D54;\nconst GLenum ALPHA_BITS                     = 0x0D55;\nconst GLenum DEPTH_BITS                     = 0x0D56;\nconst GLenum STENCIL_BITS                   = 0x0D57;\nconst GLenum POLYGON_OFFSET_UNITS           = 0x2A00;\n/* POLYGON_OFFSET_FILL */\nconst GLenum POLYGON_OFFSET_FACTOR          = 0x8038;\nconst GLenum TEXTURE_BINDING_2D             = 0x8069;\nconst GLenum SAMPLE_BUFFERS                 = 0x80A8;\nconst GLenum SAMPLES                        = 0x80A9;\nconst GLenum SAMPLE_COVERAGE_VALUE          = 0x80AA;\nconst GLenum SAMPLE_COVERAGE_INVERT         = 0x80AB;\n\nconst GLenum COMPRESSED_TEXTURE_FORMATS     = 0x86A3;\n\n/* PixelFormat */\nconst GLenum DEPTH_COMPONENT                = 0x1902;\n\n/* StringName */\nconst GLenum VENDOR                         = 0x1F00;\nconst GLenum RENDERER                       = 0x1F01;\nconst GLenum VERSION                        = 0x1F02;\n\nconst GLenum TEXTURE                        = 0x1702;\n\nconst GLenum TEXTURE_BINDING_CUBE_MAP       = 0x8514;\nconst GLenum TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst GLenum TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst GLenum TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst GLenum TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;\nconst GLenum MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;\n\n/* Vertex Arrays */\nconst GLenum VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;\nconst GLenum VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;\nconst GLenum VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;\nconst GLenum VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;\nconst GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;\nconst GLenum VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;\nconst GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\n\n/* Read Format */\nconst GLenum IMPLEMENTATION_COLOR_READ_TYPE   = 0x8B9A;\nconst GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;\n\n/* Shader Precision-Specified Types */\nconst GLenum LOW_FLOAT                      = 0x8DF0;\nconst GLenum MEDIUM_FLOAT                   = 0x8DF1;\nconst GLenum HIGH_FLOAT                     = 0x8DF2;\nconst GLenum LOW_INT                        = 0x8DF3;\nconst GLenum MEDIUM_INT                     = 0x8DF4;\nconst GLenum HIGH_INT                       = 0x8DF5;\n\nconst GLenum DEPTH_STENCIL                  = 0x84F9;\n\nconst GLenum RENDERBUFFER_WIDTH             = 0x8D42;\nconst GLenum RENDERBUFFER_HEIGHT            = 0x8D43;\nconst GLenum RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;\nconst GLenum RENDERBUFFER_RED_SIZE          = 0x8D50;\nconst GLenum RENDERBUFFER_GREEN_SIZE        = 0x8D51;\nconst GLenum RENDERBUFFER_BLUE_SIZE         = 0x8D52;\nconst GLenum RENDERBUFFER_ALPHA_SIZE        = 0x8D53;\nconst GLenum RENDERBUFFER_DEPTH_SIZE        = 0x8D54;\nconst GLenum RENDERBUFFER_STENCIL_SIZE      = 0x8D55;\n\nconst GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;\nconst GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;\nconst GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;\nconst GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\n\nconst GLenum NONE                           = 0;\n\nconst GLenum FRAMEBUFFER_COMPLETE                      = 0x8CD5;\nconst GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;\nconst GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\nconst GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;\nconst GLenum FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;\n\nconst GLenum FRAMEBUFFER_BINDING            = 0x8CA6;\nconst GLenum RENDERBUFFER_BINDING           = 0x8CA7;\nconst GLenum MAX_RENDERBUFFER_SIZE          = 0x84E8;\n\nconst GLenum INVALID_FRAMEBUFFER_OPERATION  = 0x0506;\n\nconst GLenum CONTEXT_LOST_WEBGL                 = 0x9242;\nconst GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst GLenum BROWSER_DEFAULT_WEBGL              = 0x9244;\n\n// 通过查询参数获取值\nany getParameter(GLenum pname);\nany getTexParameter(GLenum target, GLenum pname);\n// 查询着色器相关参数\nany getShaderParameter(WebGLShader shader, GLenum pname);\n// 查询着色器程序相关参数\nany getProgramParameter(WebGLProgram program, GLenum pname);\n// 返回激活状态的attribute变量信息。\nWebGLActiveInfo? getActiveAttrib(WebGLProgram program, GLuint index);\n// 返回激活状态的uniform 变量信息。\nWebGLActiveInfo? getActiveUniform(WebGLProgram program, GLuint index);\n// 返回附加在 WebGLProgram 上的 WebGLShader 对象的列表\nsequence<WebGLShader>? getAttachedShaders(WebGLProgram program);\n// 返回缓冲信息。\nany getBufferParameter(GLenum target, GLenum pname);\n// 返回错误信息。\n[WebGLHandlesContextLoss] GLenum getError();\n// 返回帧缓冲区的信息。\nany getFramebufferAttachmentParameter(GLenum target, GLenum attachment, GLenum pname);\n// 返回渲染缓冲区的信息。\nany getRenderbufferParameter(GLenum target, GLenum pname);\n// 返回一个描述着色器数字类型精度的WebGLShaderPrecisionFormat 对象。\nWebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);\n// 以字符串形式返回 WebGLShader 的源码。\nDOMString? getShaderSource(WebGLShader shader);\n// 返回指定位置的uniform 变量。\nany getUniform(WebGLProgram program, WebGLUniformLocation location);\n// 返回指定位置的顶点attribute变量。\nany getVertexAttrib(GLuint index, GLenum pname);\n// 获取给定索引的顶点attribute位置。\n[WebGLHandlesContextLoss] GLintptr getVertexAttribOffset(GLuint index, GLenum pname);\n```\n\n### 扩展\n\n通过扩展基本上能使 `WebGL1` 拥有 `WebGL2` 的能力。\n\n1. 获取扩展以及扩展支持信息\n\n```js\n// 获取扩展\nobject? getExtension(DOMString name);\n// 获取扩展支持信息\nsequence<DOMString>? getSupportedExtensions();\n```\n\n2. 使用扩展字符串获取扩展对象\n\n| 扩展名 | 说明 |\n| - | - |\n| ANGLE_instanced_arrays | 允许绘制多次同样的一个或者多个对象<br>条件：分享顶点数据、原始计数和类型 |\n| EXT_blend_minmax | 通过添加两个新的混合方程来扩展混合能力 |\n| EXT_color_buffer_float | 添加渲染各种浮点格式的能力 |\n| EXT_color_buffer_half_float | 添加渲染各种16位浮点格式的能力 |\n| EXT_disjoint_timer_query | 提供一种测量一组GL命令的持续时间的方法，<br>不会影响渲染管道的稳定性 |\n| EXT_frag_depth | 能够在片段着色器中设置片段深度值 |\n| EXT_sRGB | 为 FrameBuffer 提供sRGB支持 |\n| EXT_shader_texture_lod | 为着色器提供LOD能力 |\n| EXT_texture_filter_anisotropic | 提高斜角观察质量 |\n| OES_element_index_uint | 使 drawElements 支持 UNSIGNED_INT 类型|\n| OES_standard_derivatives | 为着色器提供 `dFdx/dFdy/fwidth` 函数 |\n| OES_texture_float | 为材质添加 FLOAT 类型 |\n| OES_texture_float_linear | 允许材质的线性过滤 |\n| OES_texture_half_float | 为材质添加 16 位支持 |\n| OES_texture_half_float_linear | 允许16 位材质精度的线性过滤 |\n| OES_vertex_array_object | 提供压缩顶点数组的方法，指向不同顶点数据缓存 |\n| WEBGL_color_buffer_float | 允许输出32位颜色缓冲 |\n| WEBGL_compressed_texture_astc | exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL. |\n| WEBGL_compressed_texture_atc | exposes 3 ATC compressed texture formats. |\n| WEBGL_compressed_texture_etc | exposes 10 ETC/EAC compressed texture formats |\n| WEBGL_compressed_texture_etc1 | exposes the ETC1 compressed texture format. |\n| WEBGL_compressed_texture_pvrtc | exposes four PVRTC compressed texture formats. |\n| WEBGL_compressed_texture_s3tc | exposes four S3TC compressed texture formats. |\n| WEBGL_compressed_texture_s3tc_srgb | exposes four S3TC compressed texture formats for the sRGB colorspace. |\n| WEBGL_debug_renderer_info | 获取渲染信息（公司等） |\n| WEBGL_debug_shaders | 获取着色器源码信息 |\n| WEBGL_depth_texture | 定义深度和深度模板材质 |\n| WEBGL_draw_buffers | 允许着色器一次性输出多张材质，对延迟渲染大有帮助 |\n| WEBGL_lose_context | 暴露上下文丢失和恢复函数 |\n\n## 引用\n\n* [WebGLRenderingContext](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext)\n\n> 另外：欢迎邮件交流。\n"},{"title":"【博客更新】2020新版","excerpt":"<p>用了很长时间的 <code>Hexo</code> 博客，各方面都很满意。静态化本身对博客应用来说是真的很有亲和力，访问速度不仅快，更新也方便，所以改版后还是保留这一特性。</p>\n","url":"/2020/01/20/介绍/【博客更新】2020新版","fromDate":"2020-01-20","category":"介绍","text":"<p>用了很长时间的 <code>Hexo</code> 博客，各方面都很满意。静态化本身对博客应用来说是真的很有亲和力，访问速度不仅快，更新也方便，所以改版后还是保留这一特性。</p>\n<!-- more -->\n<h2>Hexo 不能解决的问题</h2>\n<p>首先是，不支持匿名评论。之前使用码云的服务做了一个第三方评论，但是终究还是需要第三方账号，很不方便留言互动。</p>\n<p>其次是，不支持使用 iframe 嵌入其他页面。这个也不是说不可以，但是就是很麻烦，还需要自己写一个行内html才能行。</p>\n<p>再次是，最早自己做了一个自动化的部署方式，现在提交一篇文章就能更新博客，不能说不方便，但是仍然需要为自动化部署维护一个仓库，也很麻烦，博客本身并不支持状态，很多文章都是草稿，并不想发出来。</p>\n<p>最后是，发布文章的时候只能在自己博客，想要发布到别的博客平台或者公众号就更麻烦了。</p>\n<p>当然还有一些小的问题，我想凑不上一个点，但是也很令人烦躁，比如博客内改样式，嵌入js等都不是很方便。</p>\n<p>所以为了解决这些问题，最终还是决定对博客进行更新，先完成现有功能，后边慢慢修改完善。</p>\n<h2>新博客</h2>\n<p>新博客技术栈比较简单，改用了我比较熟悉的java作为开发语言。</p>\n<p>首先，对博客数据进行了格式化，使用中间数据库存储所有博客相关数据。这样传入和导出就有中间格式，两边操作就可以隔离了。</p>\n<p>其次，是博客数据头的标准化，因为之前使用的yaml格式不是很标准，现在改写了所有的博客文章为标准的yaml格式。</p>\n<p>最后，就是对原有功能的支持，路由仍然使用原来的方式进行。</p>\n<p>模板功能目前解决了，嵌入iframe、增加页面样式和js、自动部署、主题这些问题。</p>\n<p>列入计划的是匿名评论和多博客平台支持，留下来慢慢开发。</p>\n","hasMore":true,"tags":["博客改版"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【博客更新】2020新版\ntags:\n  - 博客改版\ncategories: 介绍\ndate: 2020-01-20\nstatus: published\n\n---\n\n用了很长时间的 `Hexo` 博客，各方面都很满意。静态化本身对博客应用来说是真的很有亲和力，访问速度不仅快，更新也方便，所以改版后还是保留这一特性。\n\n<!-- more -->\n\n## Hexo 不能解决的问题\n\n首先是，不支持匿名评论。之前使用码云的服务做了一个第三方评论，但是终究还是需要第三方账号，很不方便留言互动。\n\n其次是，不支持使用 iframe 嵌入其他页面。这个也不是说不可以，但是就是很麻烦，还需要自己写一个行内html才能行。\n\n再次是，最早自己做了一个自动化的部署方式，现在提交一篇文章就能更新博客，不能说不方便，但是仍然需要为自动化部署维护一个仓库，也很麻烦，博客本身并不支持状态，很多文章都是草稿，并不想发出来。\n\n最后是，发布文章的时候只能在自己博客，想要发布到别的博客平台或者公众号就更麻烦了。\n\n当然还有一些小的问题，我想凑不上一个点，但是也很令人烦躁，比如博客内改样式，嵌入js等都不是很方便。\n\n所以为了解决这些问题，最终还是决定对博客进行更新，先完成现有功能，后边慢慢修改完善。\n\n## 新博客\n\n新博客技术栈比较简单，改用了我比较熟悉的java作为开发语言。\n\n首先，对博客数据进行了格式化，使用中间数据库存储所有博客相关数据。这样传入和导出就有中间格式，两边操作就可以隔离了。\n\n其次，是博客数据头的标准化，因为之前使用的yaml格式不是很标准，现在改写了所有的博客文章为标准的yaml格式。\n\n最后，就是对原有功能的支持，路由仍然使用原来的方式进行。\n\n模板功能目前解决了，嵌入iframe、增加页面样式和js、自动部署、主题这些问题。\n\n列入计划的是匿名评论和多博客平台支持，留下来慢慢开发。\n"},{"title":"【学习WebGL系列.205.003】模型数据结构之GlTF扩展NJ_lod_ground","excerpt":"<blockquote>\n<p>这个扩展为 GlTF 场景增加地图瓦片扩展，主要是为 <a href=\"https://www.nothingjs.com\">NothingJs</a> 网站实现的。</p>\n</blockquote>\n","url":"/2019/11/21/三维技术/【学习WebGL系列.205.003】模型数据结构之GlTF扩展NJ_lod_ground","fromDate":"2019-11-21","category":"三维技术","text":"<blockquote>\n<p>这个扩展为 GlTF 场景增加地图瓦片扩展，主要是为 <a href=\"https://www.nothingjs.com\">NothingJs</a> 网站实现的。</p>\n</blockquote>\n<!-- more -->\n<h2>贡献者</h2>\n<ul>\n<li>Zhoyq, NothingJs, <a href=\"https://www.zhoyq.com\">@zhoyq</a></li>\n</ul>\n<h2>状态</h2>\n<p>草案</p>\n<h2>依赖</h2>\n<p>依赖 glTF 2.0 定义</p>\n<h2>概述</h2>\n<p>此扩展为 glTF 2.0 场景定义了一个瓦片图扩展。</p>\n<h2>glTF 结构更新</h2>\n<h3>实例</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scenes&quot;: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">        &quot;extensions&quot;: {</span><br><span class=\"line\">            &quot;NJ_lod_ground&quot;: {</span><br><span class=\"line\">                &quot;ground&quot;: 0</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;extensions&quot;: {</span><br><span class=\"line\">    &quot;NJ_lod_ground&quot;: {</span><br><span class=\"line\">        &quot;grounds&quot;: [</span><br><span class=\"line\">          {</span><br><span class=\"line\">              &quot;url&quot;: &quot;http://mt2.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;gl=cn&amp;x={x}&amp;y={y}&amp;z={z}&quot;,</span><br><span class=\"line\">              &quot;center&quot;: [116.397428, 39.90923],</span><br><span class=\"line\">              &quot;levelBoundary&quot;: [0, 15]</span><br><span class=\"line\">          }</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    },</span><br><span class=\"line\">},</span><br><span class=\"line\">&quot;extensionsUsed&quot;: [</span><br><span class=\"line\">  &quot;NJ_lod_ground&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li><strong>url</strong> 代表瓦片服务地址 x y z 代表瓦片坐标和缩放等级</li>\n<li><strong>center</strong> 显示地图中心点</li>\n<li><strong>levelBoundary</strong> 显示层级范围</li>\n</ul>\n<h2>已知实现</h2>\n<ul>\n<li><a href=\"https://www.nothingjs.com\">NothingJs</a> - 目前仅实现对接谷歌地图瓦片</li>\n</ul>\n","hasMore":true,"tags":["学习WEBGL系列","模型数据结构","GlTF","扩展","NJ_lod_ground"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【学习WebGL系列.205.003】模型数据结构之GlTF扩展NJ_lod_ground\ntags:\n  - 学习WEBGL系列\n  - 模型数据结构\n  - GlTF\n  - 扩展\n  - NJ_lod_ground\ncategories: 三维技术\ndate: 2019-11-21\nstatus: published\n\n---\n\n> 这个扩展为 GlTF 场景增加地图瓦片扩展，主要是为 [NothingJs](https://www.nothingjs.com) 网站实现的。\n\n<!-- more -->\n\n## 贡献者\n\n* Zhoyq, NothingJs, [@zhoyq](https://www.zhoyq.com)\n\n## 状态\n\n草案\n\n## 依赖\n\n依赖 glTF 2.0 定义\n\n## 概述\n\n此扩展为 glTF 2.0 场景定义了一个瓦片图扩展。\n\n## glTF 结构更新\n\n### 实例\n\n```json\n\"scenes\": [\n    {\n        \"extensions\": {\n            \"NJ_lod_ground\": {\n                \"ground\": 0\n            }\n        }\n    }\n],\n\"extensions\": {\n    \"NJ_lod_ground\": {\n        \"grounds\": [\n          {\n              \"url\": \"http://mt2.google.cn/vt/lyrs=s&hl=zh-CN&gl=cn&x={x}&y={y}&z={z}\",\n              \"center\": [116.397428, 39.90923],\n              \"levelBoundary\": [0, 15]\n          }\n        ]\n    },\n},\n\"extensionsUsed\": [\n  \"NJ_lod_ground\"\n]\n```\n\n* **url** 代表瓦片服务地址 x y z 代表瓦片坐标和缩放等级\n* **center** 显示地图中心点\n* **levelBoundary** 显示层级范围\n\n## 已知实现\n\n* [NothingJs](https://www.nothingjs.com) - 目前仅实现对接谷歌地图瓦片\n"},{"title":"【学习WebGL系列.205.003】模型数据结构之GlTF扩展NJ_skybox","excerpt":"<blockquote>\n<p>这个扩展为 GlTF 场景增加天空盒定义，主要是为 <a href=\"https://www.nothingjs.com\">NothingJs</a> 网站实现的。</p>\n</blockquote>\n","url":"/2019/11/10/三维技术/【学习WebGL系列.205.003】模型数据结构之GlTF扩展NJ_skybox","fromDate":"2019-11-10","category":"三维技术","text":"<blockquote>\n<p>这个扩展为 GlTF 场景增加天空盒定义，主要是为 <a href=\"https://www.nothingjs.com\">NothingJs</a> 网站实现的。</p>\n</blockquote>\n<!-- more -->\n<h2>贡献者</h2>\n<ul>\n<li>Zhoyq, NothingJs, <a href=\"https://www.zhoyq.com\">@zhoyq</a></li>\n</ul>\n<h2>状态</h2>\n<p>草案</p>\n<h2>依赖</h2>\n<p>依赖 glTF 2.0 定义</p>\n<h2>概述</h2>\n<p>此扩展为 glTF 2.0 场景定义了一个天空盒扩展。一共有三种类型：</p>\n<ul>\n<li>background: 背景图片</li>\n<li>cube: 天空盒</li>\n<li>sphericalHarmonic: 辐照度计算天空盒</li>\n</ul>\n<h2>glTF 结构更新</h2>\n<h3>实例</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;images&quot; : [</span><br><span class=\"line\">  {</span><br><span class=\"line\">      &quot;uri&quot;: &quot;right_0.hdr&quot;,</span><br><span class=\"line\">      &quot;mimeType&quot;: &quot;image/vnd.radiance&quot;</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">      &quot;uri&quot;: &quot;left_0.hdr&quot;,</span><br><span class=\"line\">      &quot;mimeType&quot;: &quot;image/vnd.radiance&quot;</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">      &quot;uri&quot;: &quot;top_0.hdr&quot;,</span><br><span class=\"line\">      &quot;mimeType&quot;: &quot;image/vnd.radiance&quot;</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">      &quot;uri&quot;: &quot;bottom_0.hdr&quot;,</span><br><span class=\"line\">      &quot;mimeType&quot;: &quot;image/vnd.radiance&quot;</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">      &quot;uri&quot;: &quot;front_0.hdr&quot;,</span><br><span class=\"line\">      &quot;mimeType&quot;: &quot;image/vnd.radiance&quot;</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">      &quot;uri&quot;: &quot;back_0.hdr&quot;,</span><br><span class=\"line\">      &quot;mimeType&quot;: &quot;image/vnd.radiance&quot;</span><br><span class=\"line\">  }</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;scenes&quot;: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">        &quot;extensions&quot;: {</span><br><span class=\"line\">            &quot;NJ_skybox&quot;: {</span><br><span class=\"line\">                &quot;skybox&quot;: 0</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;extensions&quot;: {</span><br><span class=\"line\">    &quot;NJ_skybox&quot;: {</span><br><span class=\"line\">        &quot;skyboxs&quot;: [</span><br><span class=\"line\">            {</span><br><span class=\"line\">                &quot;type&quot;: &quot;background&quot;,</span><br><span class=\"line\">                &quot;data&quot;: [ 0 ]</span><br><span class=\"line\">            },</span><br><span class=\"line\">            {</span><br><span class=\"line\">                &quot;type&quot;: &quot;cube&quot;,</span><br><span class=\"line\">                &quot;data&quot;: [ 0, 1, 2, 3, 4, 5 ]</span><br><span class=\"line\">            },</span><br><span class=\"line\">            {</span><br><span class=\"line\">                &quot;type&quot;: &quot;sphericalHarmonic&quot;,</span><br><span class=\"line\">                &quot;data&quot;: [</span><br><span class=\"line\">                    1.0, 1.0, 0.0,</span><br><span class=\"line\">                    0.2, 0.0, 0.2,</span><br><span class=\"line\">                    0.0, 0.3, 0.3,</span><br><span class=\"line\">                    0.4, 0.0, 0.4,</span><br><span class=\"line\">                    0.5, 0.5, 0.0,</span><br><span class=\"line\">                    0.6, 0.0, 0.6,</span><br><span class=\"line\">                    0.0, 0.7, 0.7,</span><br><span class=\"line\">                    0.8, 0.0, 0.8,</span><br><span class=\"line\">                    0.9, 0.9, 0.0</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            }</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    }</span><br><span class=\"line\">},</span><br><span class=\"line\">&quot;extensionsUsed&quot;: [</span><br><span class=\"line\">  &quot;NJ_skybox&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n<h2>已知实现</h2>\n<ul>\n<li><a href=\"https://www.nothingjs.com\">NothingJs</a></li>\n</ul>\n","hasMore":true,"tags":["学习WEBGL系列","模型数据结构","GlTF","扩展","NJ_skybox"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【学习WebGL系列.205.003】模型数据结构之GlTF扩展NJ_skybox\ntags:\n  - 学习WEBGL系列\n  - 模型数据结构\n  - GlTF\n  - 扩展\n  - NJ_skybox\ncategories: 三维技术\ndate: 2019-11-10\nstatus: published\n\n---\n\n> 这个扩展为 GlTF 场景增加天空盒定义，主要是为 [NothingJs](https://www.nothingjs.com) 网站实现的。\n\n<!-- more -->\n\n## 贡献者\n\n* Zhoyq, NothingJs, [@zhoyq](https://www.zhoyq.com)\n\n## 状态\n\n草案\n\n## 依赖\n\n依赖 glTF 2.0 定义\n\n## 概述\n\n此扩展为 glTF 2.0 场景定义了一个天空盒扩展。一共有三种类型：\n\n* background: 背景图片\n* cube: 天空盒\n* sphericalHarmonic: 辐照度计算天空盒\n\n## glTF 结构更新\n\n### 实例\n\n```json\n\"images\" : [\n  {\n      \"uri\": \"right_0.hdr\",\n      \"mimeType\": \"image/vnd.radiance\"\n  },\n  {\n      \"uri\": \"left_0.hdr\",\n      \"mimeType\": \"image/vnd.radiance\"\n  },\n  {\n      \"uri\": \"top_0.hdr\",\n      \"mimeType\": \"image/vnd.radiance\"\n  },\n  {\n      \"uri\": \"bottom_0.hdr\",\n      \"mimeType\": \"image/vnd.radiance\"\n  },\n  {\n      \"uri\": \"front_0.hdr\",\n      \"mimeType\": \"image/vnd.radiance\"\n  },\n  {\n      \"uri\": \"back_0.hdr\",\n      \"mimeType\": \"image/vnd.radiance\"\n  }\n],\n\"scenes\": [\n    {\n        \"extensions\": {\n            \"NJ_skybox\": {\n                \"skybox\": 0\n            }\n        }\n    }\n],\n\"extensions\": {\n    \"NJ_skybox\": {\n        \"skyboxs\": [\n            {\n                \"type\": \"background\",\n                \"data\": [ 0 ]\n            },\n            {\n                \"type\": \"cube\",\n                \"data\": [ 0, 1, 2, 3, 4, 5 ]\n            },\n            {\n                \"type\": \"sphericalHarmonic\",\n                \"data\": [\n                    1.0, 1.0, 0.0,\n                    0.2, 0.0, 0.2,\n                    0.0, 0.3, 0.3,\n                    0.4, 0.0, 0.4,\n                    0.5, 0.5, 0.0,\n                    0.6, 0.0, 0.6,\n                    0.0, 0.7, 0.7,\n                    0.8, 0.0, 0.8,\n                    0.9, 0.9, 0.0\n                ]\n            }\n        ]\n    }\n},\n\"extensionsUsed\": [\n  \"NJ_skybox\"\n]\n```\n\n## 已知实现\n\n* [NothingJs](https://www.nothingjs.com)\n\n"},{"title":"【书信】郭德纲写给郭麒麟的信","excerpt":"<blockquote>\n<p>早早就有这么一封书信，记录下来时刻警醒。</p>\n</blockquote>\n","url":"/2019/06/13/转载/【书信】郭德纲写给郭麒麟的信","fromDate":"2019-06-13","category":"转载","text":"<blockquote>\n<p>早早就有这么一封书信，记录下来时刻警醒。</p>\n</blockquote>\n<!-- more -->\n<p>甲午年，正月初九。我儿子十八了，正所谓成人长大。学名奇临，取奇妙降临之意。后下海，艺名麒麟，乃仿周大师之遗韵。人生一世，极不容易。</p>\n<p>登天难，求人更难。黄连苦，无钱更苦。江湖险，人心更险。春冰薄，人情更薄。过去有句话：既落江湖内，便是薄命人。我本不愿儿从艺，奈何人自有志，无法横拦。但有几句话，要说清楚。艺人分几类，相隔种种。一是普通艺人，有一技之长，凭能耐吃饭。一是名演员，知名度高，但不代表艺术高，此类要两说。一是角儿，何为角儿?舞台上的顶梁柱，剧团班社的灵魂。贴出你的名字要保证卖得出票，全团老少指着你吃饭。角儿是有责任的艺人。</p>\n<p>郭麒麟刚十八，我不希望儿子大红。人红麻烦多，一大三大，名气大后，开销大压力大是非大。红起来容易，难的是接住自己。年三十吃顿饺子容易，之后呢?得天天吃饺子才行啊，可你有那么多的面和馅儿吗?所以，要多下功夫，并且要保持一个好心态。很多人不成功的原因主要是太尊重自己了。</p>\n<p>一个人刚出道，不狂是没有出息的。但如果一直狂，是肯定没出息的。你眼中的你，和别人眼中的你，不是一回事。无限赞美自己，只是一种胆怯。我一直认为，恐惧到头就是愤怒。发挥无敌想象，给自己描绘了一个童话世界，白衣如雪来去如风。剑影刀光闪过后，你满脸冷酷的立于珠峰顶端，傲视苍生无比英武。此时我要问的是：孩子，你怎么下去?不让古人，是谓有志。不让今人，是谓无良。</p>\n<p>有的演员，三级能耐，享受一级待遇，有艺术家的脾气，心里是大师的状态，结果看上去象个相声爱好者。至于艺术，一言难尽。记住了，小俗便雅，大雅则俗。有人夸你，别信。有人骂你，别听。周围人随意捧骂，不可与之交，因其无至性也。另外，凡事要慎重。</p>\n<p>一入江湖深似海，从此节操是路人。此语虽玩笑，但话中话要三思。江湖子弟，拿得起来放得下。身边人很重要。一根稻草，扔街上就是垃圾，捆上白菜就是白菜价，捆上大闸蟹就是闸蟹价。包括脚下的平台，也极重要。同样是一个人，步行一小时能走多远?骑车呢?开车呢?坐飞机呢?平台会决定你的速度，且记且记。</p>\n<p>此外，钱财要珍惜，但不可看得太重。财乃天地至公之物，假手于人罢了，雨打残花风卷流云。轮番更转而已，穷转富，富转穷，哪有百世富家翁?至于交友，吃点亏也无妨。记住，言语多反复，当防欺诈。忘恩思小过，定会反戈。开口说大义，临大难必变节。逢人称兄弟，即深交也平常。人每所谓穷通寿夭为命所系，岂不知造物之报施，全视人之自取。芸芸众生富贵贫寒，不是谁都可以傲视乾坤。其中有命有运，要知因果懂善恶，我儿且记，但行好事，莫问前程。</p>\n","hasMore":true,"tags":["郭德纲","郭麒麟"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【书信】郭德纲写给郭麒麟的信\ntags:\n  - 郭德纲\n  - 郭麒麟\ncategories: 转载\ndate: 2019-06-13\nstatus: published\n\n---\n\n> 早早就有这么一封书信，记录下来时刻警醒。\n\n<!-- more -->\n\n甲午年，正月初九。我儿子十八了，正所谓成人长大。学名奇临，取奇妙降临之意。后下海，艺名麒麟，乃仿周大师之遗韵。人生一世，极不容易。\n\n登天难，求人更难。黄连苦，无钱更苦。江湖险，人心更险。春冰薄，人情更薄。过去有句话：既落江湖内，便是薄命人。我本不愿儿从艺，奈何人自有志，无法横拦。但有几句话，要说清楚。艺人分几类，相隔种种。一是普通艺人，有一技之长，凭能耐吃饭。一是名演员，知名度高，但不代表艺术高，此类要两说。一是角儿，何为角儿?舞台上的顶梁柱，剧团班社的灵魂。贴出你的名字要保证卖得出票，全团老少指着你吃饭。角儿是有责任的艺人。\n\n郭麒麟刚十八，我不希望儿子大红。人红麻烦多，一大三大，名气大后，开销大压力大是非大。红起来容易，难的是接住自己。年三十吃顿饺子容易，之后呢?得天天吃饺子才行啊，可你有那么多的面和馅儿吗?所以，要多下功夫，并且要保持一个好心态。很多人不成功的原因主要是太尊重自己了。\n\n一个人刚出道，不狂是没有出息的。但如果一直狂，是肯定没出息的。你眼中的你，和别人眼中的你，不是一回事。无限赞美自己，只是一种胆怯。我一直认为，恐惧到头就是愤怒。发挥无敌想象，给自己描绘了一个童话世界，白衣如雪来去如风。剑影刀光闪过后，你满脸冷酷的立于珠峰顶端，傲视苍生无比英武。此时我要问的是：孩子，你怎么下去?不让古人，是谓有志。不让今人，是谓无良。\n\n有的演员，三级能耐，享受一级待遇，有艺术家的脾气，心里是大师的状态，结果看上去象个相声爱好者。至于艺术，一言难尽。记住了，小俗便雅，大雅则俗。有人夸你，别信。有人骂你，别听。周围人随意捧骂，不可与之交，因其无至性也。另外，凡事要慎重。\n\n一入江湖深似海，从此节操是路人。此语虽玩笑，但话中话要三思。江湖子弟，拿得起来放得下。身边人很重要。一根稻草，扔街上就是垃圾，捆上白菜就是白菜价，捆上大闸蟹就是闸蟹价。包括脚下的平台，也极重要。同样是一个人，步行一小时能走多远?骑车呢?开车呢?坐飞机呢?平台会决定你的速度，且记且记。\n\n此外，钱财要珍惜，但不可看得太重。财乃天地至公之物，假手于人罢了，雨打残花风卷流云。轮番更转而已，穷转富，富转穷，哪有百世富家翁?至于交友，吃点亏也无妨。记住，言语多反复，当防欺诈。忘恩思小过，定会反戈。开口说大义，临大难必变节。逢人称兄弟，即深交也平常。人每所谓穷通寿夭为命所系，岂不知造物之报施，全视人之自取。芸芸众生富贵贫寒，不是谁都可以傲视乾坤。其中有命有运，要知因果懂善恶，我儿且记，但行好事，莫问前程。\n"},{"title":"【Node】Node依赖下载加速","excerpt":"<!--  more -->\n<h2>临时指定镜像源</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;registry-name&gt; --registry https://registry.npmjs.org</span><br></pre></td></tr></tbody></table></figure>\n<h2>永久设置</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm config set registry https://registry.npmjs.org  </span><br></pre></td></tr></tbody></table></figure>\n<h2>安装定制的cnpm命令行工具</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>\n<h2>npm镜像源站点</h2>\n<ul>\n<li><a href=\"https://registry.npmjs.org\">https://registry.npmjs.org</a></li>\n<li><a href=\"https://r.cnpmjs.org\">https://r.cnpmjs.org</a></li>\n<li><a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></li>\n</ul>\n","url":"/2019/03/11/技术笔记/【Node】Node依赖下载加速","fromDate":"2019-03-11","category":"技术笔记","text":"<!--  more -->\n<h2>临时指定镜像源</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;registry-name&gt; --registry https://registry.npmjs.org</span><br></pre></td></tr></tbody></table></figure>\n<h2>永久设置</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm config set registry https://registry.npmjs.org  </span><br></pre></td></tr></tbody></table></figure>\n<h2>安装定制的cnpm命令行工具</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>\n<h2>npm镜像源站点</h2>\n<ul>\n<li><a href=\"https://registry.npmjs.org\">https://registry.npmjs.org</a></li>\n<li><a href=\"https://r.cnpmjs.org\">https://r.cnpmjs.org</a></li>\n<li><a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></li>\n</ul>\n","hasMore":false,"tags":["node"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【Node】Node依赖下载加速\ntags:\n  - node\ncategories: 技术笔记\ndate: 2019-03-11\nstatus: published\n\n---\n\n<!--  more -->\n\n## 临时指定镜像源\n\n```bash\nnpm install <registry-name> --registry https://registry.npmjs.org\n```\n\n## 永久设置\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\nnpm config set registry https://registry.npmjs.org  \n```\n\n## 安装定制的cnpm命令行工具\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n## npm镜像源站点\n\n* [https://registry.npmjs.org](https://registry.npmjs.org)\n* [https://r.cnpmjs.org](https://r.cnpmjs.org)\n* [https://registry.npm.taobao.org](https://registry.npm.taobao.org)\n"},{"title":"【敏捷开发】对SCRUM与TDD的理解","excerpt":"<p>充分理解之后的再反对，总不能说我站着说话不腰疼了吧。</p>\n<p>一年以来我感觉自己对<code>SCRUM</code>的态度有些变化，因为实在与现在的工作无关，也就缺少必要的关注了。还有一些原因是自己身在‘池塘’，就算想着干爽也是不可能的。近来又在推行测试驱动开发（下文<code>TDD</code>）我就想把自己的理解写一写，记录一下，以免忘记了。</p>\n","url":"/2019/02/20/管理/【敏捷开发】对SCRUM与TDD的理解","fromDate":"2019-02-20","category":"管理","text":"<p>充分理解之后的再反对，总不能说我站着说话不腰疼了吧。</p>\n<p>一年以来我感觉自己对<code>SCRUM</code>的态度有些变化，因为实在与现在的工作无关，也就缺少必要的关注了。还有一些原因是自己身在‘池塘’，就算想着干爽也是不可能的。近来又在推行测试驱动开发（下文<code>TDD</code>）我就想把自己的理解写一写，记录一下，以免忘记了。</p>\n<!-- more -->\n<h2>目标：流水线方式是为了让不同程度的人更好的契合在一起，能够迸发出高水平的实力。</h2>\n<p><code>SCRUM</code>本身就是一种流水线，<code>TDD</code>当然也是。简单的说，不管是<code>SCRUM</code>还是<code>TDD</code>目标都是提高团队交付高质量代码的能力。他们都允许失败，但是必须坚持不懈。说起来就这一点让人感觉很不爽，因为一开始的低质量和缓慢的进度都是这些流水线的副作用，也就没什么可以吐槽的地方了。但是真正的流水线却不会因为刚刚开始而效率低下，所以应该是流水线本身的问题（某些规定还是不详细）。所以如果进度比较慢，那也许我们的约定约束的方式太人性了。</p>\n<p><code>SCRUM</code>流水线是以<code>Sprint</code>为周期的，期间大概有计划会议、每日站会、开发工作、评审会、回顾会。<code>TDD</code>流水线是以测试开始的，流程大概有单元测试用例、开发工作、重构工作。当然集成测试、回归测试这些阶段性的环节，应该可以先在流水线里剔除，毕竟刚刚开始。这样看，<code>TDD</code>细化了<code>SCRUM</code>的开发工作。可以说两者是相辅相成，因为<code>SCRUM</code>重点突出快节奏，高质量，而开发时往往因为计划会的上手程度要大于开发工作，直接导致只是快节奏，而忽略了质量。而<code>TDD</code>则是慢节奏（相对来说，其实<code>TDD</code>也需要有一种紧迫感），高质量的。因为编码工作增加了一倍，工作时间当然也就延长了，这一点应该体现在<code>SCRUM</code>计划会的时候会估算更长的开发时间。但是一旦测试用例确定，代码质量理论上说是不会下降的，这就是相辅相成的重点吧。建议开发者测试用例写完或者开发过程中，有相应的审查机制，这样可以保证单元测试的质量。因为模具造车，模具有问题车自然会有问题。</p>\n<h2>形式上：两种规则的叠加</h2>\n<p>目前的流水线应该是：计划会、每日站会、开发工作（单元测试、开发、重构）、评审会、回顾会。工作量其实还是按照<code>SCRUM</code>上的定义，由开发者进行的。我想难点应该在计划会结束后，把分得的任务改成测试用例这一环节吧，当然重构应该是最难的，但是符合测试用例才是第一要求，结合的质量应该也在这个环节。工作量不好制定的一个原因是，<code>TDD</code>要求开发者不断测试最少实现代码，这就意味着<code>TDD</code>有可能是个死循环。当然流水线是死的，人是活的。但是仍然不建议人工干预太多，流水线的质量问题只能通过修改流水线来解决。刚开始，我猜想大概还是会先开发功能再开发测试用例。如果实在这样开发，建议不要把测试放到所有或者大部分功能完成之后再去完成，还是要一边开发功能一边测试。</p>\n<p>还有一个问题是单纯为了迎合<code>TDD</code>而出现的性能问题，一开始肯定会有估算时间太少的人。最后为了完成不影响绩效，或者是正常开发的时候，会有一种测试成功就好的错觉。最大的体现可能就是编码的性能问题，当然每个方法在运行测试的时候都可以编写单元测试规定运行完方法的时间来规避这个问题，但是这个时间是多少还是需要经验的。所以建议在<code>TDD</code>开发过程中就不断进行代码质量检查，让质量检查和测试用例一起规范开发人员的代码。</p>\n<h2>实际上：并不适合所有的项目</h2>\n<p>我也想过这个问题，<code>SCRUM</code>适合需求不断变化持续交付的项目，<code>TDD</code>则适合长期做产品（沉淀下来的测试用例，对产品的重构与业务沉淀具有巨大的意义）。但是这两种需求并不是所有的项目需求，所以显而易见结合后的规则并不适合所有的项目。我就面临这样尴尬的位置，硬件接口这边的数据转接服务，短则三天交付，长则十几天交付，这个时候代码行数甚至都不超过千行，一个人完全能够认领。如果还是按照<code>SCRUM</code>或者<code>TDD</code>的方式就有点本末倒置了，最终的目的不是为了盈利么？这种情况下我觉得就不需要这些所谓的规则了，因为千行的源代码是完全可读的。开发者能在短期内完全理解自己写过的东西，这个就完全够用了。</p>\n<h2>总结：实事求是，开拓创新</h2>\n<p>两者结合，只要实事求是我想一定能够让项目步入正轨，提高当然就需要开拓创新啦~</p>\n<p>PS. 我对敏捷的敌意当然还是不变的。</p>\n","hasMore":true,"tags":["SCRUM","TDD"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【敏捷开发】对SCRUM与TDD的理解\ntags:\n  - SCRUM\n  - TDD\ncategories: 管理\ndate: 2019-02-20\nstatus: published\n\n---\n\n充分理解之后的再反对，总不能说我站着说话不腰疼了吧。\n\n一年以来我感觉自己对`SCRUM`的态度有些变化，因为实在与现在的工作无关，也就缺少必要的关注了。还有一些原因是自己身在‘池塘’，就算想着干爽也是不可能的。近来又在推行测试驱动开发（下文`TDD`）我就想把自己的理解写一写，记录一下，以免忘记了。\n\n<!-- more -->\n\n## 目标：流水线方式是为了让不同程度的人更好的契合在一起，能够迸发出高水平的实力。\n\n`SCRUM`本身就是一种流水线，`TDD`当然也是。简单的说，不管是`SCRUM`还是`TDD`目标都是提高团队交付高质量代码的能力。他们都允许失败，但是必须坚持不懈。说起来就这一点让人感觉很不爽，因为一开始的低质量和缓慢的进度都是这些流水线的副作用，也就没什么可以吐槽的地方了。但是真正的流水线却不会因为刚刚开始而效率低下，所以应该是流水线本身的问题（某些规定还是不详细）。所以如果进度比较慢，那也许我们的约定约束的方式太人性了。\n\n`SCRUM`流水线是以`Sprint`为周期的，期间大概有计划会议、每日站会、开发工作、评审会、回顾会。`TDD`流水线是以测试开始的，流程大概有单元测试用例、开发工作、重构工作。当然集成测试、回归测试这些阶段性的环节，应该可以先在流水线里剔除，毕竟刚刚开始。这样看，`TDD`细化了`SCRUM`的开发工作。可以说两者是相辅相成，因为`SCRUM`重点突出快节奏，高质量，而开发时往往因为计划会的上手程度要大于开发工作，直接导致只是快节奏，而忽略了质量。而`TDD`则是慢节奏（相对来说，其实`TDD`也需要有一种紧迫感），高质量的。因为编码工作增加了一倍，工作时间当然也就延长了，这一点应该体现在`SCRUM`计划会的时候会估算更长的开发时间。但是一旦测试用例确定，代码质量理论上说是不会下降的，这就是相辅相成的重点吧。建议开发者测试用例写完或者开发过程中，有相应的审查机制，这样可以保证单元测试的质量。因为模具造车，模具有问题车自然会有问题。\n\n## 形式上：两种规则的叠加\n\n目前的流水线应该是：计划会、每日站会、开发工作（单元测试、开发、重构）、评审会、回顾会。工作量其实还是按照`SCRUM`上的定义，由开发者进行的。我想难点应该在计划会结束后，把分得的任务改成测试用例这一环节吧，当然重构应该是最难的，但是符合测试用例才是第一要求，结合的质量应该也在这个环节。工作量不好制定的一个原因是，`TDD`要求开发者不断测试最少实现代码，这就意味着`TDD`有可能是个死循环。当然流水线是死的，人是活的。但是仍然不建议人工干预太多，流水线的质量问题只能通过修改流水线来解决。刚开始，我猜想大概还是会先开发功能再开发测试用例。如果实在这样开发，建议不要把测试放到所有或者大部分功能完成之后再去完成，还是要一边开发功能一边测试。\n\n还有一个问题是单纯为了迎合`TDD`而出现的性能问题，一开始肯定会有估算时间太少的人。最后为了完成不影响绩效，或者是正常开发的时候，会有一种测试成功就好的错觉。最大的体现可能就是编码的性能问题，当然每个方法在运行测试的时候都可以编写单元测试规定运行完方法的时间来规避这个问题，但是这个时间是多少还是需要经验的。所以建议在`TDD`开发过程中就不断进行代码质量检查，让质量检查和测试用例一起规范开发人员的代码。\n\n## 实际上：并不适合所有的项目\n\n我也想过这个问题，`SCRUM`适合需求不断变化持续交付的项目，`TDD`则适合长期做产品（沉淀下来的测试用例，对产品的重构与业务沉淀具有巨大的意义）。但是这两种需求并不是所有的项目需求，所以显而易见结合后的规则并不适合所有的项目。我就面临这样尴尬的位置，硬件接口这边的数据转接服务，短则三天交付，长则十几天交付，这个时候代码行数甚至都不超过千行，一个人完全能够认领。如果还是按照`SCRUM`或者`TDD`的方式就有点本末倒置了，最终的目的不是为了盈利么？这种情况下我觉得就不需要这些所谓的规则了，因为千行的源代码是完全可读的。开发者能在短期内完全理解自己写过的东西，这个就完全够用了。\n\n## 总结：实事求是，开拓创新\n\n两者结合，只要实事求是我想一定能够让项目步入正轨，提高当然就需要开拓创新啦~\n\nPS. 我对敏捷的敌意当然还是不变的。\n"},{"title":"【JAVA】JDK8一些语言特性以及新增API记录","excerpt":"<blockquote>\n<p>涵盖：函数式编程、lambda表达式、接口新特性、api内函数接口、级联表达式和柯里化、Stream流编程</p>\n</blockquote>\n","url":"/2019/01/14/技术笔记/【JAVA】JDK8一些语言特性以及新增API记录","fromDate":"2019-01-14","category":"技术笔记","text":"<blockquote>\n<p>涵盖：函数式编程、lambda表达式、接口新特性、api内函数接口、级联表达式和柯里化、Stream流编程</p>\n</blockquote>\n<!-- more -->\n<h2>函数式编程</h2>\n<p>函数式编程不需要关注实现的细节。</p>\n<p>假如想要获取数组中数值的最小值，按照常规方式，需要使用排序或者查找算法，并且这个算法需要自己实现。在函数式编程中就会隐藏细节。例如：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取最小值</span><br><span class=\"line\">public static int min(int[] arr){</span><br><span class=\"line\">    // 获取最小值的实现</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args){</span><br><span class=\"line\">    int[] arr = new int[]{12,8,45,444,21};</span><br><span class=\"line\"></span><br><span class=\"line\">    int min_classic = min(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 而函数编程则是这样：</span><br><span class=\"line\">    int min_func = IntStream.of(arr).min().getAsInt();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2>lambda</h2>\n<p>实现函数接口（只有一个方法的接口）</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable runnable = () -&gt; System.out.println(&quot;lambda&quot;);</span><br></pre></td></tr></tbody></table></figure>\n<p>方法引用</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法引用</span><br><span class=\"line\">Consumer&lt;String&gt; consumer = Systme.out::println;</span><br><span class=\"line\">// 构造方法引用 使用 Object::new</span><br></pre></td></tr></tbody></table></figure>\n<h2>接口新特性</h2>\n<p>新注解： <code>@FunctionInterface</code> 用于注解函数接口</p>\n<p>默认方法</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionInterface</span><br><span class=\"line\">interface InterfaceDemo{</span><br><span class=\"line\"></span><br><span class=\"line\">    int plus(int x, int y);</span><br><span class=\"line\"></span><br><span class=\"line\">    default int add(int x, int y){</span><br><span class=\"line\">        return x + y;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2>api内函数接口</h2>\n<ul>\n<li>Predicate<T> 断言</li>\n<li>Consumer<T> 消费一个数据</li>\n<li>Function&lt;T, R&gt; 输入T输出R的函数</li>\n<li>Supplier<T> 提供一个数据</li>\n<li>UnaryOperator<T> 一元函数（输出输入类型相同）</li>\n<li>BiFunction&lt;T, U, R&gt; 2个输入的函数</li>\n<li>BinaryOperator<T> 二元函数（输出输入类型相同）</li>\n</ul>\n<h2>级联表达式和柯里化</h2>\n<p>级联表达式</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;Integer, Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt;&gt; func = x -&gt; y -&gt; z -&gt; x + y + z;</span><br><span class=\"line\"></span><br><span class=\"line\">func.apply(1).apply(2).apply(3);</span><br><span class=\"line\">// 6</span><br></pre></td></tr></tbody></table></figure>\n<p>柯里化：把多个参数的函数转化为只有一个参数的函数，用于标准化函数。</p>\n<h2>Stream流编程</h2>\n<p>创建</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collection.stream</span><br><span class=\"line\">Collection.parallelStream</span><br><span class=\"line\">Arrays.stream</span><br><span class=\"line\">IntStream/LongStream.range/rangeClosed</span><br><span class=\"line\">Random.ins/longs/doubles</span><br><span class=\"line\">Stream.generate/iterate</span><br></pre></td></tr></tbody></table></figure>\n<p>中间操作</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 无状态</span><br><span class=\"line\">map/mapToXxx</span><br><span class=\"line\">flatMap/flatMapToXxx</span><br><span class=\"line\">filter</span><br><span class=\"line\">peek</span><br><span class=\"line\">unordered</span><br><span class=\"line\"></span><br><span class=\"line\">// 有状态</span><br><span class=\"line\">distinct</span><br><span class=\"line\">sorted</span><br><span class=\"line\">limit/skip</span><br></pre></td></tr></tbody></table></figure>\n<p>终止操作</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 非短路操作</span><br><span class=\"line\">forEach/forEachOrdered</span><br><span class=\"line\">collect/toArray</span><br><span class=\"line\">reduce</span><br><span class=\"line\">min/max/count</span><br><span class=\"line\"></span><br><span class=\"line\">// 短路操作</span><br><span class=\"line\">findFirst/findAny</span><br><span class=\"line\">allMatch/anyMatch/noneMatch</span><br></pre></td></tr></tbody></table></figure>\n<p>并行流</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 并行</span><br><span class=\"line\">parallel()</span><br><span class=\"line\">// 串行</span><br><span class=\"line\">sequential()</span><br><span class=\"line\"></span><br><span class=\"line\">// 自定义线程池</span><br><span class=\"line\">ForkJoinPool pool = new ForkJoinPool(20);</span><br><span class=\"line\">pool.submit(() -&gt; stream.parallel().count());</span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></tbody></table></figure>\n<p>收集器</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 列表</span><br><span class=\"line\">stream().collect(Collectors.toList());</span><br><span class=\"line\">// 统计</span><br><span class=\"line\">stream().collect(Collectors.summarizingInt(Student::getAge));</span><br><span class=\"line\">// 分块</span><br><span class=\"line\">stream().collect(Collectors.partitioningBy(s -&gt; s.getGender() == Gender.MALE));</span><br><span class=\"line\">// 分组</span><br><span class=\"line\">stream().collect(Collectors.groupBy(Student::getGrade));</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["JDK8","JAVA","语言特性"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【JAVA】JDK8一些语言特性以及新增API记录\ntags:\n  - JDK8\n  - JAVA\n  - 语言特性\ncategories: 技术笔记\ndate: 2019-01-14\nstatus: published\n\n---\n\n> 涵盖：函数式编程、lambda表达式、接口新特性、api内函数接口、级联表达式和柯里化、Stream流编程\n\n<!-- more -->\n\n## 函数式编程\n\n函数式编程不需要关注实现的细节。\n\n假如想要获取数组中数值的最小值，按照常规方式，需要使用排序或者查找算法，并且这个算法需要自己实现。在函数式编程中就会隐藏细节。例如：\n\n```java\n// 获取最小值\npublic static int min(int[] arr){\n    // 获取最小值的实现\n}\n\npublic static void main(String[] args){\n    int[] arr = new int[]{12,8,45,444,21};\n\n    int min_classic = min(arr);\n\n    // 而函数编程则是这样：\n    int min_func = IntStream.of(arr).min().getAsInt();\n}\n\n```\n\n## lambda\n\n实现函数接口（只有一个方法的接口）\n\n```java\nRunnable runnable = () -> System.out.println(\"lambda\");\n```\n\n方法引用\n\n```java\n// 方法引用\nConsumer<String> consumer = Systme.out::println;\n// 构造方法引用 使用 Object::new\n```\n\n## 接口新特性\n\n新注解： `@FunctionInterface` 用于注解函数接口\n\n默认方法\n\n```java\n@FunctionInterface\ninterface InterfaceDemo{\n\n    int plus(int x, int y);\n\n    default int add(int x, int y){\n        return x + y;\n    }\n}\n```\n\n## api内函数接口\n\n* Predicate<T> 断言\n* Consumer<T> 消费一个数据\n* Function<T, R> 输入T输出R的函数\n* Supplier<T> 提供一个数据\n* UnaryOperator<T> 一元函数（输出输入类型相同）\n* BiFunction<T, U, R> 2个输入的函数\n* BinaryOperator<T> 二元函数（输出输入类型相同）\n\n## 级联表达式和柯里化\n\n级联表达式\n\n```java\nFunction<Integer, Function<Integer, Function<Integer, Integer>>> func = x -> y -> z -> x + y + z;\n\nfunc.apply(1).apply(2).apply(3);\n// 6\n```\n\n柯里化：把多个参数的函数转化为只有一个参数的函数，用于标准化函数。\n\n## Stream流编程\n\n创建\n\n```java\nCollection.stream\nCollection.parallelStream\nArrays.stream\nIntStream/LongStream.range/rangeClosed\nRandom.ins/longs/doubles\nStream.generate/iterate\n```\n\n中间操作\n\n```java\n// 无状态\nmap/mapToXxx\nflatMap/flatMapToXxx\nfilter\npeek\nunordered\n\n// 有状态\ndistinct\nsorted\nlimit/skip\n```\n\n终止操作\n\n```java\n// 非短路操作\nforEach/forEachOrdered\ncollect/toArray\nreduce\nmin/max/count\n\n// 短路操作\nfindFirst/findAny\nallMatch/anyMatch/noneMatch\n```\n\n并行流\n\n```java\n// 并行\nparallel()\n// 串行\nsequential()\n\n// 自定义线程池\nForkJoinPool pool = new ForkJoinPool(20);\npool.submit(() -> stream.parallel().count());\npool.shutdown();\n```\n\n收集器\n\n```java\n// 列表\nstream().collect(Collectors.toList());\n// 统计\nstream().collect(Collectors.summarizingInt(Student::getAge));\n// 分块\nstream().collect(Collectors.partitioningBy(s -> s.getGender() == Gender.MALE));\n// 分组\nstream().collect(Collectors.groupBy(Student::getGrade));\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"【出差】杭州出差小记","excerpt":"<blockquote>\n<p>我生平第一次去杭州，第一次与阿里员工接触，第一次入住汉庭酒店，第一次离开酒店之后还没发现自己的手机充电器忘在酒店了。</p>\n</blockquote>\n","url":"/2019/01/07/随笔/【出差】杭州出差小记","fromDate":"2019-01-07","category":"随笔","text":"<blockquote>\n<p>我生平第一次去杭州，第一次与阿里员工接触，第一次入住汉庭酒店，第一次离开酒店之后还没发现自己的手机充电器忘在酒店了。</p>\n</blockquote>\n<!-- more -->\n<p>我本来不打算来杭州的，嘴上说的也确实是不来。可是通知我的时候我却直接答应了，我想我是个表里不一的人。我讨厌外出的一个原因是陌生，或许这是大多数人的第一感觉。我是个非常敏感的人，原本熟悉的人事是可以在适应之后不再多想的，但是新的环境并不是这样。这样我很累，我会不自主的去想，比如我是不是过度依赖了别人，其实没人管我也能过的挺好，但是有人管了，就不想再自己想办法了。可能很多人都和我一样吧。这样的状态自己虽然厌恶，但是不能说这样不好，毕竟自己并不熟悉这里，有个人仰仗那是再好不过的。</p>\n<p>我还会出来么？说到这，我本是想要做个居家型的男人的。我问过一些同事，做开发是因为自己不善于交际，或者不想交际。我可能就是那个不太想交际的人。但古往今来，那么多人成名，成功，成势似乎都是善于交际的，就算起初并不擅长，但是最后一定是一呼百应的，只不过有的是被动的，而有的是主动改变的。我比较担心，自己的野心和自己的理想终将有一天会碰撞，然后孰优孰略都会令我崩溃吧。</p>\n<p>暂时并不想出来，一方面这种漂泊的感觉其实无时无刻不存在，但是从一个熟悉的地方飘到一个陌生的地方的时候自己内心还是很抗拒的。我在想，下次要怎么样拒绝呢？不能因为觉得麻烦而拒绝，只能靠我的老婆孩子了。说来最重要的是，心理上并没有那么周全的准备，我甚至还不清楚自己为什么要来。</p>\n<p>说到这，就不得不说公司的管理现状了。这种情况下，我都不知道这一年来公司到底有多少技术积累。可能这也不是我该想的问题，但是管理真的是差一大截呢。公司好在自由度是有的，但是这个自由没有束缚是不好的。目前来说项目的束缚就仅仅在技术的一面之词，做的了就做，做不了就吹，或者扯。这并不是做项目的态度吧。有时候甚至会冲破这层束缚，直接快要完成了才找到技术，我们这块需要你支援一下。这种时候，不接可能就是不道义的。因为已经到最后了，你不接项目就黄了。这分明是赤裸裸的胁迫。流程是死的，但是总也应该有一个，哪怕它“脏乱差”，做事情之前有个束缚人们就不会想当然去做了，也不会让事情失去控制。最后被骂的并不是做项目的团队，而是整个公司。这样做的不是口碑，而是墓碑。</p>\n<p>再说说项目经理，我不清楚我们公司对项目经理是怎么定义的，但是越来越多的人告诉我，那就是不择手段只要能按期交付项目就行的人。如果这样理解，或许我就能看懂一些项目经理的行为了。如果单纯的这样理解，我可以不可以认为这些项目经理就是项目杀手呢？人总要把眼光放得长远一些，有些客户关系并不是一次性的。而项目经理这种交付方式我个人觉得，是在逐渐的和客户偏离，甚至有时候都会敷衍了事最后对立起来。到底如何是项目，而用户又需要如何的项目呢？说到底是为了解决问题。而解决问题就需要能者，量力而行。人贵有自知之明，做项目而不自知，不自量力，公司可以撑一时，又如何撑一世呢？我想经营公司初衷，并不只是为了赚钱，一定有他的大意在。像我们，做可视化“让人们能更好的认知和管理这个世界”一样。这并不是一句空话，并且对大部分心中有理想的人都是有用的。如果这真的那么重要，我是说“让人们能更好的认知和管理这个世界”真的那么重要，为什么我们的项目会用这种心态去做呢？我很希望，我们的项目经理能够胜任他们的工作，我们做项目的心态，并不是冲一下业绩。当然想法过于理想，人总要温饱吧，可是温饱只是底线而已，游离在底线上的项目又如何实现我们的理想呢？</p>\n<p>再说说产品经理，实际上产品经理多应该是熟悉业务的人。因为一个产品经理决定了一个产品的发展方向，而这个方向没有业务作为主线去把控，结果一定是惨不忍睹的。而我们的产品，说实话很辛苦。不能说他们没有想法而是说他们没有得到应得的权利而已。产品控制权实际上并没有下放，实际上我们的产品经理也就算个产品助理而已。为什么这样呢？我认为第一点，公司并不信任这些初来乍到的年轻人。生怕他们把产品线做死。二是我们的股东也并不想放手吧，实际上大多创业公司也都是这样，股东辛辛苦苦的起家打天下，又如何能接受自己心中的产品往另一个方向发展呢？但有时候不理解，不愿意也好，股东真的没有那么大的魄力敢出奇制胜。相反年轻人有，但少有。千里马常有而伯乐不常有，意思其实就是这样的。人才也要有股东赏识不是么？一前一后，我们的产品也只能沦为平庸。</p>\n<p>市场真的那么好么？还是我们的销售很辛苦呢？认为现在公司市场好的可能都不知道火车票怎么买(笑话)，也许会说铁路运输这个还真没法比，人们出行离不开。那我们的3D可视化在未来家装生活商业不应该也是离不开的么？我们的大前方应该是一片生机才对。</p>\n<p>还有员工，员工之所以能够一直在自己的位置任劳任怨是因为：自主，胜任，归属。这其实是公司和员工双向的需求，目前为止开发离职无外乎这几点有一点被剥夺而已。</p>\n<p>说了太多无关的事情，因为闲了，就开始胡思乱想。第一次来杭州，不是西湖，不是龙井，我却对南方人的生活起居很感兴趣，但是明天就要离开了，出差本就是这样，也正因为这样，才很排斥。杭州太冷了，虽然温度比北京高。这是错觉么？</p>\n<p>说到底，还是恋家，因为聚少离多。</p>\n<p>​20190107 于 酒店客房</p>\n","hasMore":true,"tags":["出差随想"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【出差】杭州出差小记\ntags:\n  - 出差随想\ncategories: 随笔\ndate: 2019-01-07\nstatus: published\n\n---\n\n> 我生平第一次去杭州，第一次与阿里员工接触，第一次入住汉庭酒店，第一次离开酒店之后还没发现自己的手机充电器忘在酒店了。\n\n<!-- more -->\n\n我本来不打算来杭州的，嘴上说的也确实是不来。可是通知我的时候我却直接答应了，我想我是个表里不一的人。我讨厌外出的一个原因是陌生，或许这是大多数人的第一感觉。我是个非常敏感的人，原本熟悉的人事是可以在适应之后不再多想的，但是新的环境并不是这样。这样我很累，我会不自主的去想，比如我是不是过度依赖了别人，其实没人管我也能过的挺好，但是有人管了，就不想再自己想办法了。可能很多人都和我一样吧。这样的状态自己虽然厌恶，但是不能说这样不好，毕竟自己并不熟悉这里，有个人仰仗那是再好不过的。\n\n我还会出来么？说到这，我本是想要做个居家型的男人的。我问过一些同事，做开发是因为自己不善于交际，或者不想交际。我可能就是那个不太想交际的人。但古往今来，那么多人成名，成功，成势似乎都是善于交际的，就算起初并不擅长，但是最后一定是一呼百应的，只不过有的是被动的，而有的是主动改变的。我比较担心，自己的野心和自己的理想终将有一天会碰撞，然后孰优孰略都会令我崩溃吧。\n\n暂时并不想出来，一方面这种漂泊的感觉其实无时无刻不存在，但是从一个熟悉的地方飘到一个陌生的地方的时候自己内心还是很抗拒的。我在想，下次要怎么样拒绝呢？不能因为觉得麻烦而拒绝，只能靠我的老婆孩子了。说来最重要的是，心理上并没有那么周全的准备，我甚至还不清楚自己为什么要来。\n\n说到这，就不得不说公司的管理现状了。这种情况下，我都不知道这一年来公司到底有多少技术积累。可能这也不是我该想的问题，但是管理真的是差一大截呢。公司好在自由度是有的，但是这个自由没有束缚是不好的。目前来说项目的束缚就仅仅在技术的一面之词，做的了就做，做不了就吹，或者扯。这并不是做项目的态度吧。有时候甚至会冲破这层束缚，直接快要完成了才找到技术，我们这块需要你支援一下。这种时候，不接可能就是不道义的。因为已经到最后了，你不接项目就黄了。这分明是赤裸裸的胁迫。流程是死的，但是总也应该有一个，哪怕它“脏乱差”，做事情之前有个束缚人们就不会想当然去做了，也不会让事情失去控制。最后被骂的并不是做项目的团队，而是整个公司。这样做的不是口碑，而是墓碑。\n\n再说说项目经理，我不清楚我们公司对项目经理是怎么定义的，但是越来越多的人告诉我，那就是不择手段只要能按期交付项目就行的人。如果这样理解，或许我就能看懂一些项目经理的行为了。如果单纯的这样理解，我可以不可以认为这些项目经理就是项目杀手呢？人总要把眼光放得长远一些，有些客户关系并不是一次性的。而项目经理这种交付方式我个人觉得，是在逐渐的和客户偏离，甚至有时候都会敷衍了事最后对立起来。到底如何是项目，而用户又需要如何的项目呢？说到底是为了解决问题。而解决问题就需要能者，量力而行。人贵有自知之明，做项目而不自知，不自量力，公司可以撑一时，又如何撑一世呢？我想经营公司初衷，并不只是为了赚钱，一定有他的大意在。像我们，做可视化“让人们能更好的认知和管理这个世界”一样。这并不是一句空话，并且对大部分心中有理想的人都是有用的。如果这真的那么重要，我是说“让人们能更好的认知和管理这个世界”真的那么重要，为什么我们的项目会用这种心态去做呢？我很希望，我们的项目经理能够胜任他们的工作，我们做项目的心态，并不是冲一下业绩。当然想法过于理想，人总要温饱吧，可是温饱只是底线而已，游离在底线上的项目又如何实现我们的理想呢？\n\n再说说产品经理，实际上产品经理多应该是熟悉业务的人。因为一个产品经理决定了一个产品的发展方向，而这个方向没有业务作为主线去把控，结果一定是惨不忍睹的。而我们的产品，说实话很辛苦。不能说他们没有想法而是说他们没有得到应得的权利而已。产品控制权实际上并没有下放，实际上我们的产品经理也就算个产品助理而已。为什么这样呢？我认为第一点，公司并不信任这些初来乍到的年轻人。生怕他们把产品线做死。二是我们的股东也并不想放手吧，实际上大多创业公司也都是这样，股东辛辛苦苦的起家打天下，又如何能接受自己心中的产品往另一个方向发展呢？但有时候不理解，不愿意也好，股东真的没有那么大的魄力敢出奇制胜。相反年轻人有，但少有。千里马常有而伯乐不常有，意思其实就是这样的。人才也要有股东赏识不是么？一前一后，我们的产品也只能沦为平庸。\n\n市场真的那么好么？还是我们的销售很辛苦呢？认为现在公司市场好的可能都不知道火车票怎么买(笑话)，也许会说铁路运输这个还真没法比，人们出行离不开。那我们的3D可视化在未来家装生活商业不应该也是离不开的么？我们的大前方应该是一片生机才对。\n\n还有员工，员工之所以能够一直在自己的位置任劳任怨是因为：自主，胜任，归属。这其实是公司和员工双向的需求，目前为止开发离职无外乎这几点有一点被剥夺而已。\n\n说了太多无关的事情，因为闲了，就开始胡思乱想。第一次来杭州，不是西湖，不是龙井，我却对南方人的生活起居很感兴趣，但是明天就要离开了，出差本就是这样，也正因为这样，才很排斥。杭州太冷了，虽然温度比北京高。这是错觉么？\n\n说到底，还是恋家，因为聚少离多。\n\n​20190107 于 酒店客房\n"},{"title":"优秀到不能被忽视 - 我更看重自己的激情","excerpt":"<blockquote>\n<p>最近读了一本书叫做《SO GOOD THEY CAN'T IGNORE YOU》（优秀到不能被忽视）。可是作者并不知道大多数人都是那些被他同情的庸庸碌碌的人。同时我被作者牛气的人生以及令人诧异的就业观所折服，只能说人生不复杂，但是我们不能像作者一样简单的理解人生。</p>\n</blockquote>\n","url":"/2019/01/04/读书笔记/优秀到不能被忽视 - 我更看重自己的激情","fromDate":"2019-01-04","category":"读书笔记","text":"<blockquote>\n<p>最近读了一本书叫做《SO GOOD THEY CAN'T IGNORE YOU》（优秀到不能被忽视）。可是作者并不知道大多数人都是那些被他同情的庸庸碌碌的人。同时我被作者牛气的人生以及令人诧异的就业观所折服，只能说人生不复杂，但是我们不能像作者一样简单的理解人生。</p>\n</blockquote>\n<!-- more -->\n<h2>亲身经历</h2>\n<p>大学毕业之后我思考过自己的方向，那时候我认为保持一颗单纯的心是很难的，进入社会后有那么多的人选择了放弃自己的理想，去做一些甚至和自己一贯的行为原则相悖的事情，其实我知道大多数时候都是逼不得已，因为人人都这样，所以我决定要保持这颗单纯的本心。进入社会之后，结果可想而知，大多数时候都是很得罪人的，当然这其中也可能自己年轻气盛。我期间也想是不是要改变一下，但后来一句“不忘初心，方得始终”还是让我坚持了下来。我还记得是我的一个朋友，发了一个朋友圈，上面用钢笔字工工整整地写着“不忘初心，方得始终”，因为和我最初的想法不谋而合，所以就会有所感触。我从小就特别喜好计算机方面的事情，这个兴趣一直保留到现在，大学毕业本可以去做一个底层的公务员服务大众，但是为了自己想做的事情，最终还是放弃了。我对计算机的激情推动着我，在最困难的时候，坚持了下来。试想一个没有经历，没有资本的年轻人，甚至对计算机都一知半解，是什么让他敢在北京这个深不可测的城市里，贷款学习最终参加工作的？可能是初生牛犊不怕虎，但更多的就是自己的一腔热血。后来的工作中也会遇到一些事情，比如程序员最终还是要转型的，管理还是技术，我想我已经很明确了，这些事情也是我的激情帮我决定的。因为我热爱的还是计算机技术本身。也正式因为这份激情，我不断的打磨着自己的技术。</p>\n<p>当我读到这本书时它却告诉我，“激情是精通的附属品”的时候，我真的不敢苟同。因为最初的自己甚至不知道自己要学的是什么，将来会遇到什么样的困难。但就是对计算机很热情，才让我有了现在的职业。作者最初举了一个想要通过禅修获得幸福的失败的案例来说服读者‘没有人会为你的梦想埋单’。但是这句话和追随自己的激情有什么关系呢？作者仅仅是举了一个追随自己想法后来落空的实例来说明这些，显得有些单薄。托马斯的问题并不能说明激情不是一个好的选择，相反我倒是觉得托马斯这个人倒是非常的幼稚且无常。这么轻易就能对自己的追求予以否决。虽然我说不清楚所谓的禅修是什么，但是很明显托马斯并不虔诚。总结下来可能就会变成，一个半途而废的激情绝对不是一个好的选择。错不在激情，而是半途而废。</p>\n<h2>乔布斯的话，只说了一半</h2>\n<blockquote>\n<p>我终身相信的事实也许是错的，但那就是我的事实。</p>\n</blockquote>\n<p>乔布斯激励人们，“做你爱做的事，钱就来了”，是因为当世大多数人是利益至上的。不可否认乔布斯很会演讲，一些话，他总会隐去那些对听众来说容易让他们分心的词。其实他的意思是“做你爱做的事，当有人肯为你爱做的事情埋单的时候，钱就来了”。</p>\n<p>作者说了一个名词叫做激情假设，说我们先寻找激情，然后去寻找激情所匹配的职业。其实他是把动作拆分来理解的。但是现实是这些动作从来都不是孤立的。我们一定是一边做着事情，一边跟随激情的引导改进自己的方向。而作者反驳的恰恰是一个太过简单的逻辑，我们都知道那是错的。</p>\n<p>乔布斯一开始不管做什么，他的激情始终在控制上。千万不要理解成他的激情是为了做成一款电子产品，这样就太肤浅了。乔布斯是一直追随自己激情的，之所以选择电子产品行业是因为这个行业刚刚起步，而且他恰好有所想法当然也有唾手可得的资源。而在自己的选择之内，至于在什么行当体现又如何呢？作者说苹果公司的诞生不是出于激情，难道是计划好的吗？</p>\n<h2>激情和精通本就是相辅相成的</h2>\n<p>激情是精通的副产品，这句话很刺耳。让我们这些满怀激情做事的人，都有一些不好意思了。我是怀有激情的，但是要算精通，我绝对不是那个人。激情和精通可以是相辅相成的关系，激情让你坚持不懈去追求，而精通可以巩固你这份激情，说的深入一点其实也不是精通巩固的激情，而是被需要的感觉而已。</p>\n<p>人们急着生活和工作这件事，其实进入社会的人很简单就能理解，不是急而是被迫。</p>\n<p>任何事情一旦是强迫的完成的，大多经历都是人们难以忘怀的，甚至悲惨的。恰恰是激情，让我们不再觉得这件事情是被强迫的，而是我们自愿的追随着自己的想法而已。在不知道自己激情所在的时候，我们没有必要苦恼。就自然而然的发展，到头来你就在不断的调整中，寻求到了自己存在的意义。之所以调整是因为欲求，欲求本身不正是激情的映射么？</p>\n<p>当然我并不主张单纯的跟随自己的激情，因为那个激情也许并不顺应市场，而人还是需要满足自己的基本生活需求的。之所以不单纯的跟随，就是因为要生存。虽然现实是如此的残酷，我们也可以选择全身心的投入，只是那份与现实相违的痛苦，我们也要承担而已。或者更多的像是我这样，工作之余，让自己的激情引导自己的发展方向，而工作之上，控制自己的激情，最好能在工作上发挥作用。</p>\n<p>说到底职业，并不是某些人创造出来的。他是顺应社会发展的潮流的。他有时候也很现实，会淘汰，甚至消失。但是我们的激情，只要我们存在一天它就是存在的。它会一直影响我们的选择，不管你愿意与否。</p>\n<h2>正确工作是正确的工作的充分条件</h2>\n<p>“正确的工作胜过找到正确的工作”，怎么说呢，正确的工作方式是我们工作的基本，这个是专业素养，而找到正确的工作其实就是自己激情所在，说白了我们是在正确工作的过程中，不断向正确的工作去发展的。可能有时候，我们工作了很长时间，导致不能在去追随激情，也可能没有了去寻找个人激情的能力。但那并不代表我们不会后悔。人并不是生而为人的，一定是努力让自己成为什么样的人。而这个成为什么样的人，就是激情引导的。</p>\n<p>越陷越深，与激情何干。说白了激情让我们无怨无悔做事情，而这个越陷越深却体现了太多的悔意。这点上就很矛盾。而且还要理清楚的问题是，幼稚的激情叫做冲动，那并不是真的激情。激情是必生为之奋斗的“事业”。</p>\n<h2>工匠思维也是满怀激情的</h2>\n<p>越来越多的新闻中出现了工匠这个词，可是越来越觉得这个词本来不应该在广告里出现。因为他最初是那么单纯，而现在却在商业包裹下，越来越成为一种奢侈品。工匠思维不也是这样吗？说起来专业领域的造诣和激情是分不开的。但是并不是所有的专业领域，为什么这么说呢，有的领域可能一个人有这份激情，就可以了。因为机器化越来越严重的今天，一个人在专业领域有所突破，其他人抄袭太容易了。恰恰是那部分饱含激情的创造过程，确是弥足珍贵的。</p>\n<p>“工匠思维专注自己能给世界带来什么，而激情思维则关注世界能给自己带来什么”。我真的没有跟世界索求什么，很多话都只是说出来了，却从来不去看他造成的影响。激情思维从来都是寻求自己能给自己带来什么的。激情就是个人的一部分，只有这一部分丰满了才会再去丰富这个世界，那才是激情之下的工匠。单纯把工匠拿出来说，未免有点太轻率了。</p>\n<p>激情并不等于幼稚，本职工作要做好这个体现的是个人职业素养。完成自己分内的事情不应该是理所应当的吗？为什么会让人烦恼。至于公司官僚体系中的挫败感，我们都不时的承认那是社会问题。就算官僚体系严重，那有什么所谓呢？在这个不停的在强调个人价值的社会上，一点点官僚就能打垮年轻人吗？好的处理方式就是，用自己的方式改变现状。就算置之不理也未尝不可。这并不是一个人的责任。</p>\n<p>经历了那么长时间，还有谁会为得不到答案的问题而劳神费力？我们会慢慢走，直到那一天我们知道了为止。</p>\n<h2>抱歉我实在读不下去了</h2>\n<p>我实在读不下去的时候，直接跳到了书的最后去看看还有什么值得总结的东西。</p>\n<p>激情那些事情，就是我们应该经历的事情，没有这些经历，如何造就我们现在的思维呢？乔布斯、托马斯都曾经追随过自己的激情，去做自己认为对的事情，最后他们能够成功是因为他们自己的努力以及坚持不懈。而激情所作的不过是不至于让他们失去方向感。虽然曾经很幼稚，但是也正是那时候的幼稚，让自己有了不同于别人的经历，让乔布斯崇尚简约，让托马斯最终找到了好的职业归宿。</p>\n<blockquote>\n<p>不要执迷于寻找自己真正的“天职”，而要去掌握稀缺而宝贵的技能。一旦你积累到了这些技能所产生的职场资本，就要明智地运用好它。你可以用它来获取在工作内容和工作方式上的自主力，以及用来找到并实践某项改变人生的使命。这种理念诱惑力虽然不如“放下一切，归隐山林”这样的幻想，但它一次又一次地被证明是切实可行的。</p>\n</blockquote>\n<p>作者最后这一段说法很对，但是完全跳出了激情这个圈子，好像不应该出现在这本书里一样。最后我才明白作者的机智，原来他只是借激情来让读者反驳，引起关注而已。</p>\n<p>总结一下作者的观点：</p>\n<ul>\n<li>不要追随激情（不要光说不做，对作者来说选择很多，哪个方向并不特别重要，但是不要在这里浪费时间）</li>\n<li>刻意练习自己的技能</li>\n<li>避开自主力陷阱（职场资源不足；自主力导致的利益不均而产生的阻力）</li>\n<li>找到真正的使命（足够的职场资本；不断关注自己领域的相邻可能区间（创意））</li>\n</ul>\n<p>最终其实会发现，作者在对激情的认识上虽然不是特别符合我的意思，但是其他的观点还是很有用的。我想补充的是激情可以弱化刻意练习的痛苦，激情同样可以增加你的职场资源。在不断努力之后，真正的使命就很明显了。所以与其浪费时间不如赶紧去做。到了这里，追随激情也好不追随激情也罢，其实我们都明白了。</p>\n<p>附：作者在寻求新工作的时候以自主力为指标，这点我觉得是可以的，自主力代表着更大的发挥空间，不过当心不要掉进自主力陷阱。</p>\n","hasMore":true,"tags":["就业观","激情","情怀"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 优秀到不能被忽视 - 我更看重自己的激情\ntags:\n  - 就业观\n  - 激情\n  - 情怀\ncategories: 读书笔记\ndate: 2019-01-04\nstatus: published\n\n---\n\n> 最近读了一本书叫做《SO GOOD THEY CAN'T IGNORE YOU》（优秀到不能被忽视）。可是作者并不知道大多数人都是那些被他同情的庸庸碌碌的人。同时我被作者牛气的人生以及令人诧异的就业观所折服，只能说人生不复杂，但是我们不能像作者一样简单的理解人生。\n\n<!-- more -->\n\n## 亲身经历\n\n大学毕业之后我思考过自己的方向，那时候我认为保持一颗单纯的心是很难的，进入社会后有那么多的人选择了放弃自己的理想，去做一些甚至和自己一贯的行为原则相悖的事情，其实我知道大多数时候都是逼不得已，因为人人都这样，所以我决定要保持这颗单纯的本心。进入社会之后，结果可想而知，大多数时候都是很得罪人的，当然这其中也可能自己年轻气盛。我期间也想是不是要改变一下，但后来一句“不忘初心，方得始终”还是让我坚持了下来。我还记得是我的一个朋友，发了一个朋友圈，上面用钢笔字工工整整地写着“不忘初心，方得始终”，因为和我最初的想法不谋而合，所以就会有所感触。我从小就特别喜好计算机方面的事情，这个兴趣一直保留到现在，大学毕业本可以去做一个底层的公务员服务大众，但是为了自己想做的事情，最终还是放弃了。我对计算机的激情推动着我，在最困难的时候，坚持了下来。试想一个没有经历，没有资本的年轻人，甚至对计算机都一知半解，是什么让他敢在北京这个深不可测的城市里，贷款学习最终参加工作的？可能是初生牛犊不怕虎，但更多的就是自己的一腔热血。后来的工作中也会遇到一些事情，比如程序员最终还是要转型的，管理还是技术，我想我已经很明确了，这些事情也是我的激情帮我决定的。因为我热爱的还是计算机技术本身。也正式因为这份激情，我不断的打磨着自己的技术。\n\n当我读到这本书时它却告诉我，“激情是精通的附属品”的时候，我真的不敢苟同。因为最初的自己甚至不知道自己要学的是什么，将来会遇到什么样的困难。但就是对计算机很热情，才让我有了现在的职业。作者最初举了一个想要通过禅修获得幸福的失败的案例来说服读者‘没有人会为你的梦想埋单’。但是这句话和追随自己的激情有什么关系呢？作者仅仅是举了一个追随自己想法后来落空的实例来说明这些，显得有些单薄。托马斯的问题并不能说明激情不是一个好的选择，相反我倒是觉得托马斯这个人倒是非常的幼稚且无常。这么轻易就能对自己的追求予以否决。虽然我说不清楚所谓的禅修是什么，但是很明显托马斯并不虔诚。总结下来可能就会变成，一个半途而废的激情绝对不是一个好的选择。错不在激情，而是半途而废。\n\n## 乔布斯的话，只说了一半\n\n> 我终身相信的事实也许是错的，但那就是我的事实。\n\n乔布斯激励人们，“做你爱做的事，钱就来了”，是因为当世大多数人是利益至上的。不可否认乔布斯很会演讲，一些话，他总会隐去那些对听众来说容易让他们分心的词。其实他的意思是“做你爱做的事，当有人肯为你爱做的事情埋单的时候，钱就来了”。\n\n作者说了一个名词叫做激情假设，说我们先寻找激情，然后去寻找激情所匹配的职业。其实他是把动作拆分来理解的。但是现实是这些动作从来都不是孤立的。我们一定是一边做着事情，一边跟随激情的引导改进自己的方向。而作者反驳的恰恰是一个太过简单的逻辑，我们都知道那是错的。\n\n乔布斯一开始不管做什么，他的激情始终在控制上。千万不要理解成他的激情是为了做成一款电子产品，这样就太肤浅了。乔布斯是一直追随自己激情的，之所以选择电子产品行业是因为这个行业刚刚起步，而且他恰好有所想法当然也有唾手可得的资源。而在自己的选择之内，至于在什么行当体现又如何呢？作者说苹果公司的诞生不是出于激情，难道是计划好的吗？\n\n## 激情和精通本就是相辅相成的\n\n激情是精通的副产品，这句话很刺耳。让我们这些满怀激情做事的人，都有一些不好意思了。我是怀有激情的，但是要算精通，我绝对不是那个人。激情和精通可以是相辅相成的关系，激情让你坚持不懈去追求，而精通可以巩固你这份激情，说的深入一点其实也不是精通巩固的激情，而是被需要的感觉而已。\n\n人们急着生活和工作这件事，其实进入社会的人很简单就能理解，不是急而是被迫。\n\n任何事情一旦是强迫的完成的，大多经历都是人们难以忘怀的，甚至悲惨的。恰恰是激情，让我们不再觉得这件事情是被强迫的，而是我们自愿的追随着自己的想法而已。在不知道自己激情所在的时候，我们没有必要苦恼。就自然而然的发展，到头来你就在不断的调整中，寻求到了自己存在的意义。之所以调整是因为欲求，欲求本身不正是激情的映射么？\n\n当然我并不主张单纯的跟随自己的激情，因为那个激情也许并不顺应市场，而人还是需要满足自己的基本生活需求的。之所以不单纯的跟随，就是因为要生存。虽然现实是如此的残酷，我们也可以选择全身心的投入，只是那份与现实相违的痛苦，我们也要承担而已。或者更多的像是我这样，工作之余，让自己的激情引导自己的发展方向，而工作之上，控制自己的激情，最好能在工作上发挥作用。\n\n说到底职业，并不是某些人创造出来的。他是顺应社会发展的潮流的。他有时候也很现实，会淘汰，甚至消失。但是我们的激情，只要我们存在一天它就是存在的。它会一直影响我们的选择，不管你愿意与否。\n\n## 正确工作是正确的工作的充分条件\n\n“正确的工作胜过找到正确的工作”，怎么说呢，正确的工作方式是我们工作的基本，这个是专业素养，而找到正确的工作其实就是自己激情所在，说白了我们是在正确工作的过程中，不断向正确的工作去发展的。可能有时候，我们工作了很长时间，导致不能在去追随激情，也可能没有了去寻找个人激情的能力。但那并不代表我们不会后悔。人并不是生而为人的，一定是努力让自己成为什么样的人。而这个成为什么样的人，就是激情引导的。\n\n越陷越深，与激情何干。说白了激情让我们无怨无悔做事情，而这个越陷越深却体现了太多的悔意。这点上就很矛盾。而且还要理清楚的问题是，幼稚的激情叫做冲动，那并不是真的激情。激情是必生为之奋斗的“事业”。\n\n## 工匠思维也是满怀激情的\n\n越来越多的新闻中出现了工匠这个词，可是越来越觉得这个词本来不应该在广告里出现。因为他最初是那么单纯，而现在却在商业包裹下，越来越成为一种奢侈品。工匠思维不也是这样吗？说起来专业领域的造诣和激情是分不开的。但是并不是所有的专业领域，为什么这么说呢，有的领域可能一个人有这份激情，就可以了。因为机器化越来越严重的今天，一个人在专业领域有所突破，其他人抄袭太容易了。恰恰是那部分饱含激情的创造过程，确是弥足珍贵的。\n\n“工匠思维专注自己能给世界带来什么，而激情思维则关注世界能给自己带来什么”。我真的没有跟世界索求什么，很多话都只是说出来了，却从来不去看他造成的影响。激情思维从来都是寻求自己能给自己带来什么的。激情就是个人的一部分，只有这一部分丰满了才会再去丰富这个世界，那才是激情之下的工匠。单纯把工匠拿出来说，未免有点太轻率了。\n\n激情并不等于幼稚，本职工作要做好这个体现的是个人职业素养。完成自己分内的事情不应该是理所应当的吗？为什么会让人烦恼。至于公司官僚体系中的挫败感，我们都不时的承认那是社会问题。就算官僚体系严重，那有什么所谓呢？在这个不停的在强调个人价值的社会上，一点点官僚就能打垮年轻人吗？好的处理方式就是，用自己的方式改变现状。就算置之不理也未尝不可。这并不是一个人的责任。\n\n经历了那么长时间，还有谁会为得不到答案的问题而劳神费力？我们会慢慢走，直到那一天我们知道了为止。\n\n## 抱歉我实在读不下去了\n\n我实在读不下去的时候，直接跳到了书的最后去看看还有什么值得总结的东西。\n\n激情那些事情，就是我们应该经历的事情，没有这些经历，如何造就我们现在的思维呢？乔布斯、托马斯都曾经追随过自己的激情，去做自己认为对的事情，最后他们能够成功是因为他们自己的努力以及坚持不懈。而激情所作的不过是不至于让他们失去方向感。虽然曾经很幼稚，但是也正是那时候的幼稚，让自己有了不同于别人的经历，让乔布斯崇尚简约，让托马斯最终找到了好的职业归宿。\n\n> 不要执迷于寻找自己真正的“天职”，而要去掌握稀缺而宝贵的技能。一旦你积累到了这些技能所产生的职场资本，就要明智地运用好它。你可以用它来获取在工作内容和工作方式上的自主力，以及用来找到并实践某项改变人生的使命。这种理念诱惑力虽然不如“放下一切，归隐山林”这样的幻想，但它一次又一次地被证明是切实可行的。\n\n作者最后这一段说法很对，但是完全跳出了激情这个圈子，好像不应该出现在这本书里一样。最后我才明白作者的机智，原来他只是借激情来让读者反驳，引起关注而已。\n\n总结一下作者的观点：\n\n* 不要追随激情（不要光说不做，对作者来说选择很多，哪个方向并不特别重要，但是不要在这里浪费时间）\n* 刻意练习自己的技能\n* 避开自主力陷阱（职场资源不足；自主力导致的利益不均而产生的阻力）\n* 找到真正的使命（足够的职场资本；不断关注自己领域的相邻可能区间（创意））\n\n最终其实会发现，作者在对激情的认识上虽然不是特别符合我的意思，但是其他的观点还是很有用的。我想补充的是激情可以弱化刻意练习的痛苦，激情同样可以增加你的职场资源。在不断努力之后，真正的使命就很明显了。所以与其浪费时间不如赶紧去做。到了这里，追随激情也好不追随激情也罢，其实我们都明白了。\n\n附：作者在寻求新工作的时候以自主力为指标，这点我觉得是可以的，自主力代表着更大的发挥空间，不过当心不要掉进自主力陷阱。\n"},{"title":"【MySQL】[HY000][1366] Incorrect string value - 解决","excerpt":"<blockquote>\n<p>MySQL 5.6 <code>[HY000][1366] Incorrect string value</code> 异常。</p>\n</blockquote>\n","url":"/2019/01/03/异常/【MySQL】[HY000][1366] Incorrect string value - 解决","fromDate":"2019-01-03","category":"异常","text":"<blockquote>\n<p>MySQL 5.6 <code>[HY000][1366] Incorrect string value</code> 异常。</p>\n</blockquote>\n<!-- more -->\n<h2>原因</h2>\n<p>普通的汉字使用 <code>utf8</code> 表示占位是三个字节，特殊情况下可能会用到 <code>utf8</code> 四字节的情况。 <code>MySQL-5.5.3</code> 之前的版本是不支持四字节 <code>utf8</code> 字符的，之后的版本可以通过 <code>utf8mb4</code> 使用四字节 <code>utf8</code> 编码。</p>\n<h2>解决方案</h2>\n<ul>\n<li>首先升级 <code>MySQL</code> 到 <code>5.5.3</code> 之后的版本。</li>\n<li>关闭 <code>MySQL</code> 的服务，并且修改配置文件。(这个是为了以后重启数据库不会改变数据库配置)</li>\n</ul>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_general_ci</span><br><span class=\"line\">init_connect = 'SET NAMES utf8mb4;'</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>修改对应的字符编码（可以掠过第二步直接设置，但是重启会被修改回来）</li>\n</ul>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 任何一个只要不是 utf8mb4 就修改一下，正常应该是不用修改的。</span><br><span class=\"line\">set character_set_client = 'utf8mb4';</span><br><span class=\"line\">set character_set_connection = 'utf8mb4';</span><br><span class=\"line\">set character_set_databse = 'utf8mb4';</span><br><span class=\"line\">set character_set_server = 'utf8mb4';</span><br><span class=\"line\">set character_set_results = 'utf8mb4';</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>修改对应数据库、表、字段编码</li>\n</ul>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter database test character set utf8mb4 collate utf8mb4_general_ci;</span><br><span class=\"line\">alter table test.test convert to character set utf8mb4 collate utf8mb4_general_ci;</span><br><span class=\"line\">alter table test.test modify columnName varchar(50) character set utf8mb4 collate utf8mb4_general_ci;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>连接数据库的时候不要使用 <code>characterEncoding=utf8</code></li>\n</ul>\n<h2>测试</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 可以向数据库插入这个字符 检查是否成功</span><br><span class=\"line\">insert into tableName (name) values ('𦱾');</span><br><span class=\"line\">-- 检查字符编码</span><br><span class=\"line\">show variables like 'character%';</span><br><span class=\"line\">-- 检查版本号</span><br><span class=\"line\">select version();</span><br></pre></td></tr></tbody></table></figure>\n<h2>总结经验</h2>\n<p>推广一下其实这样可以解决大部分字符编码的问题，不管是转换成 <code>gbk</code> 还是任何编码。像是由于其他问题导致的这个异常都可以通过修改成 <code>utf8</code> 的方式解决，但对于移动端的一些特殊字符，仅仅三个字节的 <code>utf8</code> 已经不能满足需求，所以才会使用 <code>utf8mb4</code> 这种编码。</p>\n<h2>其他问题</h2>\n<h3>windows上mysql配置文件的位置</h3>\n<p>安装版本mysql启动都会有个配置参数，可以检查一下启动项的快捷方式：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe&quot; &quot;--defaults-file=C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini&quot; &quot;-uroot&quot; &quot;-p&quot;</span><br></pre></td></tr></tbody></table></figure>\n<p>免安装版本在安装到系统服务或者启动的时候，都会设置一个配置文件路径 <code>mysqld install MySQL --defaults-file=&quot;D:\\mysql-5.6.16-win32\\my.ini&quot; </code></p>\n<p>如果是自动安装或者别人安装的话，可以直接在服务里增加启动参数：<code>&quot;--defaults-file=C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini&quot;</code>，修改路径即可。</p>\n<p>另附删除服务命令：<code>mysqld remove</code></p>\n","hasMore":true,"tags":["MySQL","Incorrect string value"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【MySQL】[HY000][1366] Incorrect string value - 解决\ntags:\n  - MySQL\n  - Incorrect string value\ncategories: 异常\ndate: 2019-01-03\nstatus: published\n\n---\n\n> MySQL 5.6 `[HY000][1366] Incorrect string value` 异常。\n\n<!-- more -->\n\n## 原因\n\n普通的汉字使用 `utf8` 表示占位是三个字节，特殊情况下可能会用到 `utf8` 四字节的情况。 `MySQL-5.5.3` 之前的版本是不支持四字节 `utf8` 字符的，之后的版本可以通过 `utf8mb4` 使用四字节 `utf8` 编码。\n\n## 解决方案\n\n* 首先升级 `MySQL` 到 `5.5.3` 之后的版本。\n* 关闭 `MySQL` 的服务，并且修改配置文件。(这个是为了以后重启数据库不会改变数据库配置)\n```ini\n[client]\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_general_ci\ninit_connect = 'SET NAMES utf8mb4;'\n```\n* 修改对应的字符编码（可以掠过第二步直接设置，但是重启会被修改回来）\n```sql\n-- 任何一个只要不是 utf8mb4 就修改一下，正常应该是不用修改的。\nset character_set_client = 'utf8mb4';\nset character_set_connection = 'utf8mb4';\nset character_set_databse = 'utf8mb4';\nset character_set_server = 'utf8mb4';\nset character_set_results = 'utf8mb4';\n```\n* 修改对应数据库、表、字段编码\n```sql\nalter database test character set utf8mb4 collate utf8mb4_general_ci;\nalter table test.test convert to character set utf8mb4 collate utf8mb4_general_ci;\nalter table test.test modify columnName varchar(50) character set utf8mb4 collate utf8mb4_general_ci;\n```\n* 连接数据库的时候不要使用 `characterEncoding=utf8`\n\n## 测试\n\n```sql\n-- 可以向数据库插入这个字符 检查是否成功\ninsert into tableName (name) values ('𦱾');\n-- 检查字符编码\nshow variables like 'character%';\n-- 检查版本号\nselect version();\n```\n\n## 总结经验\n\n推广一下其实这样可以解决大部分字符编码的问题，不管是转换成 `gbk` 还是任何编码。像是由于其他问题导致的这个异常都可以通过修改成 `utf8` 的方式解决，但对于移动端的一些特殊字符，仅仅三个字节的 `utf8` 已经不能满足需求，所以才会使用 `utf8mb4` 这种编码。\n\n## 其他问题\n\n### windows上mysql配置文件的位置\n\n安装版本mysql启动都会有个配置参数，可以检查一下启动项的快捷方式：\n\n```bash\n\"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" \"--defaults-file=C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\" \"-uroot\" \"-p\"\n```\n\n免安装版本在安装到系统服务或者启动的时候，都会设置一个配置文件路径 `mysqld install MySQL --defaults-file=\"D:\\mysql-5.6.16-win32\\my.ini\" `\n\n如果是自动安装或者别人安装的话，可以直接在服务里增加启动参数：`\"--defaults-file=C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\"`，修改路径即可。\n\n另附删除服务命令：`mysqld remove`\n\n"},{"title":"【测试】前端自动化测试的简单构想 （windows）","excerpt":"<p>自动化测试作为持续集成的重要环节，是必须的内容。有时候可能测试代码会超过业务代码的数量，但不能因为这样就对自动化测试望而却步。我内心有一个愿景，让自动化编写简单，运行高效，并且最重要的，实用性高。我觉得自动化测试按照测试内容可以分成逻辑结构测试，数据结构测试（接口测试），以及界面测试。最终希望能有一个基于配置的测试方式，不用写庞杂的代码并且简单可重用，而且有一些已经写好的业务逻辑测试代码。当然这种方式目前只是一个简单的构想，但是也要有切实可行的测试方式才行。前端框架多的不胜枚举，我单单用我熟悉且按照以上说的三个部分聊聊。</p>\n","url":"/2018/10/30/管理/【测试】前端自动化测试的简单构想 （windows）","fromDate":"2018-10-30","category":"管理","text":"<p>自动化测试作为持续集成的重要环节，是必须的内容。有时候可能测试代码会超过业务代码的数量，但不能因为这样就对自动化测试望而却步。我内心有一个愿景，让自动化编写简单，运行高效，并且最重要的，实用性高。我觉得自动化测试按照测试内容可以分成逻辑结构测试，数据结构测试（接口测试），以及界面测试。最终希望能有一个基于配置的测试方式，不用写庞杂的代码并且简单可重用，而且有一些已经写好的业务逻辑测试代码。当然这种方式目前只是一个简单的构想，但是也要有切实可行的测试方式才行。前端框架多的不胜枚举，我单单用我熟悉且按照以上说的三个部分聊聊。</p>\n<!-- more -->\n<h2>开发环境配置</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nodejs-8.2.1</span><br><span class=\"line\"># jdk 7以上</span><br><span class=\"line\"># python 2.7.15</span><br><span class=\"line\"># opencv 2.4.13.6</span><br><span class=\"line\">git clone https://gitee.com/zhoyq/examples.git</span><br><span class=\"line\">// 运行前确保依赖程序被安装到正确的位置</span><br><span class=\"line\">// bin/opencv/</span><br><span class=\"line\">// bin/MicrosoftWebDriver.exe</span><br><span class=\"line\">// bin/geckodriver.exe</span><br><span class=\"line\">// bin/chromedriver.exe</span><br><span class=\"line\">// bin/selenium-server-standalone-3.14.0.jar</span><br><span class=\"line\">// 配置env.bat之后运行</span><br><span class=\"line\">// 更多信息请查看README.md</span><br><span class=\"line\">cd examples/autoTest</span><br><span class=\"line\">npm install node-gyp</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm test // 或者运行 mocha test-mocha/test2.js</span><br></pre></td></tr></tbody></table></figure>\n<h3>简单介绍</h3>\n<p>这个工程是基于mocha、nightwatch以及opencv和selenium编写的整合测试框架，算是对前端测试的一个尝试。工程以mocha为中心，整合了nightwatch、selenium和opencv的测试环节。当然也提供了以nightwatch为中心的测试方式，但是就完整性而言，mocha应该是优于nightwatch的。同时nightwatch也支持使用mocha的方式进行测试，配置文件里也已经整合了这部分配置。但本文还是以mocha的代码结构为主。</p>\n<h2>使用mocha进行逻辑结构测试</h2>\n<p>逻辑结构测试指的是以函数参数和返回值的正确性为导向的一种测试方式。需要枚举出可能的参数和参数下必然的结果，当然实例是不可能穷举完的。需要举出一些特征比较明显的数据进行测试，或者真实场景下使用的数据，需要按照经验进行测试。以下是测试的实例：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 被测试函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> sum(a, b){</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 测试用例</span></span><br><span class=\"line\">describe(<span class=\"string\">'逻辑结构测试'</span>,<span class=\"keyword\">function</span>(){</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.timeout(2000); <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">  describe(<span class=\"string\">'测试函数sum'</span>,<span class=\"keyword\">function</span>(){</span><br><span class=\"line\">    it(<span class=\"string\">'当传入1，2的时候返回值应该是3'</span>,<span class=\"keyword\">function</span>(){</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s = sum(1, 2);</span><br><span class=\"line\">      expect(s).to.be.equal(3);</span><br><span class=\"line\">    });</span><br><span class=\"line\">  });</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n<h2>使用mocha进行数据结构测试</h2>\n<p>数据结构测试主要是为了确保数据的完整性进行的测试。这种测试不像逻辑测试（有点像黑盒测试），具有明显的确定性（有就是有，没有就是没有）。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 被测试链接</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = &quot;/login&quot;;</span><br><span class=\"line\"><span class=\"comment\">// 测试用例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = &quot;http:<span class=\"comment\">//127.0.0.1:8080&quot;;</span></span><br><span class=\"line\">describe(<span class=\"string\">'数据结构测试'</span>,<span class=\"keyword\">function</span>(){</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.timeout(2000); <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">  describe(<span class=\"string\">'测试post请求/login'</span>,<span class=\"keyword\">function</span>(){</span><br><span class=\"line\">    it(<span class=\"string\">'返回数据中必须有status'</span>,<span class=\"keyword\">function</span>(){</span><br><span class=\"line\">      request(app)</span><br><span class=\"line\">        .post(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\">        .end(<span class=\"keyword\">function</span>(err, res) { </span><br><span class=\"line\">          expect(res.body).to.have.any.keys(<span class=\"string\">'state'</span>);</span><br><span class=\"line\">        });</span><br><span class=\"line\">    });</span><br><span class=\"line\">  });</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n<h2>使用nightwatch、selenium和node-opencv进行界面测试</h2>\n<p>界面测试一种是测试界面的数据结构，一种是测试界面的显示结果。数据结构和之前的数据结构测试是一致的，具有明显的确定性。在开发网站的时候或者之前，都可以与网站开发并行进行，只要确定页面必须元素，以及命名即可。而显示结果的测试，一方面可以检查代码中的不兼容设计，这个算是代码质量检查的一部分内容，并不在本次内容中，就不多阐述。另一方面可以以显示结果为测试对象，检查运行后的结果（实际上就是检查图片一致性），只要得到的结果和设计给出的内容一致就可以了。这种测试案例，可以在设计结果出来之后就开始着手编写。以下便是实例：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 被测试图片（设计提供或者开发自己在成品中截图）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempPath = <span class=\"string\">'./screenshots/b.png'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 测试原图 正常情况下需要用nightwatch截图</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourcePath = <span class=\"string\">'./screenshots/a.png'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 测试用例</span></span><br><span class=\"line\">describe(<span class=\"string\">'界面测试'</span>, <span class=\"keyword\">function</span>() {</span><br><span class=\"line\">  describe(<span class=\"string\">'测试图片匹配程度'</span>, <span class=\"keyword\">function</span>() {</span><br><span class=\"line\">    it(<span class=\"string\">'在原图中找到图片内容并对比相似度应该在98%以上'</span>, <span class=\"keyword\">function</span>(done) { <span class=\"comment\">// 98%是一个经验数据</span></span><br><span class=\"line\">      cv.readImage(sourcePath, (err, sourceImg) =&gt; {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = sourceImg.matchTemplate(tempPath, 5);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newMat = sourceImg.crop(result[1], result[2], result[3], result[4]);</span><br><span class=\"line\">        cv.readImage(tempPath, (error, tempImg) =&gt; {</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> done(err);</span><br><span class=\"line\">          <span class=\"keyword\">let</span> per = cosine(getHistogram(newMat),getHistogram(tempImg));</span><br><span class=\"line\">          expect(per &gt;= 0.98).to.be.ok;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        });</span><br><span class=\"line\">      });</span><br><span class=\"line\">    });</span><br><span class=\"line\">  });</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'界面元素测试'</span>, <span class=\"keyword\">function</span>() {</span><br><span class=\"line\">    it(<span class=\"string\">'必须有预定义的元素'</span>, <span class=\"keyword\">function</span>(done) {</span><br><span class=\"line\">      browser</span><br><span class=\"line\">        .maximizeWindow()</span><br><span class=\"line\">        .url(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\">        .waitForElementVisible(<span class=\"string\">'body'</span>, 1000)</span><br><span class=\"line\">        .setValue(<span class=\"string\">'#kw'</span>, <span class=\"string\">'衷于栖'</span>)</span><br><span class=\"line\">        .click(<span class=\"string\">'#su'</span>)</span><br><span class=\"line\">        .pause(3000)</span><br><span class=\"line\">        .assert.containsText(<span class=\"string\">'#wrapper_wrapper'</span>, <span class=\"string\">'衷于栖'</span>)</span><br><span class=\"line\">        .saveScreenshot(<span class=\"string\">'./screenshots/fileName.png'</span>)</span><br><span class=\"line\">        .end();</span><br><span class=\"line\"></span><br><span class=\"line\">      client.start(done);</span><br><span class=\"line\">    });</span><br><span class=\"line\">  });</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n<h2>相关内容</h2>\n<p>仓库 <code>/autoTest</code> 目录下：（相关代码在 <code>/autoTest/test-mocha/test2.js</code>）</p>\n<script src='https://gitee.com/zhoyq/examples/widget_preview'></script>\n<style>\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n</style>\n","hasMore":true,"tags":["持续集成","测试","自动化"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【测试】前端自动化测试的简单构想 （windows）\ntags:\n  - 持续集成\n  - 测试\n  - 自动化\ncategories: 管理\ndate: 2018-10-30\nstatus: published\n\n---\n\n自动化测试作为持续集成的重要环节，是必须的内容。有时候可能测试代码会超过业务代码的数量，但不能因为这样就对自动化测试望而却步。我内心有一个愿景，让自动化编写简单，运行高效，并且最重要的，实用性高。我觉得自动化测试按照测试内容可以分成逻辑结构测试，数据结构测试（接口测试），以及界面测试。最终希望能有一个基于配置的测试方式，不用写庞杂的代码并且简单可重用，而且有一些已经写好的业务逻辑测试代码。当然这种方式目前只是一个简单的构想，但是也要有切实可行的测试方式才行。前端框架多的不胜枚举，我单单用我熟悉且按照以上说的三个部分聊聊。\n\n<!-- more -->\n\n## 开发环境配置\n\n```bash\n# nodejs-8.2.1\n# jdk 7以上\n# python 2.7.15\n# opencv 2.4.13.6\ngit clone https://gitee.com/zhoyq/examples.git\n// 运行前确保依赖程序被安装到正确的位置\n// bin/opencv/\n// bin/MicrosoftWebDriver.exe\n// bin/geckodriver.exe\n// bin/chromedriver.exe\n// bin/selenium-server-standalone-3.14.0.jar\n// 配置env.bat之后运行\n// 更多信息请查看README.md\ncd examples/autoTest\nnpm install node-gyp\nnpm install\nnpm test // 或者运行 mocha test-mocha/test2.js\n```\n\n### 简单介绍\n\n这个工程是基于mocha、nightwatch以及opencv和selenium编写的整合测试框架，算是对前端测试的一个尝试。工程以mocha为中心，整合了nightwatch、selenium和opencv的测试环节。当然也提供了以nightwatch为中心的测试方式，但是就完整性而言，mocha应该是优于nightwatch的。同时nightwatch也支持使用mocha的方式进行测试，配置文件里也已经整合了这部分配置。但本文还是以mocha的代码结构为主。\n\n## 使用mocha进行逻辑结构测试\n\n逻辑结构测试指的是以函数参数和返回值的正确性为导向的一种测试方式。需要枚举出可能的参数和参数下必然的结果，当然实例是不可能穷举完的。需要举出一些特征比较明显的数据进行测试，或者真实场景下使用的数据，需要按照经验进行测试。以下是测试的实例：\n\n```javascript\n// 被测试函数\nfunction sum(a, b){\n  return a + b;\n}\n// 测试用例\ndescribe('逻辑结构测试',function(){\n  this.timeout(2000); // 默认值\n  describe('测试函数sum',function(){\n    it('当传入1，2的时候返回值应该是3',function(){\n      let s = sum(1, 2);\n      expect(s).to.be.equal(3);\n    });\n  });\n});\n```\n## 使用mocha进行数据结构测试\n\n数据结构测试主要是为了确保数据的完整性进行的测试。这种测试不像逻辑测试（有点像黑盒测试），具有明显的确定性（有就是有，没有就是没有）。\n\n```javascript\n// 被测试链接\nlet url = \"/login\";\n// 测试用例\nlet app = \"http://127.0.0.1:8080\";\ndescribe('数据结构测试',function(){\n  this.timeout(2000); // 默认值\n  describe('测试post请求/login',function(){\n    it('返回数据中必须有status',function(){\n      request(app)\n        .post('/login')\n        .end(function(err, res) { \n          expect(res.body).to.have.any.keys('state');\n        });\n    });\n  });\n});\n```\n\n## 使用nightwatch、selenium和node-opencv进行界面测试\n\n界面测试一种是测试界面的数据结构，一种是测试界面的显示结果。数据结构和之前的数据结构测试是一致的，具有明显的确定性。在开发网站的时候或者之前，都可以与网站开发并行进行，只要确定页面必须元素，以及命名即可。而显示结果的测试，一方面可以检查代码中的不兼容设计，这个算是代码质量检查的一部分内容，并不在本次内容中，就不多阐述。另一方面可以以显示结果为测试对象，检查运行后的结果（实际上就是检查图片一致性），只要得到的结果和设计给出的内容一致就可以了。这种测试案例，可以在设计结果出来之后就开始着手编写。以下便是实例：\n\n```javascript\n// 被测试图片（设计提供或者开发自己在成品中截图）\nlet tempPath = './screenshots/b.png';\n// 测试原图 正常情况下需要用nightwatch截图\nlet sourcePath = './screenshots/a.png';\n// 测试用例\ndescribe('界面测试', function() {\n  describe('测试图片匹配程度', function() {\n    it('在原图中找到图片内容并对比相似度应该在98%以上', function(done) { // 98%是一个经验数据\n      cv.readImage(sourcePath, (err, sourceImg) => {\n        if (err) return done(err);\n        let result = sourceImg.matchTemplate(tempPath, 5);\n        let newMat = sourceImg.crop(result[1], result[2], result[3], result[4]);\n        cv.readImage(tempPath, (error, tempImg) => {\n          if (error) return done(err);\n          let per = cosine(getHistogram(newMat),getHistogram(tempImg));\n          expect(per >= 0.98).to.be.ok;\n          done();\n        });\n      });\n    });\n  });\n\n  describe('界面元素测试', function() {\n    it('必须有预定义的元素', function(done) {\n      browser\n        .maximizeWindow()\n        .url('https://www.baidu.com')\n        .waitForElementVisible('body', 1000)\n        .setValue('#kw', '衷于栖')\n        .click('#su')\n        .pause(3000)\n        .assert.containsText('#wrapper_wrapper', '衷于栖')\n        .saveScreenshot('./screenshots/fileName.png')\n        .end();\n\n      client.start(done);\n    });\n  });\n});\n\n```\n\n## 相关内容\n\n仓库 `/autoTest` 目录下：（相关代码在 `/autoTest/test-mocha/test2.js`）\n\n<script src='https://gitee.com/zhoyq/examples/widget_preview'></script>\n\n<style>\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n</style>\n\n\n\n"},{"title":"【GIT】如何使用git撤销","excerpt":"<p>版本管理最有用的地方就是可以撤销发生的问题。在<code>GIT</code>中，撤销可以有很多细微的不同。当创建新的提交的时候，<code>GIT</code>会存储当时仓库的快照，这样就可以使用<code>GIT</code>回顾工程之前的版本。在这片文章里，我将会重现一些需要做撤销操作的场景，并且展示如何使用<code>GIT</code>进行处理。</p>\n","url":"/2018/09/13/转载/【GIT】如何使用git撤销","fromDate":"2018-09-13","category":"转载","text":"<p>版本管理最有用的地方就是可以撤销发生的问题。在<code>GIT</code>中，撤销可以有很多细微的不同。当创建新的提交的时候，<code>GIT</code>会存储当时仓库的快照，这样就可以使用<code>GIT</code>回顾工程之前的版本。在这片文章里，我将会重现一些需要做撤销操作的场景，并且展示如何使用<code>GIT</code>进行处理。</p>\n<!-- more -->\n<h2>撤销一个公共的改变</h2>\n<p>场景：你刚刚运行了<code>git push</code>，提交已经改变的数据。但是在众多提交中你发现了一个问题，希望撤销那个提交。</p>\n<p>命令：<code>git revert &lt;sha&gt;</code></p>\n<p>解释：<code>git revert</code> 会创建一个新的提交，但是它会是提供的SHA对应的提交的一个逆操作。如果旧的提交叫做<code>matter</code>的话，新的提交就会命名为<code>anti-matter</code>，所有删除的操作都会添加到新的分支里，所有添加操作都会在新分支里删除。</p>\n<p>这是<code>GIT</code>最安全、最基础的撤销操作，因为这个操作不改变历史提交。接下来可以使用<code>git push</code>提交刚刚的改变了。</p>\n<h2>修改最后一次提交的消息</h2>\n<p>场景：你刚刚运行了命令<code>git commit -m &quot;Fxies bug #42&quot;</code>，提交了最后一次消息，但是在<code>git push</code>之前你发现应该是&quot;Fixes bug #42&quot;。</p>\n<p>命令：<code>git commit --amend</code> 或者 <code>git commit --amend -m &quot;Fixes bug #42&quot;</code></p>\n<p>解释：<code>git commit --amend</code>将会用新创建的包含前一次提交改变所有内容的提交来更新替换最近一次的提交。如果没有任何改变，这样将仅仅会重写上一次的提交信息。</p>\n<h2>撤销本地改变</h2>\n<p>场景：猫走过你的键盘，莫名其妙的保存了修改，之后编辑器崩溃了，但是你还没有提交修改。你想恢复文件，仅仅是恢复到上一次提交的版本。</p>\n<p>命令：<code>git checkout -- &lt;bad filename&gt;</code></p>\n<p>解释：<code>git checkout</code> 会把文件修改到前一次已知提交。你应该提供一个分支名称或者指定SHA用来恢复，或者默认情况下，<code>GIT</code>会假设你想要检出<code>HEAD</code>，当前检出分支的最新提交。</p>\n<p>记住：这种方式撤销的改变是不能恢复的。因为改变就没有提交过，所以<code>GIT</code>不能帮助恢复这些文件。确定你知道你放弃的文件内容，或者比较来确认。</p>\n<h2>重置本地改变</h2>\n<p>场景：你在本地进行了几次提交，还没有推送到远程，但是看上去都不是很好，你想要撤销最新的三个提交，就像从来没提交过一样。</p>\n<p>命令：<code>git reset &lt;last good SHA&gt;</code> 或者 <code>git reset --hard &lt;last good SHA&gt;</code></p>\n<p>解释：<code>git reset</code> 会恢复历史到指定的SHA对应的提交。就好像那些提交根本没发生过。默认情况下，<code>git reset</code> 保存工作目录的改变。提交删除后，内容却还在磁盘上。这是最安全的方式，但是通常，你想要撤销提交并且删除改变，这时候就可以使用<code>--hard</code>。</p>\n<h2>在撤销本地之后重做</h2>\n<p>场景：你进行了几次提交，使用<code>git reset --hard</code>撤销了改变，然后想要那些改变再恢复。</p>\n<p>命令：<code>git reflog</code> 和 <code>git reset</code> 或者 <code>git checkout</code></p>\n<p>解释：<code>git reflog</code> 是一个很强大的历史恢复工具。基本上可以恢复任何提交。</p>\n<p>你可能很熟悉<code>git log</code>命令，这个命令会列出提交列表。<code>git reflog</code>很相似，但是会显示<code>HEAD</code>改变的时刻。</p>\n<p>附加说明：</p>\n<ul>\n<li><code>HEAD</code>仅改变。<code>HEAD</code>会在你更换分支时、提交代码时（<code>git commit</code>）和重置目录时（<code>git reset</code>）改变，但是不会在你<code>git checkout -- &lt;bad filename&gt;</code>时改变。（就像之前的场景，那些改变并没有提交，所以不能使用reflog恢复。）</li>\n<li><code>git reflog</code>不会永远保存。<code>GIT</code>会周期性地清理无法获取的对象。不要寄希望于找到上个月的提交内容。</li>\n<li>你的reflog仅仅是你自己的。你不能使用reflog还原其他开发者的未推送提交。</li>\n</ul>\n<p><img src=\"/attaches/A86CE866E8DAE61FEE06CF0B2C436C96.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>所以...如何使用reflog重做一个或者多个之前撤销的提交呢？它基于你想要达成的目的：</p>\n<ul>\n<li>如果想要恢复工程提交的历史，就像之前那样。使用<code>git reset --hard &lt;SHA&gt;</code>；</li>\n<li>如果你想恢复一个或者多个工程文件，单不改变历史提交。使用<code>git checkout &lt;SHA&gt; -- &lt;filename&gt;</code>；</li>\n<li>如果你想准确的恢复仓库众多提交中的一个。使用<code>git cherry-pick &lt;SHA&gt;</code>；</li>\n</ul>\n<h2>重用分支</h2>\n<p>场景：你做了一些提交，然后发现自己在master分支检出的。你希望在其他分支做这些提交。</p>\n<p>命令：<code>git branch feature</code>，<code>git reset --hard origin/master</code> 和 <code>git checkout feature</code></p>\n<p>解释：你可能会使用<code>git checkout -b &lt;name&gt;</code>创建新分支，这是一种创建分支并检出的简单写法，但是你并不想马上更换分支。这里<code>git branch feature</code>创建了一个称作feature的新分支，指向最新的提交，但是并没有检出到master分支。</p>\n<p>下一步，<code>git reset --hard</code>在所有提交之前将master分支重置到origin/master分支。不要担心，它们仍然在feature上可用。</p>\n<p>最后，<code>git checkout</code>转分支到新的拥有所有最近改变的feature分支。</p>\n<h2>及时保存分支</h2>\n<p>场景：你基于master分支创建feature分支，但是master分支远落后于origin/master分支。现在master已经和origin/master分支同步了，你希望提交feature的起点是现在的master分支，代替之前的。</p>\n<p>命令：<code>git checkout feature</code> 和 <code>git rebase master</code></p>\n<p>解释：你可以使用<code>git reset</code>（没有--hard）命令，然后<code>git checkout -b &lt;new branch name&gt;</code>创建新的分支重新提交，但是那样会丢失提交的历史。有更好的办法。</p>\n<p><code>git rebase master</code> 做了如下几件事情：</p>\n<ul>\n<li>第一，它定位了当前分支和master分支共同的祖先。</li>\n<li>然后，它重置了当前分支到祖先，缓存了所有祖先之后的提交。</li>\n<li>最后，将当前分支提前拼接到master分支结尾，并且恢复缓存提交到master最后的一次提交之后。</li>\n</ul>\n<h2>混合撤销或者重做</h2>\n<p>场景：你开起了一个特性开发，开发过程中你意识到，有更好的解决方式。你已经提交了很多次了，但是你只是需要一部分提交，希望另外一部分消失。</p>\n<p>命令：<code>git rebase -i &lt;earlier SHA&gt;</code></p>\n<p>解释：<code>-i</code>代表交互模式。它就像之前所说的rebase命令一样，但是在恢复提交之前，它会暂停允许你定义恢复的每一条提交。</p>\n<p><code>rebase -i</code>将会在你的默认编辑器中打开一个命令列表，就像这样：</p>\n<p><img src=\"/attaches/5FCAD4339B6D22E6227FCB31A1E214D0.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>第一列代表提交选择的命令；第二列代表提交的对应SHA值；默认情况下，<code>rebase -i</code>假设每条提交都会应用，使用<code>pick</code>命令。</p>\n<p>丢弃提交的方式就是删除提交所在行。如果你不希望再看到有问题的提交，你可以直接删除上面图片中的第一行和三四行。</p>\n<p>如果你想保留提交的内容到那时修改提交消息的话，需要使用<code>reword</code>命令。仅仅是替换<code>pick</code>单词即可。这样就能够马上重写提交消息，但是这样并不起作用，<code>rebase -i</code>忽略了SHA列之后的内容。之后的内容其实只是帮助我们理解前面的内容。当完成了<code>rebase -i</code>之后，你需要重新写提交消息。</p>\n<p>如果你想合并两条提交，你需要使用<code>squash</code>和<code>fixup</code>，像这样：</p>\n<p><img src=\"/attaches/E2EEDE62BD8645F8B0D9AE859D99D473.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p><code>squash</code>和<code>fixup</code>将会合并之前的提交。在上图中，<code>0835fe2</code> 和 <code>6943e85</code>将会合并成一条；<code>38f5e4e</code> 和 <code>af67f82</code>将会合并为另外一条。</p>\n<p>当选则<code>squash</code>，GIT将会给合并后的提交添加一个新的提交消息；<code>fixup</code>将会把第一条提交的消息添加到新的提交里。在这里，<code>af67f82</code>是“ooops”，仅仅使用<code>38f5e4e</code>的提交消息；但是<code>0835fe2</code> 和 <code>6943e85</code>合并后，你会写一条新的提交消息；</p>\n<p>当你保存并且推出编辑器，GIT将会按顺序从上到下应用你的提交。你可以改变提交顺序。如果你想，你可以通过调整顺序合并 <code>af67f82</code> 和 <code>0835fe2</code>，就像这样：</p>\n<p><img src=\"/attaches/F0B33D0906E990B89F4E7618E41C631F.png\" alt=\"\" class=\"img-responsive\" /></p>\n<h2>修复一个早期的提交</h2>\n<p>场景：你在之前的提交中忘记提交了一些文件，你想给它添加这个文件。你还没有推送，但是那并不是最近的提交，所以不能使用<code>commit --amend</code></p>\n<p>命令：<code>git commit --squash &lt;SHA of the earlier commit&gt;</code> 和 <code>git rebase --autosquash -i &lt;even earlier SHA&gt;</code></p>\n<p>解释：<code>git commit --squash</code>将会创建一个新的分支，携带消息&quot;squash! Earlier commit&quot;。（你可以手动创建提交，并写上上边的信息，但是<code>commit --squash</code>保存了一些输入。）</p>\n<p>如果你不想提前写一些消息的话，你也可以使用<code>git commit --fixup</code>。在这个场景中，最好使用<code>commit --fixup</code>，因为在rebase过程中，你仅仅想要使用早期提交的消息。</p>\n<p><code>rebase --autosquash -i</code> 会执行交互式的rebase编辑，但是编辑器会使用任何<code>squash</code> 和 <code>fixup</code>已经适配的提交展现列表，就像这样：</p>\n<p><img src=\"/attaches/0CE2D8A7DC4FDE12D93067DF5724FCD2.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>当使用<code>--squash</code> 和 <code>--fixup</code>时,你可能不记得你想要修复的提交的SHA。你可能觉得使用GIT的<code>^</code>和<code>~</code>操作很难。<code>HEAD^</code>代表<code>HEAD</code>之前的一条提交。<code>HEAD~4</code>代表<code>HEAD</code>之前的4条提交或者组合在一起，五条纪录之前。</p>\n<h2>停止记录一个已经记录的文件</h2>\n<p>前提：你添加了log文件到仓库中，每次运行程序都保存log的修改，你已经把log放到了忽略文件中，但是文件始终在那里怎么样撤销跟踪文件呢？</p>\n<p>命令：<code>git rm --cached *.log</code></p>\n<p>解释：忽略文件本身是阻止跟踪文件改变的，但是如果一个文件已经添加并且提交之后，GIT将会一致跟踪文件的改变。</p>\n<p><a href=\"https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/\">阅读原文</a></p>\n","hasMore":true,"tags":["GIT","撤销"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT】如何使用git撤销\ntags:\n  - GIT\n  - 撤销\ncategories: 转载\ndate: 2018-09-13\nstatus: published\n\n---\n\n版本管理最有用的地方就是可以撤销发生的问题。在`GIT`中，撤销可以有很多细微的不同。当创建新的提交的时候，`GIT`会存储当时仓库的快照，这样就可以使用`GIT`回顾工程之前的版本。在这片文章里，我将会重现一些需要做撤销操作的场景，并且展示如何使用`GIT`进行处理。\n\n<!-- more -->\n\n## 撤销一个公共的改变\n\n场景：你刚刚运行了`git push`，提交已经改变的数据。但是在众多提交中你发现了一个问题，希望撤销那个提交。\n\n命令：`git revert <sha>`\n\n解释：`git revert` 会创建一个新的提交，但是它会是提供的SHA对应的提交的一个逆操作。如果旧的提交叫做`matter`的话，新的提交就会命名为`anti-matter`，所有删除的操作都会添加到新的分支里，所有添加操作都会在新分支里删除。\n\n这是`GIT`最安全、最基础的撤销操作，因为这个操作不改变历史提交。接下来可以使用`git push`提交刚刚的改变了。\n\n## 修改最后一次提交的消息\n\n场景：你刚刚运行了命令`git commit -m \"Fxies bug #42\"`，提交了最后一次消息，但是在`git push`之前你发现应该是\"Fixes bug #42\"。\n\n命令：`git commit --amend` 或者 `git commit --amend -m \"Fixes bug #42\"`\n\n解释：`git commit --amend`将会用新创建的包含前一次提交改变所有内容的提交来更新替换最近一次的提交。如果没有任何改变，这样将仅仅会重写上一次的提交信息。\n\n## 撤销本地改变\n\n场景：猫走过你的键盘，莫名其妙的保存了修改，之后编辑器崩溃了，但是你还没有提交修改。你想恢复文件，仅仅是恢复到上一次提交的版本。\n\n命令：`git checkout -- <bad filename>`\n\n解释：`git checkout` 会把文件修改到前一次已知提交。你应该提供一个分支名称或者指定SHA用来恢复，或者默认情况下，`GIT`会假设你想要检出`HEAD`，当前检出分支的最新提交。\n\n记住：这种方式撤销的改变是不能恢复的。因为改变就没有提交过，所以`GIT`不能帮助恢复这些文件。确定你知道你放弃的文件内容，或者比较来确认。\n\n## 重置本地改变\n\n场景：你在本地进行了几次提交，还没有推送到远程，但是看上去都不是很好，你想要撤销最新的三个提交，就像从来没提交过一样。\n\n命令：`git reset <last good SHA>` 或者 `git reset --hard <last good SHA>`\n\n解释：`git reset` 会恢复历史到指定的SHA对应的提交。就好像那些提交根本没发生过。默认情况下，`git reset` 保存工作目录的改变。提交删除后，内容却还在磁盘上。这是最安全的方式，但是通常，你想要撤销提交并且删除改变，这时候就可以使用`--hard`。\n\n## 在撤销本地之后重做\n\n场景：你进行了几次提交，使用`git reset --hard`撤销了改变，然后想要那些改变再恢复。\n\n命令：`git reflog` 和 `git reset` 或者 `git checkout`\n\n解释：`git reflog` 是一个很强大的历史恢复工具。基本上可以恢复任何提交。\n\n你可能很熟悉`git log`命令，这个命令会列出提交列表。`git reflog`很相似，但是会显示`HEAD`改变的时刻。\n\n附加说明：\n- `HEAD`仅改变。`HEAD`会在你更换分支时、提交代码时（`git commit`）和重置目录时（`git reset`）改变，但是不会在你`git checkout -- <bad filename>`时改变。（就像之前的场景，那些改变并没有提交，所以不能使用reflog恢复。）\n- `git reflog`不会永远保存。`GIT`会周期性地清理无法获取的对象。不要寄希望于找到上个月的提交内容。\n- 你的reflog仅仅是你自己的。你不能使用reflog还原其他开发者的未推送提交。\n\n![](../DATA/f6b9f054-d891-11e4-8c53-838eff9f40ae.png)\n\n所以...如何使用reflog重做一个或者多个之前撤销的提交呢？它基于你想要达成的目的：\n- 如果想要恢复工程提交的历史，就像之前那样。使用`git reset --hard <SHA>`；\n- 如果你想恢复一个或者多个工程文件，单不改变历史提交。使用`git checkout <SHA> -- <filename>`；\n- 如果你想准确的恢复仓库众多提交中的一个。使用`git cherry-pick <SHA>`；\n\n## 重用分支\n\n场景：你做了一些提交，然后发现自己在master分支检出的。你希望在其他分支做这些提交。\n\n命令：`git branch feature`，`git reset --hard origin/master` 和 `git checkout feature`\n\n解释：你可能会使用`git checkout -b <name>`创建新分支，这是一种创建分支并检出的简单写法，但是你并不想马上更换分支。这里`git branch feature`创建了一个称作feature的新分支，指向最新的提交，但是并没有检出到master分支。\n\n下一步，`git reset --hard`在所有提交之前将master分支重置到origin/master分支。不要担心，它们仍然在feature上可用。\n\n最后，`git checkout`转分支到新的拥有所有最近改变的feature分支。\n\n## 及时保存分支\n\n场景：你基于master分支创建feature分支，但是master分支远落后于origin/master分支。现在master已经和origin/master分支同步了，你希望提交feature的起点是现在的master分支，代替之前的。\n\n命令：`git checkout feature` 和 `git rebase master`\n\n解释：你可以使用`git reset`（没有--hard）命令，然后`git checkout -b <new branch name>`创建新的分支重新提交，但是那样会丢失提交的历史。有更好的办法。\n\n`git rebase master` 做了如下几件事情：\n- 第一，它定位了当前分支和master分支共同的祖先。\n- 然后，它重置了当前分支到祖先，缓存了所有祖先之后的提交。\n- 最后，将当前分支提前拼接到master分支结尾，并且恢复缓存提交到master最后的一次提交之后。\n\n## 混合撤销或者重做\n\n场景：你开起了一个特性开发，开发过程中你意识到，有更好的解决方式。你已经提交了很多次了，但是你只是需要一部分提交，希望另外一部分消失。\n\n命令：`git rebase -i <earlier SHA>`\n\n解释：`-i`代表交互模式。它就像之前所说的rebase命令一样，但是在恢复提交之前，它会暂停允许你定义恢复的每一条提交。\n\n`rebase -i`将会在你的默认编辑器中打开一个命令列表，就像这样：\n\n![](../DATA/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png)\n\n第一列代表提交选择的命令；第二列代表提交的对应SHA值；默认情况下，`rebase -i`假设每条提交都会应用，使用`pick`命令。\n\n丢弃提交的方式就是删除提交所在行。如果你不希望再看到有问题的提交，你可以直接删除上面图片中的第一行和三四行。\n\n如果你想保留提交的内容到那时修改提交消息的话，需要使用`reword`命令。仅仅是替换`pick`单词即可。这样就能够马上重写提交消息，但是这样并不起作用，`rebase -i`忽略了SHA列之后的内容。之后的内容其实只是帮助我们理解前面的内容。当完成了`rebase -i`之后，你需要重新写提交消息。\n\n如果你想合并两条提交，你需要使用`squash`和`fixup`，像这样：\n\n![](../DATA/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png)\n\n`squash`和`fixup`将会合并之前的提交。在上图中，`0835fe2` 和 `6943e85`将会合并成一条；`38f5e4e` 和 `af67f82`将会合并为另外一条。\n\n当选则`squash`，GIT将会给合并后的提交添加一个新的提交消息；`fixup`将会把第一条提交的消息添加到新的提交里。在这里，`af67f82`是“ooops”，仅仅使用`38f5e4e`的提交消息；但是`0835fe2` 和 `6943e85`合并后，你会写一条新的提交消息；\n\n当你保存并且推出编辑器，GIT将会按顺序从上到下应用你的提交。你可以改变提交顺序。如果你想，你可以通过调整顺序合并 `af67f82` 和 `0835fe2`，就像这样：\n\n![](../DATA/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png)\n\n## 修复一个早期的提交\n\n场景：你在之前的提交中忘记提交了一些文件，你想给它添加这个文件。你还没有推送，但是那并不是最近的提交，所以不能使用`commit --amend`\n\n命令：`git commit --squash <SHA of the earlier commit>` 和 `git rebase --autosquash -i <even earlier SHA>`\n\n解释：`git commit --squash`将会创建一个新的分支，携带消息\"squash! Earlier commit\"。（你可以手动创建提交，并写上上边的信息，但是`commit --squash`保存了一些输入。）\n\n如果你不想提前写一些消息的话，你也可以使用`git commit --fixup`。在这个场景中，最好使用`commit --fixup`，因为在rebase过程中，你仅仅想要使用早期提交的消息。\n\n`rebase --autosquash -i` 会执行交互式的rebase编辑，但是编辑器会使用任何`squash` 和 `fixup`已经适配的提交展现列表，就像这样：\n\n![](../DATA/f6a7a1d8-d891-11e4-8784-c32262ff54da.png)\n\n当使用`--squash` 和 `--fixup`时,你可能不记得你想要修复的提交的SHA。你可能觉得使用GIT的`^`和`~`操作很难。`HEAD^`代表`HEAD`之前的一条提交。`HEAD~4`代表`HEAD`之前的4条提交或者组合在一起，五条纪录之前。\n\n## 停止记录一个已经记录的文件\n\n前提：你添加了log文件到仓库中，每次运行程序都保存log的修改，你已经把log放到了忽略文件中，但是文件始终在那里怎么样撤销跟踪文件呢？\n\n命令：`git rm --cached *.log`\n\n解释：忽略文件本身是阻止跟踪文件改变的，但是如果一个文件已经添加并且提交之后，GIT将会一致跟踪文件的改变。\n\n[阅读原文](https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/)\n"},{"title":"【GIT】规范提交信息的七大法则","excerpt":"<blockquote>\n<p>喜欢条理吧，它能保护你的时间和精力。</p>\n</blockquote>\n","url":"/2018/09/13/转载/【GIT】规范提交信息的七大法则","fromDate":"2018-09-13","category":"转载","text":"<blockquote>\n<p>喜欢条理吧，它能保护你的时间和精力。</p>\n</blockquote>\n<!-- more -->\n<p><img src=\"/attaches/5073E854C5DBA1C45BB9FABC465AFECA.png\" alt=\"\" class=\"img-responsive\" /></p>\n<h2>简介：为什么好的提交信息那么重要？</h2>\n<p>如果你浏览任意一个GIT仓库的日志，你可能就会发现它的提交消息多少有点混乱。比如，看看<a href=\"https://github.com/spring-projects/spring-framework/commits/e5f4b49?author=cbeams\">spring-framework</a>仓库的早期提交：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --oneline -5 --author cbeams --before &quot;Fri Mar 26 2009&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">e5f4b49 Re-adding ConfigurationPostProcessorTests after its brief removal in r814. @Ignore-ing the testCglibClassesAreLoadedJustInTimeForEnhancement() method as it turns out this was one of the culprits in the recent build breakage. The classloader hacking causes subtle downstream effects, breaking unrelated tests. The test method is still useful, but should only be run on a manual basis to ensure CGLIB is not prematurely classloaded, and should not be run as part of the automated build.</span><br><span class=\"line\">2db0f12 fixed two build-breaking issues: + reverted ClassMetadataReadingVisitor to revision 794 + eliminated ConfigurationPostProcessorTests until further investigation determines why it causes downstream tests to fail (such as the seemingly unrelated ClassPathXmlApplicationContextTests)</span><br><span class=\"line\">147709f Tweaks to package-info.java files</span><br><span class=\"line\">22b25e0 Consolidated Util and MutableAnnotationUtils classes into existing AsmUtils</span><br><span class=\"line\">7f96f57 polishing</span><br></pre></td></tr></tbody></table></figure>\n<p>然后把这些跟<a href=\"https://github.com/spring-projects/spring-framework/commits/5ba3db?author=philwebb\">近期的提交</a>做对比：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --oneline -5 --author pwebb --before &quot;Sat Aug 30 2014&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">5ba3db6 Fix failing CompositePropertySourceTests</span><br><span class=\"line\">84564a0 Rework @PropertySource early parsing logic</span><br><span class=\"line\">e142fd1 Add tests for ImportSelector meta-data</span><br><span class=\"line\">887815f Update docbook dependency and generate epub</span><br><span class=\"line\">ac8326d Polish mockito usage</span><br></pre></td></tr></tbody></table></figure>\n<p>你更喜欢哪个呢？</p>\n<p>前者长短不一，后者干净整齐；\n前者这种情况总会发生，后者绝不会突然发生；</p>\n<p>但是大多数仓库的日志看起来像是前者，有很多问题。<a href=\"https://github.com/torvalds/linux/commits/master\">Linux kernel</a>仓库和<a href=\"https://github.com/git/git/commits/master\">GIT本身</a>仓库就是很好的实例。看看<a href=\"https://github.com/spring-projects/spring-boot/commits/master\">Spring Boot</a>，或者任何由<a href=\"https://github.com/tpope/vim-pathogen/commits/master\">Tim Pope</a>管理的仓库。这些仓库的贡献者知道精心设计的提交信息是交流上下文改变的最好方式。<code>diff</code>将会告诉你改变了什么，但是只有提交信息能正确的告诉你为什么。Peter Hutterer这样说：</p>\n<blockquote>\n<p>Re-establishing the context of a piece of code is wasteful. We can’t avoid it completely, so our efforts should go to reducing it [as much] as possible. Commit messages can do exactly that and as a result, a commit message shows whether a developer is a good collaborator.</p>\n</blockquote>\n<p>如果你对GIT的提交信息没有什么想法，那一定是你并没有花费太多时间使用<code>git log</code>和相关工具。这里有一个恶性循环：由于提交历史的杂乱无章，一个人就不会花时间去使用维护它，即而，导致更多杂乱无章的纪录。</p>\n<p>精心设计的日志是美好的，有用的。<code>git blame</code>、<code>revert</code>，<code>rebase</code>，<code>log</code>，<code>shortlog</code>和其他的子命令变得鲜活，查看别人的提交和请求变得更有价值，并且可以迅速完成。了解几个月甚至几年以前的事情不仅变得可能，而且非常有效。</p>\n<p>一个工程的长期成功在于它的可维护性，维护者维护工程的时候，几乎没有任何工具比工程日志更有效果。学习怎样维护日志是很值得的。一开始可能是争论但是随后会变成习惯，最终成为所有参与者的骄傲和生产力的源泉。</p>\n<p>自这篇文章里，我提到基本健康提交的元素：如何书写个人提交信息。还有其它重要的练习比如合并提交（commit squashing）我并没有提到。可能会在今后的文章里提到。</p>\n<p>大多数开发语言都对习惯用语有完善的约定，例如，名称、格式等。这些公约有一些不同，但是大多数开发人员都认为选择一个并坚持使用它远比每个人都做自己的事情时所发生的混乱更好。其实团队日志也是一样的。为了创造一个有用并且可看的历史，团队应该有一个提交信息的公约，定义至少一下三件事：</p>\n<ul>\n<li>样式。</li>\n<li>内容。</li>\n<li>元数据。</li>\n</ul>\n<p>幸运地是，已经有一些成熟的约定规定了如何创建提交信息。实际上，其中许多都是以某些Git命令的运行方式来假设的。你不用创造什么，仅仅是遵守以下几条规则而已。</p>\n<h2>提交信息的几条规范</h2>\n<blockquote>\n<p>记住：这些都已经说过无数遍了。</p>\n</blockquote>\n<ul>\n<li>每个主题和内容之间要空一行</li>\n<li>主题最多50个字</li>\n<li>主题首字母大写（英文的话）</li>\n<li>不要在主题尾部使用句号</li>\n<li>在主题中蕴含命令的口吻（实际上是动宾短语类）</li>\n<li>内容需要优化每行文本到72个字符（因为git本身是右对齐的，而且并不会自动优化显示文字）</li>\n<li>使用内容解释是什么，为什么，怎么办之类的问题</li>\n</ul>\n<p>例如：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Summarize changes in around 50 characters or less</span><br><span class=\"line\"></span><br><span class=\"line\">More detailed explanatory text, if necessary. Wrap it to about 72</span><br><span class=\"line\">characters or so. In some contexts, the first line is treated as the</span><br><span class=\"line\">subject of the commit and the rest of the text as the body. The</span><br><span class=\"line\">blank line separating the summary from the body is critical (unless</span><br><span class=\"line\">you omit the body entirely); various tools like `log`, `shortlog`</span><br><span class=\"line\">and `rebase` can get confused if you run the two together.</span><br><span class=\"line\"></span><br><span class=\"line\">Explain the problem that this commit is solving. Focus on why you</span><br><span class=\"line\">are making this change as opposed to how (the code explains that).</span><br><span class=\"line\">Are there side effects or other unintuitive consequences of this</span><br><span class=\"line\">change? Here's the place to explain them.</span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\"> - Bullet points are okay, too</span><br><span class=\"line\"></span><br><span class=\"line\"> - Typically a hyphen or asterisk is used for the bullet, preceded</span><br><span class=\"line\">   by a single space, with blank lines in between, but conventions</span><br><span class=\"line\">   vary here</span><br><span class=\"line\"></span><br><span class=\"line\">If you use an issue tracker, put references to them at the bottom,</span><br><span class=\"line\">like this:</span><br><span class=\"line\"></span><br><span class=\"line\">Resolves: #123</span><br><span class=\"line\">See also: #456, #789</span><br></pre></td></tr></tbody></table></figure>\n<h3>主题和内容之间要空一行</h3>\n<p>来自<code>git commit</code>的消息：</p>\n<blockquote>\n<p>Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</p>\n</blockquote>\n<p>第一步，并不是每一个提交都需要主题和内容。有时候一行就足够了，特别是修改非常简单的时候。例如：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fix typo in introduction to user guide</span><br></pre></td></tr></tbody></table></figure>\n<p>不用说很多；如果说读者想要知道究竟怎么回事，她完全可以看一下修改内容，比如使用<code>git show</code>或者<code>git diff</code>或者<code>git log -p</code>。</p>\n<p>如果你提交了这些信息，可以使用<code>-m</code>直接提交信息：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m&quot;Fix typo in introduction to user guide&quot;</span><br></pre></td></tr></tbody></table></figure>\n<p>然而，当一个提交需要解释和内容的时候，你就需要写内容了。例如：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Derezz the master control program</span><br><span class=\"line\"></span><br><span class=\"line\">MCP turned out to be evil and had become intent on world domination.</span><br><span class=\"line\">This commit throws Tron's disc into MCP (causing its deresolution)</span><br><span class=\"line\">and turns it back into a chess game.</span><br></pre></td></tr></tbody></table></figure>\n<p>这时候使用<code>-m</code>选项就有点力不从心了。你最好能在一个编辑器里写这些内容。如果你并没有命令行使用的编辑器，可以看一下<a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration\">this section of Pro Git</a>。</p>\n<p>在任何情况下，在浏览日志时，主体与身体的分离都会得到回报。以下是完整的日志：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 42e769bdf4894310333942ffc5a15151222a87be</span><br><span class=\"line\">Author: Kevin Flynn &lt;kevin@flynnsarcade.com&gt;</span><br><span class=\"line\">Date:   Fri Jan 01 00:00:00 1982 -0200</span><br><span class=\"line\"></span><br><span class=\"line\"> Derezz the master control program</span><br><span class=\"line\"></span><br><span class=\"line\"> MCP turned out to be evil and had become intent on world domination.</span><br><span class=\"line\"> This commit throws Tron's disc into MCP (causing its deresolution)</span><br><span class=\"line\"> and turns it back into a chess game.</span><br></pre></td></tr></tbody></table></figure>\n<p>使用<code>git log --oneline</code>， 仅仅输出一行主题：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --oneline</span><br><span class=\"line\">42e769 Derezz the master control program</span><br></pre></td></tr></tbody></table></figure>\n<p>使用 <code>git shortlog</code>，通过用户分组，仅显示主题：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git shortlog</span><br><span class=\"line\">Kevin Flynn (1):</span><br><span class=\"line\">      Derezz the master control program</span><br><span class=\"line\"></span><br><span class=\"line\">Alan Bradley (1):</span><br><span class=\"line\">      Introduce security program &quot;Tron&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Ed Dillinger (3):</span><br><span class=\"line\">      Rename chess program to &quot;MCP&quot;</span><br><span class=\"line\">      Modify chess program</span><br><span class=\"line\">      Upgrade chess program</span><br><span class=\"line\"></span><br><span class=\"line\">Walter Gibbs (1):</span><br><span class=\"line\">      Introduce protoype chess program</span><br></pre></td></tr></tbody></table></figure>\n<p>GIT有很多上下文需要主题和内容，但是如果没有空行的话，上下文就不会很好的工作。</p>\n<h3>主题最多50个字</h3>\n<p>50个字符并不是硬性标准，仅仅是经验之谈。这样能确保可读性，强制作者思考组织语言。</p>\n<blockquote>\n<p>Tip: If you’re having a hard time summarizing, you might be committing too many changes at once. Strive for atomic commits (a topic for a separate post).（简而言之，如果描述太长就分开提交）</p>\n</blockquote>\n<p>Github就有这些规则，如果太长他就会提醒你：</p>\n<p><img src=\"/attaches/0E962DC2B879B9DE3A2F19A68AAEF5AD.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>并且会截断超过72个字符的主题。</p>\n<p><img src=\"/attaches/6A0D0338B0109800B01C1272C2660418.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>所以限制到50个字符, 考虑将长度硬性限制到72个字符。</p>\n<h3>主题首字母大写（英文的话）</h3>\n<p>就像标题写的，很简单，首字母大写。例如：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accelerate to 88 miles per hour</span><br></pre></td></tr></tbody></table></figure>\n<p>代替</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accelerate to 88 miles per hour</span><br></pre></td></tr></tbody></table></figure>\n<h3>不要在主题尾部使用句号</h3>\n<p>主题行中不需要使用句号。 此外，当你试图将它们保持在50个或更少字符时，空间是宝贵的。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Open the pod bay doors</span><br></pre></td></tr></tbody></table></figure>\n<p>代替</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Open the pod bay doors.</span><br></pre></td></tr></tbody></table></figure>\n<h3>在主题中蕴含命令的口吻</h3>\n<p>命令的口吻意思是“表达的时候就好像是在发出命令或指示”。下面是几个例子：</p>\n<ul>\n<li>收拾你的房间</li>\n<li>关门</li>\n<li>把垃圾带出去</li>\n</ul>\n<p>你现在正在阅读的七条规则中的每一条都在使用命令的口吻。</p>\n<p>命令听起来有点粗鲁；这就是为什么我们不经常使用它。但它对于Git提交主题来说是完美的。其中一个原因是，<strong>只要代表作者创建提交，Git就会使用命令</strong>。</p>\n<p>例如，当你使用<code>git merge</code>时创建的默认消息是：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge branch 'myfeature'</span><br></pre></td></tr></tbody></table></figure>\n<p>使用时<code>git revert</code>：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Revert &quot;Add the thing with the stuff&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit cc87791524aedd593cff5a74532befe7ab69ce9d.</span><br></pre></td></tr></tbody></table></figure>\n<p>或者在GitHub拉取请求上单击“合并”按钮时：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge pull request #123 from someuser/somebranch</span><br></pre></td></tr></tbody></table></figure>\n<p>因此，当你在命令式中编写提交消息时，你需要遵循Git自己的内置约定。例如：</p>\n<ul>\n<li>Refactor subsystem X for readability</li>\n<li>Update getting started documentation</li>\n<li>Remove deprecated methods</li>\n<li>Release version 1.0.0</li>\n</ul>\n<p>一开始以这种方式书写可能有点尴尬。我们更习惯于在指示性情绪中说话，这完全是事实。这就是为什么提交消息最​​终会像这样读取：</p>\n<ul>\n<li>Fixed bug with Y</li>\n<li>Changing behavior of X</li>\n</ul>\n<p>有时候，提交消息会被写成对其内容的描述：</p>\n<ul>\n<li>More fixes for broken stuff</li>\n<li>Sweet new API methods</li>\n</ul>\n<p>为了消除所有的混淆，以下是一个简单的规则去纠正问题。</p>\n<p><strong>正确的Git提交主题应始终能够完成以下句子</strong>：If applied, this commit will <em><code>your subject line here</code></em></p>\n<p>例如：</p>\n<ul>\n<li>If applied, this commit will <em><code>refactor subsystem X for readability</code></em></li>\n<li>If applied, this commit will <em><code>update getting started documentation</code></em></li>\n<li>If applied, this commit will <em><code>remove deprecated methods</code></em></li>\n<li>If applied, this commit will <em><code>release version 1.0.0</code></em></li>\n<li>If applied, this commit will <em><code>merge pull request #123 from user/branch</code></em></li>\n</ul>\n<p>注意：这不适用于其他非命令性的主题：</p>\n<ul>\n<li>If applied, this commit will <em><code>fixed bug with Y</code></em></li>\n<li>If applied, this commit will <em><code>changing behavior of X</code></em></li>\n<li>If applied, this commit will <em><code>more fixes for broken stuff</code></em></li>\n<li>If applied, this commit will <em><code>sweet new API methods</code></em></li>\n</ul>\n<blockquote>\n<p>Remember: Use of the imperative is important only in the subject line. You can relax this restriction when you’re writing the body.</p>\n</blockquote>\n<h3>内容需要优化每行文本到72个字符</h3>\n<p>GIT从来不自动包装文本。当你在文本编辑器中写内容的时候，记得注意右边距，手动包装文本。</p>\n<p>建议以72个字符执行此操作，以便Git有足够的空间来缩进文本，同时仍然保持整体不超过80个字符。</p>\n<p>一个好的文本编辑器可以在这里帮到你。 例如，在编写Git提交时，可以很容易地配置Vim以将文本行限制为72个字符。然而，IDE为提交消息中的文本提供智能支持方面非常糟糕（尽管在最近的版本中，IDEA终于在这方面做得更好了）。</p>\n<h3>使用内容解释是什么，为什么，怎么办之类的问题</h3>\n<p><a href=\"https://github.com/bitcoin/bitcoin/commit/eb0b56b19017ab5c16c745e6da39c53126924ed6\">Bitcoin Core</a>的提交就是一个解释改变了什么和为什么改变的很好的例子：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit eb0b56b19017ab5c16c745e6da39c53126924ed6</span><br><span class=\"line\">Author: Pieter Wuille &lt;pieter.wuille@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri Aug 1 22:57:55 2014 +0200</span><br><span class=\"line\"></span><br><span class=\"line\">   Simplify serialize.h's exception handling</span><br><span class=\"line\"></span><br><span class=\"line\">   Remove the 'state' and 'exceptmask' from serialize.h's stream</span><br><span class=\"line\">   implementations, as well as related methods.</span><br><span class=\"line\"></span><br><span class=\"line\">   As exceptmask always included 'failbit', and setstate was always</span><br><span class=\"line\">   called with bits = failbit, all it did was immediately raise an</span><br><span class=\"line\">   exception. Get rid of those variables, and replace the setstate</span><br><span class=\"line\">   with direct exception throwing (which also removes some dead</span><br><span class=\"line\">   code).</span><br><span class=\"line\"></span><br><span class=\"line\">   As a result, good() is never reached after a failure (there are</span><br><span class=\"line\">   only 2 calls, one of which is in tests), and can just be replaced</span><br><span class=\"line\">   by !eof().</span><br><span class=\"line\"></span><br><span class=\"line\">   fail(), clear(n) and exceptions() are just never called. Delete</span><br><span class=\"line\">   them.</span><br></pre></td></tr></tbody></table></figure>\n<p>看看完整的差异，想想作者节省了同事和未来提交者多少时间。 如果他没有这样做，这段提交可能会永远丢失。</p>\n<p>在大多数情况下，您可以省略有关如何进行更改的详细信息。 在这方面，代码通常是不言自明的（如果代码太复杂，需要在内容中解释，那就是源代码注释的用途）。 只需要解释你做出改变的原因，改变之前的事情是如何运行的（并且这样运行的问题），他们现在的工作方式，以及为什么你决定以现在的方式解决它。</p>\n<p>未来你可能会因此受益。</p>\n<p><a href=\"http://chris.beams.io/posts/git-commit/\">阅读原文</a></p>\n","hasMore":true,"tags":["GIT","提交信息"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT】规范提交信息的七大法则\ntags:\n  - GIT\n  - 提交信息\ncategories: 转载\ndate: 2018-09-13\nstatus: published\n\n---\n\n> 喜欢条理吧，它能保护你的时间和精力。\n\n<!-- more -->\n\n![](../DATA/git_commit_2x.png)\n\n## 简介：为什么好的提交信息那么重要？\n\n如果你浏览任意一个GIT仓库的日志，你可能就会发现它的提交消息多少有点混乱。比如，看看[spring-framework](https://github.com/spring-projects/spring-framework/commits/e5f4b49?author=cbeams)仓库的早期提交：\n\n```bash\n$ git log --oneline -5 --author cbeams --before \"Fri Mar 26 2009\"\n\ne5f4b49 Re-adding ConfigurationPostProcessorTests after its brief removal in r814. @Ignore-ing the testCglibClassesAreLoadedJustInTimeForEnhancement() method as it turns out this was one of the culprits in the recent build breakage. The classloader hacking causes subtle downstream effects, breaking unrelated tests. The test method is still useful, but should only be run on a manual basis to ensure CGLIB is not prematurely classloaded, and should not be run as part of the automated build.\n2db0f12 fixed two build-breaking issues: + reverted ClassMetadataReadingVisitor to revision 794 + eliminated ConfigurationPostProcessorTests until further investigation determines why it causes downstream tests to fail (such as the seemingly unrelated ClassPathXmlApplicationContextTests)\n147709f Tweaks to package-info.java files\n22b25e0 Consolidated Util and MutableAnnotationUtils classes into existing AsmUtils\n7f96f57 polishing\n```\n\n然后把这些跟[近期的提交](https://github.com/spring-projects/spring-framework/commits/5ba3db?author=philwebb)做对比：\n\n```bash\n$ git log --oneline -5 --author pwebb --before \"Sat Aug 30 2014\"\n\n5ba3db6 Fix failing CompositePropertySourceTests\n84564a0 Rework @PropertySource early parsing logic\ne142fd1 Add tests for ImportSelector meta-data\n887815f Update docbook dependency and generate epub\nac8326d Polish mockito usage\n```\n\n你更喜欢哪个呢？\n\n前者长短不一，后者干净整齐；\n前者这种情况总会发生，后者绝不会突然发生；\n\n但是大多数仓库的日志看起来像是前者，有很多问题。[Linux kernel](https://github.com/torvalds/linux/commits/master)仓库和[GIT本身](https://github.com/git/git/commits/master)仓库就是很好的实例。看看[Spring Boot](https://github.com/spring-projects/spring-boot/commits/master)，或者任何由[Tim Pope](https://github.com/tpope/vim-pathogen/commits/master)管理的仓库。这些仓库的贡献者知道精心设计的提交信息是交流上下文改变的最好方式。`diff`将会告诉你改变了什么，但是只有提交信息能正确的告诉你为什么。Peter Hutterer这样说：\n\n> Re-establishing the context of a piece of code is wasteful. We can’t avoid it completely, so our efforts should go to reducing it [as much] as possible. Commit messages can do exactly that and as a result, a commit message shows whether a developer is a good collaborator.\n\n如果你对GIT的提交信息没有什么想法，那一定是你并没有花费太多时间使用`git log`和相关工具。这里有一个恶性循环：由于提交历史的杂乱无章，一个人就不会花时间去使用维护它，即而，导致更多杂乱无章的纪录。\n\n精心设计的日志是美好的，有用的。`git blame`、`revert`，`rebase`，`log`，`shortlog`和其他的子命令变得鲜活，查看别人的提交和请求变得更有价值，并且可以迅速完成。了解几个月甚至几年以前的事情不仅变得可能，而且非常有效。\n\n一个工程的长期成功在于它的可维护性，维护者维护工程的时候，几乎没有任何工具比工程日志更有效果。学习怎样维护日志是很值得的。一开始可能是争论但是随后会变成习惯，最终成为所有参与者的骄傲和生产力的源泉。\n\n自这篇文章里，我提到基本健康提交的元素：如何书写个人提交信息。还有其它重要的练习比如合并提交（commit squashing）我并没有提到。可能会在今后的文章里提到。\n\n大多数开发语言都对习惯用语有完善的约定，例如，名称、格式等。这些公约有一些不同，但是大多数开发人员都认为选择一个并坚持使用它远比每个人都做自己的事情时所发生的混乱更好。其实团队日志也是一样的。为了创造一个有用并且可看的历史，团队应该有一个提交信息的公约，定义至少一下三件事：\n\n- 样式。\n- 内容。\n- 元数据。\n\n幸运地是，已经有一些成熟的约定规定了如何创建提交信息。实际上，其中许多都是以某些Git命令的运行方式来假设的。你不用创造什么，仅仅是遵守以下几条规则而已。\n\n## 提交信息的几条规范\n\n>记住：这些都已经说过无数遍了。\n\n- 每个主题和内容之间要空一行\n- 主题最多50个字\n- 主题首字母大写（英文的话）\n- 不要在主题尾部使用句号\n- 在主题中蕴含命令的口吻（实际上是动宾短语类）\n- 内容需要优化每行文本到72个字符（因为git本身是右对齐的，而且并不会自动优化显示文字）\n- 使用内容解释是什么，为什么，怎么办之类的问题\n\n例如：\n```bash\nSummarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n```\n\n### 主题和内容之间要空一行\n\n来自`git commit`的消息：\n\n>Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.\n\n第一步，并不是每一个提交都需要主题和内容。有时候一行就足够了，特别是修改非常简单的时候。例如：\n\n```bash\nFix typo in introduction to user guide\n```\n\n不用说很多；如果说读者想要知道究竟怎么回事，她完全可以看一下修改内容，比如使用`git show`或者`git diff`或者`git log -p`。\n\n如果你提交了这些信息，可以使用`-m`直接提交信息：\n\n```bash\n$ git commit -m\"Fix typo in introduction to user guide\"\n```\n\n然而，当一个提交需要解释和内容的时候，你就需要写内容了。例如：\n\n```bash\nDerezz the master control program\n\nMCP turned out to be evil and had become intent on world domination.\nThis commit throws Tron's disc into MCP (causing its deresolution)\nand turns it back into a chess game.\n```\n\n这时候使用`-m`选项就有点力不从心了。你最好能在一个编辑器里写这些内容。如果你并没有命令行使用的编辑器，可以看一下[this section of Pro Git](https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration)。\n\n在任何情况下，在浏览日志时，主体与身体的分离都会得到回报。以下是完整的日志：\n\n```bash\n$ git log\ncommit 42e769bdf4894310333942ffc5a15151222a87be\nAuthor: Kevin Flynn <kevin@flynnsarcade.com>\nDate:   Fri Jan 01 00:00:00 1982 -0200\n\n Derezz the master control program\n\n MCP turned out to be evil and had become intent on world domination.\n This commit throws Tron's disc into MCP (causing its deresolution)\n and turns it back into a chess game.\n```\n\n使用`git log --oneline`， 仅仅输出一行主题：\n\n```bash\n$ git log --oneline\n42e769 Derezz the master control program\n```\n\n使用 `git shortlog`，通过用户分组，仅显示主题：\n\n```bash\n$ git shortlog\nKevin Flynn (1):\n      Derezz the master control program\n\nAlan Bradley (1):\n      Introduce security program \"Tron\"\n\nEd Dillinger (3):\n      Rename chess program to \"MCP\"\n      Modify chess program\n      Upgrade chess program\n\nWalter Gibbs (1):\n      Introduce protoype chess program\n```\n\nGIT有很多上下文需要主题和内容，但是如果没有空行的话，上下文就不会很好的工作。\n\n### 主题最多50个字\n\n50个字符并不是硬性标准，仅仅是经验之谈。这样能确保可读性，强制作者思考组织语言。\n\n> Tip: If you’re having a hard time summarizing, you might be committing too many changes at once. Strive for atomic commits (a topic for a separate post).（简而言之，如果描述太长就分开提交）\n\nGithub就有这些规则，如果太长他就会提醒你：\n\n![](../DATA/zyBU2l6.png)\n\n并且会截断超过72个字符的主题。\n\n![](../DATA/27n9O8y.png)\n\n所以限制到50个字符, 考虑将长度硬性限制到72个字符。\n\n### 主题首字母大写（英文的话）\n\n就像标题写的，很简单，首字母大写。例如：\n\n```bash\nAccelerate to 88 miles per hour\n```\n代替\n```bash\naccelerate to 88 miles per hour\n```\n\n### 不要在主题尾部使用句号\n\n主题行中不需要使用句号。 此外，当你试图将它们保持在50个或更少字符时，空间是宝贵的。\n```bash\nOpen the pod bay doors\n```\n代替\n```bash\nOpen the pod bay doors.\n```\n\n### 在主题中蕴含命令的口吻 \n\n命令的口吻意思是“表达的时候就好像是在发出命令或指示”。下面是几个例子：\n\n- 收拾你的房间\n- 关门\n- 把垃圾带出去\n\n你现在正在阅读的七条规则中的每一条都在使用命令的口吻。\n\n命令听起来有点粗鲁；这就是为什么我们不经常使用它。但它对于Git提交主题来说是完美的。其中一个原因是，**只要代表作者创建提交，Git就会使用命令**。\n\n例如，当你使用`git merge`时创建的默认消息是：\n\n```bash\nMerge branch 'myfeature'\n```\n\n使用时`git revert`：\n\n```bash\nRevert \"Add the thing with the stuff\"\n\nThis reverts commit cc87791524aedd593cff5a74532befe7ab69ce9d.\n```\n\n或者在GitHub拉取请求上单击“合并”按钮时：\n\n```bash\nMerge pull request #123 from someuser/somebranch\n```\n\n因此，当你在命令式中编写提交消息时，你需要遵循Git自己的内置约定。例如：\n\n- Refactor subsystem X for readability\n- Update getting started documentation\n- Remove deprecated methods\n- Release version 1.0.0\n\n一开始以这种方式书写可能有点尴尬。我们更习惯于在指示性情绪中说话，这完全是事实。这就是为什么提交消息最​​终会像这样读取：\n\n- Fixed bug with Y\n- Changing behavior of X\n\n有时候，提交消息会被写成对其内容的描述：\n\n- More fixes for broken stuff\n- Sweet new API methods\n\n为了消除所有的混淆，以下是一个简单的规则去纠正问题。\n\n**正确的Git提交主题应始终能够完成以下句子**：If applied, this commit will *`your subject line here`*\n\n例如：\n- If applied, this commit will *`refactor subsystem X for readability`*\n- If applied, this commit will *`update getting started documentation`*\n- If applied, this commit will *`remove deprecated methods`*\n- If applied, this commit will *`release version 1.0.0`*\n- If applied, this commit will *`merge pull request #123 from user/branch`*\n\n注意：这不适用于其他非命令性的主题：\n\n- If applied, this commit will *`fixed bug with Y`*\n- If applied, this commit will *`changing behavior of X`*\n- If applied, this commit will *`more fixes for broken stuff`*\n- If applied, this commit will *`sweet new API methods`*\n\n> Remember: Use of the imperative is important only in the subject line. You can relax this restriction when you’re writing the body.\n\n\n### 内容需要优化每行文本到72个字符 \n\nGIT从来不自动包装文本。当你在文本编辑器中写内容的时候，记得注意右边距，手动包装文本。\n\n建议以72个字符执行此操作，以便Git有足够的空间来缩进文本，同时仍然保持整体不超过80个字符。\n\n一个好的文本编辑器可以在这里帮到你。 例如，在编写Git提交时，可以很容易地配置Vim以将文本行限制为72个字符。然而，IDE为提交消息中的文本提供智能支持方面非常糟糕（尽管在最近的版本中，IDEA终于在这方面做得更好了）。\n\n### 使用内容解释是什么，为什么，怎么办之类的问题\n\n[Bitcoin Core](https://github.com/bitcoin/bitcoin/commit/eb0b56b19017ab5c16c745e6da39c53126924ed6)的提交就是一个解释改变了什么和为什么改变的很好的例子：\n\n```bash\ncommit eb0b56b19017ab5c16c745e6da39c53126924ed6\nAuthor: Pieter Wuille <pieter.wuille@gmail.com>\nDate:   Fri Aug 1 22:57:55 2014 +0200\n\n   Simplify serialize.h's exception handling\n\n   Remove the 'state' and 'exceptmask' from serialize.h's stream\n   implementations, as well as related methods.\n\n   As exceptmask always included 'failbit', and setstate was always\n   called with bits = failbit, all it did was immediately raise an\n   exception. Get rid of those variables, and replace the setstate\n   with direct exception throwing (which also removes some dead\n   code).\n\n   As a result, good() is never reached after a failure (there are\n   only 2 calls, one of which is in tests), and can just be replaced\n   by !eof().\n\n   fail(), clear(n) and exceptions() are just never called. Delete\n   them.\n```\n\n看看完整的差异，想想作者节省了同事和未来提交者多少时间。 如果他没有这样做，这段提交可能会永远丢失。\n\n在大多数情况下，您可以省略有关如何进行更改的详细信息。 在这方面，代码通常是不言自明的（如果代码太复杂，需要在内容中解释，那就是源代码注释的用途）。 只需要解释你做出改变的原因，改变之前的事情是如何运行的（并且这样运行的问题），他们现在的工作方式，以及为什么你决定以现在的方式解决它。\n\n未来你可能会因此受益。\n\n[阅读原文](http://chris.beams.io/posts/git-commit/)\n"},{"title":"【GIT工作流指南】【六】企业日常开发模式探索","excerpt":"<p><a href=\"https://github.com/xirong\">xirong</a> 结合自己所在公司使用git的版本分支开发过程，进行了总结。</p>\n","url":"/2018/09/12/转载/【GIT工作流指南】【六】企业日常开发模式探索","fromDate":"2018-09-12","category":"转载","text":"<p><a href=\"https://github.com/xirong\">xirong</a> 结合自己所在公司使用git的版本分支开发过程，进行了总结。</p>\n<!-- more -->\n<h2>企业日常开发模式探索</h2>\n<p>在看这部分前，请先回顾阅读业界认可的成功的 Git Branch Work Flow 模型 <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A Successful Git Branching Model</a> ，了解日常开发中的场景，有助于熟悉下面的使用过程。</p>\n<p>在企业开发中，使用 Git 作为版本控制软件最看重的还是结合公司自己搭建的 <a href=\"https://about.gitlab.com/\">Gitlab</a>，将 Code Review 加入打包部署持续集成的流程中，这样，代码开发完成，提交测试前，便可以对开发人员提交的代码进行 Review，发现潜在的问题，及时指导，对于新人来讲，也能更快更好的学习。</p>\n<p>解决的需求场景如下：</p>\n<ul>\n<li>能支持日常迭代开发、紧急线上bug修复、多功能并行开发</li>\n<li>大概50人左右的团队，平日迭代项目较多，且周期短（1~2周一个迭代）</li>\n<li>能够通过tag重建整个系统</li>\n<li>支持code review</li>\n<li>所有上线的代码必须都是经过测试保证，且能自动同步到下一次的迭代中</li>\n<li>能和公司的项目管理/持续集成系统整合</li>\n</ul>\n<p><img src=\"/attaches/7D0DB00BFB7DC61BA9C10FBB3B7107BE.png\" alt=\"图片\" class=\"img-responsive\" /></p>\n<p>上图就是 xirong 团队在日常开发中总结出来的适合企业开发的模式，下面进行简单的介绍，方便大家学习了解。（本模式适合敏捷开发流程）</p>\n<ol>\n<li>迭代需求会、冲刺会后确定本次迭代的目标后，将迭代内容视为一个项目，在 Gitlab 上创建一个 Repository，初始化工程代码结构，根据上线日期，比如20150730上线，开出分支 release20150730、dev20150730 两个分支，dev 分支作为日常开发主干分支，release 分支作为提测打包、Code Review 的分支。</li>\n<li>迭代开始，日常开发进行中，开发人员在 dev 分支上进行 Commit、Push 代码，并且解决掉日常协同开发中的冲突等问题，等到达到提测条件的时候，提测者，首先 Merge Master 分支上的最新代码 <code>git merge --no-ff  origin/master</code> ，使得 Master 分支上的变更更新到迭代开发分支dev上面，之后，在 Gitlab 上面发起 <code>pull request</code> 请求，并指定 Code Review 人，请求的分支选择本次上线的 release 分支，即 release20150730。</li>\n<li>被指定 Code Review 的人，对发起者的代码 Review 后，决定是否可以提交测试，若有问题，评论注释代码后，提交者对代码进行进行修改，重复步骤2，直到代码 Review 者认为 Ok。之后便可以借助自己公司的打包部署，对这些代码发布到测试环境验证。</li>\n<li>步骤2-3重复多次后，就会达到一个稳定可发布的版本，即上线版本，上线后，将 release 版本上面最后的提交（图中0.2.4上线对应处）合并到 Master 分支上面，并打 Tag0.3。至此，一次完整的迭代开发完成。</li>\n<li>若此次上线后，不久发现生产环境有 Bug 需要修复，则从 Tag 处新开分支 release_bugfix_20150731、dev_bugfix_20150731 ，开发人员从 dev_bugfix_20150731分支上进行开发，提测code review在 release_bugfix_20150731 分支上，具体步骤参考2-3，测试环境验证通过后，发布到线上，验证OK，合并到 Master 分支，并打 Tag0.2.3，此次 Bug 修复完毕，专为解 Bug 而生的这两个分支可以退伍了，删除release_bugfix_20150731、dev_bugfix_20150731两分支即可。（所有的历史 Commit 信息均已经提交到了 Master 分支上，不用担心丢失）</li>\n</ol>\n<p>这样经过上面的1-5步骤，企业日常迭代开发中的代码版本控制基本上就 Ok 了。</p>\n<h2>更新 2016-11</h2>\n<p><strong>Git 分支开发部署模型</strong> 的一些使用原则如下:</p>\n<p><img src=\"/attaches/C122A29D255013BEBC78DFD255911F55.jpg\" alt=\"\" class=\"img-responsive\" /></p>\n<ul>\n<li>master：master永远是线上代码，最稳定的分支，存放的是随时可供在生产环境中部署的代码，当开发活动告一段落，产生了一份新的可供部署的代码时，发布成功之后，代码才会由 aone2 提交到 master，master 分支上的代码会被更新。应用上 aone2 后禁掉所有人的 master的写权限</li>\n<li>develop：保存当前最新开发成果的分支。通常这个分支上的代码也是可进行每日夜间发布的代码，只对开发负责人开放develop权限。</li>\n<li>feature: 功能特性分支，每个功能特性一个 feature/ 分支，开发完成自测通过后合并入 develop 分支。可以从 master 或者develop 中拉出来。</li>\n<li>hotfix: 紧急bug分支修复分支。修复上线后，可以直接合并入master。</li>\n</ul>\n<p><img src=\"/attaches/4BB567BEB43CAA3178F04FF552D8E178.jpg\" alt=\"\" class=\"img-responsive\" /></p>\n<p>Git-Develop 分支模式是基于 Git 代码库设计的一种需要严格控制发布质量和发布节奏的开发模式。develop 作为固定的持续集成和发布分支，并且分支上的代码必须经过 CodeReview 后才可以提交到 Develop 分支。它的基本流程如下：</p>\n<ul>\n<li>每一个需求/变更都单独从Master上创建一条Branch分支；</li>\n<li>用户在这个Branch分支上进行Codeing活动；</li>\n<li>代码达到发布准入条件后aone上提交Codereview，Codereview通过后代码自动合并到Develop分支；</li>\n<li>待所有计划发布的变更分支代码都合并到Develop后，系统再 rebase master 代码到Develop 分支，然后自行构建，打包，部署等动作。</li>\n<li>应用发布成功后Aone会基于Develop分支的发布版本打一个“当前线上版本Tag”基线；</li>\n<li>应用发布成功后Aone会自动把Develop分支的发布版本合并回master；</li>\n</ul>\n<h2>几篇业界的讨论文章</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/f23f72251abc\">git rebase 和 git merge 的区别</a></li>\n<li><a href=\"http://insights.thoughtworkers.org/gitflow-consider-harmful/\">Gitflow 有害论</a> 作者对 Gitflow 流程的使用过程中的吐槽，文章留言引起了强烈的讨论，可以关注下。</li>\n<li><a href=\"http://scottchacon.com/2011/08/31/github-flow.html\">GitHub Flow</a> scottchacon 讲述在 GitHub 工作中日常流程以及对每一点进行详细的介绍。</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/07/google-monolithic-source-repository.html\">谷歌的代码管理</a> 谷歌和 Facebook 都只有一个代码仓库，全公司的代码都放在这个库里，这里是阮一峰老师写的文章。</li>\n<li><a href=\"http://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext\">Why Google Stores Billions of Lines of Code in a Single Repository</a></li>\n</ul>\n<h2>博主使用的git客户端应用</h2>\n<p>单工程管理<code>GitKraken</code>;\n多工程管理<code>giteye</code>;\n附：文档管理 <code>zeal</code>（windows） 或者 <code>dash</code>（macos、IOS）</p>\n<p>最终还是建议读者去看一下git官方的书:<a href=\"https://git-scm.com/book/en/v2\">git-scm</a></p>\n","hasMore":true,"tags":["GIT","工作流指南","开发模式"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT工作流指南】【六】企业日常开发模式探索\ntags:\n  - GIT\n  - 工作流指南\n  - 开发模式\ncategories: 转载\ndate: 2018-09-12\nstatus: published\n\n---\n\n[xirong](https://github.com/xirong) 结合自己所在公司使用git的版本分支开发过程，进行了总结。\n\n<!-- more -->\n\n## 企业日常开发模式探索\n\n在看这部分前，请先回顾阅读业界认可的成功的 Git Branch Work Flow 模型 [A Successful Git Branching Model](http://nvie.com/posts/a-successful-git-branching-model/) ，了解日常开发中的场景，有助于熟悉下面的使用过程。\n\n在企业开发中，使用 Git 作为版本控制软件最看重的还是结合公司自己搭建的 [Gitlab](https://about.gitlab.com/)，将 Code Review 加入打包部署持续集成的流程中，这样，代码开发完成，提交测试前，便可以对开发人员提交的代码进行 Review，发现潜在的问题，及时指导，对于新人来讲，也能更快更好的学习。\n\n解决的需求场景如下：\n\n- 能支持日常迭代开发、紧急线上bug修复、多功能并行开发\n- 大概50人左右的团队，平日迭代项目较多，且周期短（1~2周一个迭代）\n- 能够通过tag重建整个系统\n- 支持code review\n- 所有上线的代码必须都是经过测试保证，且能自动同步到下一次的迭代中\n- 能和公司的项目管理/持续集成系统整合\n\n![图片](../DATA/branch_module.png)\n\n上图就是 xirong 团队在日常开发中总结出来的适合企业开发的模式，下面进行简单的介绍，方便大家学习了解。（本模式适合敏捷开发流程）\n\n1. 迭代需求会、冲刺会后确定本次迭代的目标后，将迭代内容视为一个项目，在 Gitlab 上创建一个 Repository，初始化工程代码结构，根据上线日期，比如20150730上线，开出分支 release20150730、dev20150730 两个分支，dev 分支作为日常开发主干分支，release 分支作为提测打包、Code Review 的分支。\n2. 迭代开始，日常开发进行中，开发人员在 dev 分支上进行 Commit、Push 代码，并且解决掉日常协同开发中的冲突等问题，等到达到提测条件的时候，提测者，首先 Merge Master 分支上的最新代码 `git merge --no-ff  origin/master` ，使得 Master 分支上的变更更新到迭代开发分支dev上面，之后，在 Gitlab 上面发起 `pull request` 请求，并指定 Code Review 人，请求的分支选择本次上线的 release 分支，即 release20150730。\n3. 被指定 Code Review 的人，对发起者的代码 Review 后，决定是否可以提交测试，若有问题，评论注释代码后，提交者对代码进行进行修改，重复步骤2，直到代码 Review 者认为 Ok。之后便可以借助自己公司的打包部署，对这些代码发布到测试环境验证。\n4. 步骤2-3重复多次后，就会达到一个稳定可发布的版本，即上线版本，上线后，将 release 版本上面最后的提交（图中0.2.4上线对应处）合并到 Master 分支上面，并打 Tag0.3。至此，一次完整的迭代开发完成。\n5. 若此次上线后，不久发现生产环境有 Bug 需要修复，则从 Tag 处新开分支 release_bugfix_20150731、dev_bugfix_20150731 ，开发人员从 dev_bugfix_20150731分支上进行开发，提测code review在 release_bugfix_20150731 分支上，具体步骤参考2-3，测试环境验证通过后，发布到线上，验证OK，合并到 Master 分支，并打 Tag0.2.3，此次 Bug 修复完毕，专为解 Bug 而生的这两个分支可以退伍了，删除release_bugfix_20150731、dev_bugfix_20150731两分支即可。（所有的历史 Commit 信息均已经提交到了 Master 分支上，不用担心丢失）\n\n这样经过上面的1-5步骤，企业日常迭代开发中的代码版本控制基本上就 Ok 了。\n\n## 更新 2016-11\n\n**Git 分支开发部署模型** 的一些使用原则如下:\n\n![](../DATA/2016-09-22-20-57-27.jpg)\n\n- master：master永远是线上代码，最稳定的分支，存放的是随时可供在生产环境中部署的代码，当开发活动告一段落，产生了一份新的可供部署的代码时，发布成功之后，代码才会由 aone2 提交到 master，master 分支上的代码会被更新。应用上 aone2 后禁掉所有人的 master的写权限\n- develop：保存当前最新开发成果的分支。通常这个分支上的代码也是可进行每日夜间发布的代码，只对开发负责人开放develop权限。\n- feature: 功能特性分支，每个功能特性一个 feature/ 分支，开发完成自测通过后合并入 develop 分支。可以从 master 或者develop 中拉出来。\n- hotfix: 紧急bug分支修复分支。修复上线后，可以直接合并入master。\n\n![](../DATA/2016-07-19-19-58-15.jpg)\n\nGit-Develop 分支模式是基于 Git 代码库设计的一种需要严格控制发布质量和发布节奏的开发模式。develop 作为固定的持续集成和发布分支，并且分支上的代码必须经过 CodeReview 后才可以提交到 Develop 分支。它的基本流程如下：\n- 每一个需求/变更都单独从Master上创建一条Branch分支；\n- 用户在这个Branch分支上进行Codeing活动；\n- 代码达到发布准入条件后aone上提交Codereview，Codereview通过后代码自动合并到Develop分支；\n- 待所有计划发布的变更分支代码都合并到Develop后，系统再 rebase master 代码到Develop 分支，然后自行构建，打包，部署等动作。\n- 应用发布成功后Aone会基于Develop分支的发布版本打一个“当前线上版本Tag”基线；\n- 应用发布成功后Aone会自动把Develop分支的发布版本合并回master；\n\n## 几篇业界的讨论文章\n\n- [git rebase 和 git merge 的区别](https://www.jianshu.com/p/f23f72251abc)\n- [Gitflow 有害论](http://insights.thoughtworkers.org/gitflow-consider-harmful/) 作者对 Gitflow 流程的使用过程中的吐槽，文章留言引起了强烈的讨论，可以关注下。\n- [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html) scottchacon 讲述在 GitHub 工作中日常流程以及对每一点进行详细的介绍。\n- [谷歌的代码管理](http://www.ruanyifeng.com/blog/2016/07/google-monolithic-source-repository.html) 谷歌和 Facebook 都只有一个代码仓库，全公司的代码都放在这个库里，这里是阮一峰老师写的文章。\n- [Why Google Stores Billions of Lines of Code in a Single Repository](http://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext)\n\n## 博主使用的git客户端应用\n\n单工程管理`GitKraken`;\n多工程管理`giteye`;\n附：文档管理 `zeal`（windows） 或者 `dash`（macos、IOS）\n\n最终还是建议读者去看一下git官方的书:[git-scm](https://git-scm.com/book/en/v2)\n"},{"title":"【GIT工作流指南】【五】Pull_Request","excerpt":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n","url":"/2018/09/11/转载/【GIT工作流指南】【五】Pull_Request","fromDate":"2018-09-11","category":"转载","text":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n<!-- more --> \n<p><code>Pull requests</code>是<code>Bitbucket</code>提供的让开发者更方便地进行协作的功能，提供了友好的<code>Web</code>界面可以在提议的修改合并到正式项目之前对修改进行讨论。（虽然是通过<code>Bitbucket</code>讲解的，但是可以推广到<code>github</code>、<code>gogs</code>等站点）</p>\n<p><img src=\"/attaches/18361A7EF89C5820D578C0C238C01D38.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>开发者向团队成员通知功能开发已经完成，<code>Pull Requests</code>是最简单的用法。开发者完成功能开发后，通过<code>Bitbucket</code>账号发起一个<code>Pull Request</code>。这样让涉及这个功能的所有人知道要去做<code>Code Review</code>和合并到<code>master</code>分支。</p>\n<p>但是，<code>Pull Request</code>远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。如果变更有任何问题，团队成员反馈在<code>Pull Request</code>中，甚至<code>push</code>新的提交微调功能。所有的这些活动都直接跟踪在<code>Pull Request</code>中。</p>\n<p><img src=\"/attaches/CA1871A23C2EA729EA2A4085A7EA3CE4.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>相比其它的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。\n<code>SVN</code>和<code>Git</code>都能通过一个简单的脚本收到通知邮件；但是，讨论变更时，开发者通常只能去回复邮件。这样做会变得杂乱，尤其还要涉及后面的几个提交时。<code>Pull Requests</code>把所有相关功能整合到一个和<code>Bitbucket</code>仓库界面集成的用户友好<code>Web</code>界面中。</p>\n<h2>解析<code>Pull Request</code></h2>\n<p>当要发起一个<code>Pull Request</code>，你所要做的就是请求（<code>Request</code>）另一个开发者（比如项目的维护者）来<code>pull</code>你仓库中一个分支到他的仓库中。这意味着你要提供4个信息以发起<code>Pull Request</code>：\n源仓库、源分支、目的仓库、目的分支。</p>\n<p><img src=\"/attaches/D967FDFD90461DC0BBAD961016464245.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>这几值多数<code>Bitbucket</code>都会设置上合适的缺省值。但取决你用的协作工作流，你的团队可能会要指定不同的值。上图显示了一个<code>Pull Request</code>请求合并一个功能分支到正式的<code>master</code>分支上，但可以有多种不同的<code>Pull Request</code>用法。</p>\n<h2>工作方式</h2>\n<p><code>Pull Request</code>可以和功能分支工作流、<code>Gitflow</code>工作流或<code>Forking</code>工作流一起使用。但一个<code>Pull Request</code>要求要么分支不同要么仓库不同，所以不能用于集中式工作流。在不同的工作流中使用<code>Pull Request</code>会有一些不同，但基本的过程是这样的：</p>\n<ol>\n<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>\n<li>开发者<code>push</code>分支修改到公开的<code>Bitbucket</code>仓库中。</li>\n<li>开发者通过<code>Bitbucket</code>发起一个<code>Pull Request</code>。</li>\n<li>团队的其它成员<code>review</code> <code>code</code>，讨论并修改。</li>\n<li>项目维护者合并功能到官方仓库中并关闭<code>Pull Request</code>。</li>\n</ol>\n<p>本文后面内容说明，<code>Pull Request</code>在不同协作工作流中如何应用。</p>\n<h2>在功能分支工作流中使用<code>Pull Request</code></h2>\n<p>功能分支工作流用一个共享的<code>Bitbucket</code>仓库来管理协作，开发者在专门的分支上开发功能。\n但不是立即合并到<code>master</code>分支上，而是在合并到主代码库之前开发者应该开一个<code>Pull Request</code>发起功能的讨论。</p>\n<p><img src=\"/attaches/DDC3A26C98D99DFAEE17D2CC691F0DBE.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>功能分支工作流只有一个公开的仓库，所以<code>Pull Request</code>的目的仓库和源仓库总是同一个。通常开发者会指定他的功能分支作为源分支，<code>master</code>分支作为目的分支。</p>\n<p>收到<code>Pull Request</code>后，项目维护者要决定如何做。如果功能没问题，就简单地合并到<code>master</code>分支，关闭<code>Pull Request</code>。但如果提交的变更有问题，他可以在<code>Pull Request</code>中反馈。之后新加的提交也会评论之后接着显示出来。</p>\n<p>在功能还没有完全开发完的时候，也可能发起一个<code>Pull Request</code>。比如开发者在实现某个需求时碰到了麻烦，他可以发一个包含正在进行中工作的<code>Pull Request</code>。其它的开发者可以在<code>Pull Request</code>提供建议，或者甚至直接添加提交来解决问题。</p>\n<h2>在<code>Gitflow</code>工作流中使用<code>Pull Request</code></h2>\n<p><code>Gitflow</code>工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。在<code>Gitflow</code>工作流中使用<code>Pull Request</code>让开发者在发布分支或是维护分支上工作时，可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。</p>\n<p><img src=\"/attaches/6AA37B8B7CDD2C6AABCDA7D0D06456BB.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p><code>Gitflow</code>工作流中<code>Pull Request</code>的使用过程和上一节中完全一致：当一个功能、发布或是热修复分支需要<code>Review</code>时，开发者简单发起一个<code>Pull Request</code>，团队的其它成员会通过<code>Bitbucket</code>收到通知。</p>\n<p>新功能一般合并到<code>develop</code>分支，而发布和热修复则要同时合并到<code>develop</code>分支和<code>master</code>分支上。<code>Pull Request</code>可能用做所有合并的正式管理。</p>\n<h2>在<code>Forking</code>工作流中使用<code>Pull Request</code></h2>\n<p>在<code>Forking</code>工作流中，开发者<code>push</code>完成的功能到他自己的仓库中，而不是共享仓库。然后，他发起一个<code>Pull Request</code>，让项目维护者知道他的功能已经可以<code>Review</code>了。</p>\n<p>在这个工作流，<code>Pull Request</code>的通知功能非常有用，因为项目维护者不可能知道其它开发者在他们自己的仓库添加了提交。</p>\n<p><img src=\"/attaches/D8533A6910CBECB1D9BABC278FE16BCB.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>由于各个开发有自己的公开仓库，<code>Pull Request</code>的源仓库和目标仓库不是同一个。源仓库是开发者的公开仓库，源分支是包含了修改的分支。如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是<code>master</code>分支。</p>\n<p><code>Pull Request</code>也可以用于正式项目之外的其它开发者之间的协作。比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个<code>Pull Request</code>，用团队成员的<code>Bitbucket</code>仓库作为目标，而不是正式项目的仓库。然后使用相同的功能分支作为源和目标分支。</p>\n<p><img src=\"/attaches/1C9477CBC31291037920997F6095D4CE.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>2个开发者之间可以在<code>Pull Request</code>中讨论和开发功能。完成开发后，他们可以发起另一个<code>Pull Request</code>，请求合并功能到正式的<code>master</code>分支。在<code>Forking</code>工作流中，这样的灵活性让<code>Pull Request</code>成为一个强有力的协作工具。</p>\n<h2>示例</h2>\n<p>下面的示例演示了<code>Pull Request</code>如何在在<code>Forking</code>工作流中使用。也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。</p>\n<p>在示例中，小红是个开发，小明是项目维护者。他们各自有一个公开的<code>Bitbucket</code>仓库，而小明的仓库包含了正式工程。</p>\n<h3>小红<code>fork</code>正式项目</h3>\n<p><img src=\"/attaches/822A9FA7E949C59C75006CB2C2BE864D.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>小红先要<code>fork</code>小明的<code>Bitbucket</code>仓库，开始项目的开发。她登陆<code>Bitbucket</code>，浏览到小明的仓库页面，点<code>Fork</code>按钮。</p>\n<p><img src=\"/attaches/D4A17569BD6A95903715D27F5A1D6455.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>然后为<code>fork</code>出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。</p>\n<h3>小红克隆她的<code>Bitbucket</code>仓库</h3>\n<p><img src=\"/attaches/C92E0E53F3CF46ADA85F6930030123FF.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>下一步，小红克隆自己刚才<code>fork</code>出来的<code>Bitbucket</code>仓库，以在本机上准备出工作拷贝。命令如下：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></tbody></table></figure>\n<p>请记住，<code>git clone</code>会自动创建<code>origin</code>远程别名，是指向小红<code>fork</code>出来的仓库。</p>\n<h3>小红开发新功能</h3>\n<p><img src=\"/attaches/CEE05262641433BA9C02BF7107DA01A3.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>在开始改代码前，小红要为新功能先新建一个新分支。她会用这个分支作为<code>Pull Request</code>的源分支。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b some-feature</span><br><span class=\"line\"># 编辑代码</span><br><span class=\"line\">git commit -a -m &quot;Add first draft of some feature&quot;</span><br></pre></td></tr></tbody></table></figure>\n<p>在新功能分支上，小红按需要添加提交。甚至如果小红觉得功能分支上的提交历史太乱了，她可以用交互式<code>rebase</code>来删除或压制提交。对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在<code>Pull Request</code>中做了什么内容。</p>\n<h3>小红<code>push</code>功能到她的<code>Bitbucket</code>仓库中</h3>\n<p><img src=\"/attaches/05BE8414D252AEF093F3B09E25289F24.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>小红完成了功能后，<code>push</code>功能到她自己的<code>Bitbucket</code>仓库中（不是正式仓库），用下面简单的命令：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin some-branch</span><br></pre></td></tr></tbody></table></figure>\n<p>这时她的变更可以让项目维护者看到了（或者任何想要看的协作者）。</p>\n<h3>小红发起<code>Pull Request</code></h3>\n<p><img src=\"/attaches/9A386A88AD463281919BDF36A97852FA.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p><code>Bitbucket</code>上有了她的功能分支后，小红可以用她的<code>Bitbucket</code>账号浏览到她的<code>fork</code>出来的仓库页面，点右上角的<code>Pull Request</code>按钮，发起一个<code>Pull Request</code>。弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。</p>\n<p>小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库，而目标分支是<code>master</code>分支。另外，小红需要提供<code>Pull Request</code>的标题和描述信息。如果需要小明以外的人审核批准代码，她可以把这些人填在Reviewers文本框中。</p>\n<p><img src=\"/attaches/E19F8AB1788765DA95AA2BA7DCBBDF19.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>创建好了<code>Pull Request</code>，通知会通过<code>Bitbucket</code>系统消息或邮件（可选）发给小明。</p>\n<h3>小明review <code>Pull Request</code></h3>\n<p><img src=\"/attaches/EDF2CAE01B1F307CF083C98318500DF4.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>在小明的<code>Bitbucket</code>仓库页面的<code>Pull Request</code>Tab可以看到所有人发起的<code>Pull Request</code>。点击小红的<code>Pull Request</code>会显示出<code>Pull Request</code>的描述、功能的提交历史和每个变更的差异（<code>diff</code>）。</p>\n<p>如果小明想要合并到项目中，只要点一下<code>Merge</code>按钮，就可以同意<code>Pull Request</code>并合并到<code>master</code>分支。</p>\n<p>但如果像这个示例中一样小明发现了在小红的代码中的一个小<code>Bug</code>，要小红在合并前修复。小明可以在整个<code>Pull Request</code>上加上评注，或是选择历史中的某个提交加上评注。</p>\n<p><img src=\"/attaches/DAA4F7CCCCC6ACC8A8707937DC527777.png\" alt=\"\" class=\"img-responsive\" /></p>\n<h3>小红补加提交</h3>\n<p>如果小红对反馈有任何疑问，可以在<code>Pull Request</code>中响应，把<code>Pull Request</code>当作是她功能讨论的论坛。</p>\n<p>小红在她的功能分支新加提交以解决代码问题，并<code>push</code>到她的<code>Bitbucket</code>仓库中，就像前一轮中的做法一样。这些提交会进入的<code>Pull Request</code>，小明在原来的评注旁边可以再次<code>review</code>变更。</p>\n<h3>小明接受<code>Pull Request</code></h3>\n<p>最终，小明接受变更，合并功能分支到<code>Master</code>分支，并关闭<code>Pull Request</code>。至此，功能集成到项目中，其它的项目开发者可以用标准的<code>git pull</code>命令<code>pull</code>这些变更到自己的本地仓库中。</p>\n<p>到了这里，你应该有了所有需要的工具来集成<code>Pull Request</code>到你自己的工作流。请记住，<code>Pull Request</code>并不是为了替代任何基于<code>Git</code>的协作工作流，而是它们的一个便利的补充，让团队成员间的协作更轻松方便。</p>\n","hasMore":true,"tags":["GIT","工作流指南","Pull_Request"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT工作流指南】【五】Pull_Request\ntags:\n  - GIT\n  - 工作流指南\n  - Pull_Request\ncategories: 转载\ndate: 2018-09-11\nstatus: published\n\n---\n\n`GIT工作流指南`，由 [xirong](https://github.com/xirong) 整理自 [oldratlee](https://github.com/oldratlee) 的`GitHub`，方便统一的学习回顾，在此感谢下面两位的贡献。\n\n1. 原文链接：[Git Workflows and Tutorials](https://www.atlassian.com/git/workflows)     \n2. 简体中文：由 [oldratlee](https://github.com/oldratlee) 翻译在 `GitHub` 上 [`Git`工作流指南](https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md)\n\n<!-- more --> \n\n`Pull requests`是`Bitbucket`提供的让开发者更方便地进行协作的功能，提供了友好的`Web`界面可以在提议的修改合并到正式项目之前对修改进行讨论。（虽然是通过`Bitbucket`讲解的，但是可以推广到`github`、`gogs`等站点）\n\n![](../DATA/pull-request-bitbucket.png)\n\n开发者向团队成员通知功能开发已经完成，`Pull Requests`是最简单的用法。开发者完成功能开发后，通过`Bitbucket`账号发起一个`Pull Request`。这样让涉及这个功能的所有人知道要去做`Code Review`和合并到`master`分支。\n\n但是，`Pull Request`远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。如果变更有任何问题，团队成员反馈在`Pull Request`中，甚至`push`新的提交微调功能。所有的这些活动都直接跟踪在`Pull Request`中。\n\n![](../DATA/pull-request-overview.png)\n\n相比其它的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。\n`SVN`和`Git`都能通过一个简单的脚本收到通知邮件；但是，讨论变更时，开发者通常只能去回复邮件。这样做会变得杂乱，尤其还要涉及后面的几个提交时。`Pull Requests`把所有相关功能整合到一个和`Bitbucket`仓库界面集成的用户友好`Web`界面中。\n\n## 解析`Pull Request`\n\n当要发起一个`Pull Request`，你所要做的就是请求（`Request`）另一个开发者（比如项目的维护者）来`pull`你仓库中一个分支到他的仓库中。这意味着你要提供4个信息以发起`Pull Request`：\n源仓库、源分支、目的仓库、目的分支。\n\n![](../DATA/pull-request-anatomy.png)\n\n这几值多数`Bitbucket`都会设置上合适的缺省值。但取决你用的协作工作流，你的团队可能会要指定不同的值。上图显示了一个`Pull Request`请求合并一个功能分支到正式的`master`分支上，但可以有多种不同的`Pull Request`用法。\n\n## 工作方式\n\n`Pull Request`可以和功能分支工作流、`Gitflow`工作流或`Forking`工作流一起使用。但一个`Pull Request`要求要么分支不同要么仓库不同，所以不能用于集中式工作流。在不同的工作流中使用`Pull Request`会有一些不同，但基本的过程是这样的：\n\n1. 开发者在本地仓库中新建一个专门的分支开发功能。\n2. 开发者`push`分支修改到公开的`Bitbucket`仓库中。\n3. 开发者通过`Bitbucket`发起一个`Pull Request`。\n4. 团队的其它成员`review` `code`，讨论并修改。\n5. 项目维护者合并功能到官方仓库中并关闭`Pull Request`。\n\n本文后面内容说明，`Pull Request`在不同协作工作流中如何应用。\n\n## 在功能分支工作流中使用`Pull Request`\n\n功能分支工作流用一个共享的`Bitbucket`仓库来管理协作，开发者在专门的分支上开发功能。\n但不是立即合并到`master`分支上，而是在合并到主代码库之前开发者应该开一个`Pull Request`发起功能的讨论。\n\n![](../DATA/pull-request-feature-branch.png)\n\n功能分支工作流只有一个公开的仓库，所以`Pull Request`的目的仓库和源仓库总是同一个。通常开发者会指定他的功能分支作为源分支，`master`分支作为目的分支。\n\n收到`Pull Request`后，项目维护者要决定如何做。如果功能没问题，就简单地合并到`master`分支，关闭`Pull Request`。但如果提交的变更有问题，他可以在`Pull Request`中反馈。之后新加的提交也会评论之后接着显示出来。\n\n在功能还没有完全开发完的时候，也可能发起一个`Pull Request`。比如开发者在实现某个需求时碰到了麻烦，他可以发一个包含正在进行中工作的`Pull Request`。其它的开发者可以在`Pull Request`提供建议，或者甚至直接添加提交来解决问题。\n\n## 在`Gitflow`工作流中使用`Pull Request`\n\n`Gitflow`工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。在`Gitflow`工作流中使用`Pull Request`让开发者在发布分支或是维护分支上工作时，可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。\n\n![](../DATA/gitflow-workflow-pull-request.png)\n\n`Gitflow`工作流中`Pull Request`的使用过程和上一节中完全一致：当一个功能、发布或是热修复分支需要`Review`时，开发者简单发起一个`Pull Request`，团队的其它成员会通过`Bitbucket`收到通知。\n\n新功能一般合并到`develop`分支，而发布和热修复则要同时合并到`develop`分支和`master`分支上。`Pull Request`可能用做所有合并的正式管理。\n\n## 在`Forking`工作流中使用`Pull Request`\n\n在`Forking`工作流中，开发者`push`完成的功能到他自己的仓库中，而不是共享仓库。然后，他发起一个`Pull Request`，让项目维护者知道他的功能已经可以`Review`了。\n\n在这个工作流，`Pull Request`的通知功能非常有用，因为项目维护者不可能知道其它开发者在他们自己的仓库添加了提交。\n\n![](../DATA/pull-request-forking-workflow-1.png)\n\n由于各个开发有自己的公开仓库，`Pull Request`的源仓库和目标仓库不是同一个。源仓库是开发者的公开仓库，源分支是包含了修改的分支。如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是`master`分支。\n\n`Pull Request`也可以用于正式项目之外的其它开发者之间的协作。比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个`Pull Request`，用团队成员的`Bitbucket`仓库作为目标，而不是正式项目的仓库。然后使用相同的功能分支作为源和目标分支。\n\n![](../DATA/pull-request-forking-workflow-2.png)\n\n2个开发者之间可以在`Pull Request`中讨论和开发功能。完成开发后，他们可以发起另一个`Pull Request`，请求合并功能到正式的`master`分支。在`Forking`工作流中，这样的灵活性让`Pull Request`成为一个强有力的协作工具。\n\n## 示例\n\n下面的示例演示了`Pull Request`如何在在`Forking`工作流中使用。也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。\n\n在示例中，小红是个开发，小明是项目维护者。他们各自有一个公开的`Bitbucket`仓库，而小明的仓库包含了正式工程。\n\n### 小红`fork`正式项目\n\n![](../DATA/pull-request-1.png)\n\n小红先要`fork`小明的`Bitbucket`仓库，开始项目的开发。她登陆`Bitbucket`，浏览到小明的仓库页面，点`Fork`按钮。\n\n![](../DATA/pull-request-2.png)\n\n然后为`fork`出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。\n\n### 小红克隆她的`Bitbucket`仓库\n\n![](../DATA/pull-request-3.png)\n\n下一步，小红克隆自己刚才`fork`出来的`Bitbucket`仓库，以在本机上准备出工作拷贝。命令如下：\n\n```bash\ngit clone https://user@bitbucket.org/user/repo.git\n```\n\n请记住，`git clone`会自动创建`origin`远程别名，是指向小红`fork`出来的仓库。\n\n### 小红开发新功能\n\n![](../DATA/pull-request-4.png)\n\n在开始改代码前，小红要为新功能先新建一个新分支。她会用这个分支作为`Pull Request`的源分支。\n\n```bash\ngit checkout -b some-feature\n# 编辑代码\ngit commit -a -m \"Add first draft of some feature\"\n```\n\n在新功能分支上，小红按需要添加提交。甚至如果小红觉得功能分支上的提交历史太乱了，她可以用交互式`rebase`来删除或压制提交。对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在`Pull Request`中做了什么内容。\n\n### 小红`push`功能到她的`Bitbucket`仓库中\n\n![](../DATA/pull-request-5.png)\n\n小红完成了功能后，`push`功能到她自己的`Bitbucket`仓库中（不是正式仓库），用下面简单的命令：\n\n```bash\ngit push origin some-branch\n```\n\n这时她的变更可以让项目维护者看到了（或者任何想要看的协作者）。\n\n### 小红发起`Pull Request`\n\n![](../DATA/example-6.png)\n\n`Bitbucket`上有了她的功能分支后，小红可以用她的`Bitbucket`账号浏览到她的`fork`出来的仓库页面，点右上角的`Pull Request`按钮，发起一个`Pull Request`。弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。\n\n小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库，而目标分支是`master`分支。另外，小红需要提供`Pull Request`的标题和描述信息。如果需要小明以外的人审核批准代码，她可以把这些人填在Reviewers文本框中。\n\n![](../DATA/pull-request-7.png)\n\n创建好了`Pull Request`，通知会通过`Bitbucket`系统消息或邮件（可选）发给小明。\n\n### 小明review `Pull Request`\n\n![](../DATA/pull-request-8.png)\n\n在小明的`Bitbucket`仓库页面的`Pull Request`Tab可以看到所有人发起的`Pull Request`。点击小红的`Pull Request`会显示出`Pull Request`的描述、功能的提交历史和每个变更的差异（`diff`）。\n\n如果小明想要合并到项目中，只要点一下`Merge`按钮，就可以同意`Pull Request`并合并到`master`分支。\n\n但如果像这个示例中一样小明发现了在小红的代码中的一个小`Bug`，要小红在合并前修复。小明可以在整个`Pull Request`上加上评注，或是选择历史中的某个提交加上评注。\n\n![](../DATA/pull-request-9.png)\n\n### 小红补加提交\n\n如果小红对反馈有任何疑问，可以在`Pull Request`中响应，把`Pull Request`当作是她功能讨论的论坛。\n\n小红在她的功能分支新加提交以解决代码问题，并`push`到她的`Bitbucket`仓库中，就像前一轮中的做法一样。这些提交会进入的`Pull Request`，小明在原来的评注旁边可以再次`review`变更。\n\n### 小明接受`Pull Request`\n\n最终，小明接受变更，合并功能分支到`Master`分支，并关闭`Pull Request`。至此，功能集成到项目中，其它的项目开发者可以用标准的`git pull`命令`pull`这些变更到自己的本地仓库中。\n\n到了这里，你应该有了所有需要的工具来集成`Pull Request`到你自己的工作流。请记住，`Pull Request`并不是为了替代任何基于`Git`的协作工作流，而是它们的一个便利的补充，让团队成员间的协作更轻松方便。\n"},{"title":"【GIT工作流指南】【四】Forking工作流","excerpt":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n","url":"/2018/09/10/转载/【GIT工作流指南】【四】Forking工作流","fromDate":"2018-09-10","category":"转载","text":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n<!-- more --> \n<p><code>Forking</code>工作流是分布式工作流，充分利用了<code>Git</code>在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（<code>developer</code>），并能接受不信任贡献者（<code>contributor</code>）的提交。</p>\n<p><code>Forking</code>工作流和前面讨论的几种工作流有根本的不同，这种工作流不是使用单个服务端仓库作为‘中央’代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个<code>Git</code>仓库而不是1个：一个本地私有的，另一个服务端公开的。</p>\n<p><img src=\"/attaches/7B32097A82A290054CC9D8441A5EF580.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p><code>Forking</code>工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能<code>push</code>代码到仅有的中央仓库中。开发者<code>push</code>到自己的服务端仓库，而只有项目维护者才能<code>push</code>到正式仓库。这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。</p>\n<p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。也让这个工作流成为开源项目的理想工作流。</p>\n<h2>工作方式</h2>\n<p>和其它的<code>Git</code>工作流一样，<code>Forking</code>工作流要先有一个公开的正式仓库存储在服务器上。但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是<code>fork</code>正式项目在服务器上创建一个拷贝。</p>\n<p>这个仓库拷贝作为他个人公开仓库，其它开发者不允许<code>push</code>到这个仓库，但可以<code>pull</code>到修改（后面我们很快就会看这点很重要）。在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行<code>git clone</code>命令克隆仓库到本地机器上，作为私有的开发环境。</p>\n<p>要提交本地修改时，<code>push</code>提交到自己公开仓库中，而不是正式仓库中。然后，给正式仓库发起一个<code>pull request</code>，让项目维护者知道有更新已经准备好可以集成了。对于贡献的代码，<code>pull request</code>也可以很方便地作为一个讨论的地方。</p>\n<p>为了集成功能到正式代码库，维护者<code>pull</code>贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，合并变更到自己本地的<code>master</code>分支，然后<code>push master</code>分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行<code>pull</code>操作与正式仓库同步自己本地仓库。</p>\n<h2>正式仓库</h2>\n<p>在<code>Forking</code>工作流中，‘官方’仓库的叫法只是一个约定，理解这点很重要。从技术上来看，各个开发者仓库和正式仓库在<code>Git</code>看来没有任何区别。事实上，让正式仓库之所以正式的唯一原因是它是项目维护者的公开仓库。</p>\n<h2><code>Forking</code>工作流的分支使用方式</h2>\n<p>所有的个人公开仓库实际上只是为了方便和其它的开发者共享分支。各个开发者应该用分支隔离各个功能，就像在功能分支工作流和<code>Gitflow</code>工作流一样。唯一的区别是这些分支被共享了。在<code>Forking</code>工作流中这些分支会被<code>pull</code>到另一个开发者的本地仓库中，而在功能分支工作流和<code>Gitflow</code>工作流中是直接被<code>push</code>到正式仓库中。</p>\n<h2>示例</h2>\n<h3>项目维护者初始化正式仓库</h3>\n<p><img src=\"/attaches/E96B9400B567EF4EEAE69A06D8B34DEA.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>和任何使用<code>Git</code>项目一样，第一步是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。\n通常这个仓库也会作为项目维护者的公开仓库。</p>\n<p>公开仓库应该是裸仓库，不管是不是正式代码库。所以项目维护者会运行像下面的命令来搭建正式仓库：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host</span><br><span class=\"line\">git init --bare /path/to/repo.git</span><br></pre></td></tr></tbody></table></figure>\n<p>如果有现存的代码库，维护者也要<code>push</code>到这个仓库中。</p>\n<h3>开发者<code>fork</code>正式仓库</h3>\n<p><img src=\"/attaches/F0760A3C63A1553A09D285D52185A972.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>其它所有的开发需要<code>fork</code>正式仓库。可以用<code>git clone</code>命令用<code>SSH</code>协议连通到服务器，拷贝仓库到服务器另一个位置，是的，<code>fork</code>操作基本上就只是一个服务端的克隆。</p>\n<p>这一步完成后，每个开发都在服务端有一个自己的仓库。和正式仓库一样，这些仓库应该是裸仓库。</p>\n<h3>开发者克隆自己<code>fork</code>出来的仓库</h3>\n<p><img src=\"/attaches/950A439223E739298F9C8634330B039D.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>下一步，各个开发者要克隆自己的公开仓库，用熟悉的<code>git clone</code>命令。</p>\n<p>使用下面命令克隆服务端自己的仓库：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://user@host/user/repo.git</span><br></pre></td></tr></tbody></table></figure>\n<p>相比前面介绍的工作流只用了一个<code>origin</code>远程别名指向中央仓库，<code>Forking</code>工作流需要2个远程别名，一个指向正式仓库，另一个指向开发者自己的服务端仓库。别名的名字可以任意命名，常见的约定是使用<code>origin</code>作为远程克隆的仓库的别名（这个别名会在运行<code>git clone</code>自动创建），<code>upstream</code>（上游）作为正式仓库的别名。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://host/maintainer/repo</span><br></pre></td></tr></tbody></table></figure>\n<p>需要自己用上面的命令创建<code>upstream</code>别名。这样可以简单地保持本地仓库和正式仓库的同步更新。\n注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://user@host/maintainer/repo.git</span><br></pre></td></tr></tbody></table></figure>\n<p>这时在克隆和<code>pull</code>正式仓库时，需要提供用户的密码。</p>\n<h3>开发者开发自己的功能</h3>\n<p><img src=\"/attaches/0D175CC7D91840AE6E9D09C2244540C1.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>在刚克隆的本地仓库中，开发者可以像其它工作流一样的编辑代码、提交修改和新建分支：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b some-feature</span><br><span class=\"line\"># Edit some code</span><br><span class=\"line\">git commit -a -m &quot;Add first draft of some feature&quot;</span><br></pre></td></tr></tbody></table></figure>\n<p>所有的修改都是私有的直到<code>push</code>到自己公开仓库中。如果正式项目已经往前走了，可以用<code>git pull</code>命令获得新的提交：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull upstream master</span><br></pre></td></tr></tbody></table></figure>\n<p>由于开发者应该都在专门的功能分支上工作，<code>pull</code>操作结果会都是快进合并。</p>\n<h3>开发者发布自己的功能</h3>\n<p><img src=\"/attaches/B9A6EBCF1915D22223E97EC9E827DEF0.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一旦开发者准备好了分享新功能，需要做二件事。首先，通过<code>push</code>他的贡献代码到自己的公开仓库中，让其它的开发者都可以访问到。他的<code>origin</code>远程别名应该已经有了，所以要做的就是：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin feature-branch</span><br></pre></td></tr></tbody></table></figure>\n<p>这里和之前的工作流的差异是，<code>origin</code>远程别名指向开发者自己的服务端仓库，而不是正式仓库。</p>\n<p>第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。一般你会想集成你的功能分支到上游远程仓库的<code>master</code>分支中。</p>\n<h3>项目维护者集成开发者的功能</h3>\n<p><img src=\"/attaches/0DA2C9184643CD0C6824C1DA4E001764.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>当项目维护者收到<code>pull request</code>，他要做的是决定是否集成它到正式代码库中。有二种方式来做：</p>\n<ol>\n<li>直接在<code>pull request</code>中查看代码</li>\n<li><code>pull</code>代码到他自己的本地仓库，再手动合并</li>\n</ol>\n<p>第一种做法更简单，维护者可以在<code>GUI</code>中查看变更的差异，做评注和执行合并。但如果出现了合并冲突，需要第二种做法来解决。这种情况下，维护者需要从开发者的服务端仓库中<code>fetch</code>功能分支，合并到他本地的<code>master</code>分支，解决冲突：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch https://bitbucket.org/user/repo feature-branch</span><br><span class=\"line\"># 查看变更</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge FETCH_HEAD</span><br></pre></td></tr></tbody></table></figure>\n<p>变更集成到本地的<code>master</code>分支后，维护者要<code>push</code>变更到服务器上的正式仓库，这样其它的开发者都能访问到：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></tbody></table></figure>\n<p>注意，维护者的<code>origin</code>是指向他自己公开仓库的，即是项目的正式代码库。到此，开发者的贡献完全集成到了项目中。</p>\n<h3>开发者和正式仓库做同步</h3>\n<p><img src=\"/attaches/2F75C841C8BEE0868F6C8A8396E9F6AC.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>由于正式代码库往前走了，其它的开发需要和正式仓库做同步：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull upstream master</span><br></pre></td></tr></tbody></table></figure>\n<p>如果你之前是使用<code>SVN</code>，<code>Forking</code>工作流可能看起来像是一个激进的范式切换（paradigm shift）。但不要害怕，这个工作流实际上就是在功能分支工作流之上引入另一个抽象层。不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。</p>\n<p>示例中解释了，一个贡献如何从一个开发者流到正式的<code>master</code>分支中，但同样的方法可以把贡献集成到任一个仓库中。比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。</p>\n<p>这使得<code>Forking</code>工作流对于松散组织的团队来说是个非常强大的工具。任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。</p>\n","hasMore":true,"tags":["GIT","工作流指南","Forking"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT工作流指南】【四】Forking工作流\ntags:\n  - GIT\n  - 工作流指南\n  - Forking\ncategories: 转载\ndate: 2018-09-10\nstatus: published\n\n---\n\n`GIT工作流指南`，由 [xirong](https://github.com/xirong) 整理自 [oldratlee](https://github.com/oldratlee) 的`GitHub`，方便统一的学习回顾，在此感谢下面两位的贡献。\n\n1. 原文链接：[Git Workflows and Tutorials](https://www.atlassian.com/git/workflows)     \n2. 简体中文：由 [oldratlee](https://github.com/oldratlee) 翻译在 `GitHub` 上 [`Git`工作流指南](https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md)\n\n<!-- more --> \n\n`Forking`工作流是分布式工作流，充分利用了`Git`在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（`developer`），并能接受不信任贡献者（`contributor`）的提交。\n\n`Forking`工作流和前面讨论的几种工作流有根本的不同，这种工作流不是使用单个服务端仓库作为‘中央’代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个`Git`仓库而不是1个：一个本地私有的，另一个服务端公开的。\n\n![](../DATA/git-workflows-forking.png)\n\n`Forking`工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能`push`代码到仅有的中央仓库中。开发者`push`到自己的服务端仓库，而只有项目维护者才能`push`到正式仓库。这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。\n\n效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。也让这个工作流成为开源项目的理想工作流。\n\n## 工作方式\n\n和其它的`Git`工作流一样，`Forking`工作流要先有一个公开的正式仓库存储在服务器上。但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是`fork`正式项目在服务器上创建一个拷贝。\n\n这个仓库拷贝作为他个人公开仓库，其它开发者不允许`push`到这个仓库，但可以`pull`到修改（后面我们很快就会看这点很重要）。在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行`git clone`命令克隆仓库到本地机器上，作为私有的开发环境。\n\n要提交本地修改时，`push`提交到自己公开仓库中，而不是正式仓库中。然后，给正式仓库发起一个`pull request`，让项目维护者知道有更新已经准备好可以集成了。对于贡献的代码，`pull request`也可以很方便地作为一个讨论的地方。\n\n为了集成功能到正式代码库，维护者`pull`贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，合并变更到自己本地的`master`分支，然后`push master`分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行`pull`操作与正式仓库同步自己本地仓库。\n\n## 正式仓库\n\n在`Forking`工作流中，‘官方’仓库的叫法只是一个约定，理解这点很重要。从技术上来看，各个开发者仓库和正式仓库在`Git`看来没有任何区别。事实上，让正式仓库之所以正式的唯一原因是它是项目维护者的公开仓库。\n\n## `Forking`工作流的分支使用方式\n\n所有的个人公开仓库实际上只是为了方便和其它的开发者共享分支。各个开发者应该用分支隔离各个功能，就像在功能分支工作流和`Gitflow`工作流一样。唯一的区别是这些分支被共享了。在`Forking`工作流中这些分支会被`pull`到另一个开发者的本地仓库中，而在功能分支工作流和`Gitflow`工作流中是直接被`push`到正式仓库中。\n\n## 示例\n\n### 项目维护者初始化正式仓库\n\n![](../DATA/git-workflows-forking-1.png)\n\n和任何使用`Git`项目一样，第一步是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。\n通常这个仓库也会作为项目维护者的公开仓库。\n\n公开仓库应该是裸仓库，不管是不是正式代码库。所以项目维护者会运行像下面的命令来搭建正式仓库：\n\n```bash\nssh user@host\ngit init --bare /path/to/repo.git\n```\n\n如果有现存的代码库，维护者也要`push`到这个仓库中。\n\n### 开发者`fork`正式仓库\n\n![](../DATA/git-workflows-forking-2.png)\n\n其它所有的开发需要`fork`正式仓库。可以用`git clone`命令用`SSH`协议连通到服务器，拷贝仓库到服务器另一个位置，是的，`fork`操作基本上就只是一个服务端的克隆。\n\n这一步完成后，每个开发都在服务端有一个自己的仓库。和正式仓库一样，这些仓库应该是裸仓库。\n\n### 开发者克隆自己`fork`出来的仓库\n\n![](../DATA/git-workflows-forking-3.png)\n\n下一步，各个开发者要克隆自己的公开仓库，用熟悉的`git clone`命令。\n\n使用下面命令克隆服务端自己的仓库：\n\n```bash\ngit clone https://user@host/user/repo.git\n```\n\n相比前面介绍的工作流只用了一个`origin`远程别名指向中央仓库，`Forking`工作流需要2个远程别名，一个指向正式仓库，另一个指向开发者自己的服务端仓库。别名的名字可以任意命名，常见的约定是使用`origin`作为远程克隆的仓库的别名（这个别名会在运行`git clone`自动创建），`upstream`（上游）作为正式仓库的别名。\n\n```bash\ngit remote add upstream https://host/maintainer/repo\n```\n\n需要自己用上面的命令创建`upstream`别名。这样可以简单地保持本地仓库和正式仓库的同步更新。\n注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：\n\n```bash\ngit remote add upstream https://user@host/maintainer/repo.git\n```\n\n这时在克隆和`pull`正式仓库时，需要提供用户的密码。\n\n### 开发者开发自己的功能\n\n![](../DATA/git-workflows-forking-4.png)\n\n在刚克隆的本地仓库中，开发者可以像其它工作流一样的编辑代码、提交修改和新建分支：\n\n```bash\ngit checkout -b some-feature\n# Edit some code\ngit commit -a -m \"Add first draft of some feature\"\n```\n\n所有的修改都是私有的直到`push`到自己公开仓库中。如果正式项目已经往前走了，可以用`git pull`命令获得新的提交：\n\n```bash\ngit pull upstream master\n```\n\n由于开发者应该都在专门的功能分支上工作，`pull`操作结果会都是快进合并。\n\n### 开发者发布自己的功能\n\n![](../DATA/git-workflows-forking-5.png)\n\n一旦开发者准备好了分享新功能，需要做二件事。首先，通过`push`他的贡献代码到自己的公开仓库中，让其它的开发者都可以访问到。他的`origin`远程别名应该已经有了，所以要做的就是：\n\n```bash\ngit push origin feature-branch\n```\n\n这里和之前的工作流的差异是，`origin`远程别名指向开发者自己的服务端仓库，而不是正式仓库。\n\n第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。一般你会想集成你的功能分支到上游远程仓库的`master`分支中。\n\n### 项目维护者集成开发者的功能\n\n![](../DATA/git-workflows-forking-6.png)\n\n当项目维护者收到`pull request`，他要做的是决定是否集成它到正式代码库中。有二种方式来做：\n\n1. 直接在`pull request`中查看代码\n1. `pull`代码到他自己的本地仓库，再手动合并\n\n第一种做法更简单，维护者可以在`GUI`中查看变更的差异，做评注和执行合并。但如果出现了合并冲突，需要第二种做法来解决。这种情况下，维护者需要从开发者的服务端仓库中`fetch`功能分支，合并到他本地的`master`分支，解决冲突：\n\n```bash\ngit fetch https://bitbucket.org/user/repo feature-branch\n# 查看变更\ngit checkout master\ngit merge FETCH_HEAD\n```\n\n变更集成到本地的`master`分支后，维护者要`push`变更到服务器上的正式仓库，这样其它的开发者都能访问到：\n\n```bash\ngit push origin master\n```\n\n注意，维护者的`origin`是指向他自己公开仓库的，即是项目的正式代码库。到此，开发者的贡献完全集成到了项目中。\n\n### 开发者和正式仓库做同步\n\n![](../DATA/git-workflows-forking-7.png)\n\n由于正式代码库往前走了，其它的开发需要和正式仓库做同步：\n\n```bash\ngit pull upstream master\n```\n\n如果你之前是使用`SVN`，`Forking`工作流可能看起来像是一个激进的范式切换（paradigm shift）。但不要害怕，这个工作流实际上就是在功能分支工作流之上引入另一个抽象层。不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。\n\n示例中解释了，一个贡献如何从一个开发者流到正式的`master`分支中，但同样的方法可以把贡献集成到任一个仓库中。比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。\n\n这使得`Forking`工作流对于松散组织的团队来说是个非常强大的工具。任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。\n"},{"title":"【GIT工作流指南】【三】Gitflow工作流","excerpt":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n","url":"/2018/09/09/转载/【GIT工作流指南】【三】Gitflow工作流","fromDate":"2018-09-09","category":"转载","text":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n<!-- more --> \n<p><code>Gitflow</code>工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p>\n<p><img src=\"/attaches/0906419DB3BC5149A079E67041A7120A.png\" alt=\"Git Workflows: Gitflow Cycle\" class=\"img-responsive\" /></p>\n<p>这节介绍的<a href=\"http://nvie.com/posts/a-successful-git-branching-model/\"><code>Gitflow</code>工作流</a>借鉴自在<a href=\"http://nvie.com/\">nvie</a>的<em>Vincent Driessen</em>。</p>\n<p><code>Gitflow</code>工作流定义了一个围绕项目发布的严格分支模型。虽然比<code>功能分支工作流</code>复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>\n<p><code>Gitflow</code>工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布时，也定义了各自的分支。当然你可以用上功能分支工作流所有的好处：<code>Pull Requests</code>、隔离实验性开发和更高效的协作。</p>\n<h2>工作方式</h2>\n<p><code>Gitflow</code>工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并<code>push</code>分支到要中央仓库中。</p>\n<h2>历史分支</h2>\n<p>相对于使用仅有的一个<code>master</code>分支，<code>Gitflow</code>工作流使用两个分支来记录项目的历史。<code>master</code>分支存储了正式发布的历史，而<code>develop</code>分支作为功能的集成分支。这样也方便<code>master</code>分支上的所有提交分配一个版本号。</p>\n<p><img src=\"/attaches/D1B3114448F5605ECD1D03CF298B732A.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>剩下要说明的问题围绕着这2个分支的区别展开。</p>\n<h2>功能分支</h2>\n<p>每个新功能位于一个自己的分支，这样可以<code>push</code>到中央仓库以备份和协作。但功能分支不是从<code>master</code>分支上拉出新分支，而是使用<code>develop</code>分支作为父分支。当新功能完成时，合并回<code>develop</code>分支。新功能提交应该从不直接与<code>master</code>分支交互。</p>\n<p><img src=\"/attaches/88037E557027627789C2025CCB54987B.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>注意，从各种含义和目的上来看，功能分支加上<code>develop</code>分支就是功能分支工作流的用法。但<code>Gitflow</code>工作流没有在这里止步。</p>\n<h2>发布分支</h2>\n<p><img src=\"/attaches/034FF0DF0E7D73DCB2A61CF3B7961D92.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一旦<code>develop</code>分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从<code>develop</code>分支上<code>checkout</code>一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上，这个分支只应该做<code>Bug</code>修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到<code>master</code>分支并分配一个版本号打好<code>Tag</code>。另外，这些从新建发布分支以来的做的修改要合并回<code>develop</code>分支。</p>\n<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，“这周我们要做准备发布版本4.0”，并且在仓库的目录结构中可以实际看到）。</p>\n<p>常用的分支约定：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用于新建发布分支的分支: develop</span><br><span class=\"line\">用于合并的分支: master</span><br><span class=\"line\">分支命名: release-* 或 release/*</span><br></pre></td></tr></tbody></table></figure>\n<h2>维护分支</h2>\n<p><img src=\"/attaches/06892B7069973EF10E5CF70A5E0C6508.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>维护分支或说是热修复（<code>hotfix</code>）分支用于给产品发布版本（<code>production releases</code>）快速生成补丁，这是唯一可以直接从<code>master</code>分支<code>fork</code>出来的分支。修复完成，修改应该马上合并回<code>master</code>分支和<code>develop</code>分支（当前的发布分支），<code>master</code>分支应该用新的版本号打好<code>Tag</code>。</p>\n<p>为<code>Bug</code>修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在<code>master</code>分支上处理的临时发布。</p>\n<h2>示例</h2>\n<p>下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。</p>\n<h3>创建开发分支</h3>\n<p><img src=\"/attaches/6461DA0EC1412F48E0ED0AD44FC96D44.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>第一步为<code>master</code>分支配套一个<code>develop</code>分支。简单来做可以本地创建一个空的<code>develop</code>分支，<code>push</code>到服务器上：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch develop</span><br><span class=\"line\">git push -u origin develop</span><br></pre></td></tr></tbody></table></figure>\n<p>以后这个分支将会包含了项目的全部历史，而<code>master</code>分支将只包含了部分历史。其它开发者这时应该克隆中央仓库，建好<code>develop</code>分支的跟踪分支：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://user@host/path/to/repo.git</span><br><span class=\"line\">git checkout -b develop origin/develop</span><br></pre></td></tr></tbody></table></figure>\n<p>现在每个开发都有了这些历史分支的本地拷贝。</p>\n<h3>小红和小明开始开发新功能</h3>\n<p><img src=\"/attaches/73D05B3FBC8D3E86BA9AEFF558E4C337.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于<code>master</code>分支，而是应该基于<code>develop</code>分支：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b some-feature develop</span><br></pre></td></tr></tbody></table></figure>\n<p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">git add &lt;some-file&gt;</span><br><span class=\"line\">git commit</span><br></pre></td></tr></tbody></table></figure>\n<h3>小红完成功能开发</h3>\n<p><img src=\"/attaches/DE863F09FE468857E5461C061B624D50.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>添加了提交后，小红觉得她的功能OK了。如果团队使用<code>Pull Requests</code>，这时候可以发起一个用于合并到<code>develop</code>分支或者她可以直接合并到她本地的<code>develop</code>分支后<code>push</code>到中央仓库：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin develop</span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge some-feature</span><br><span class=\"line\">git push</span><br><span class=\"line\">git branch -d some-feature</span><br></pre></td></tr></tbody></table></figure>\n<p>第一条命令在合并功能前确保<code>develop</code>分支是最新的。注意，功能决不应该直接合并到<code>master</code>分支。冲突解决方法和集中式工作流一样。</p>\n<h3>小红开始准备发布</h3>\n<p><img src=\"/attaches/6C6B9136634DBF3F1220977E73B0B99E.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b release-0.1 develop</span><br></pre></td></tr></tbody></table></figure>\n<p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p>\n<p>只要小红创建这个分支并<code>push</code>到中央仓库，这个发布就是功能冻结的。任何不在<code>develop</code>分支中的新功能都推到下个发布循环中。</p>\n<h3>小红完成发布</h3>\n<p><img src=\"/attaches/35C6BF52D07FBCCCADEF103904FD7468.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一旦准备好了对外发布，小红合并修改到<code>master</code>分支和<code>develop</code>分支上，删除发布分支。合并回<code>develop</code>分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。另外，如果小红的团队要求<code>Code Review</code>，这是一个发起<code>Pull Request</code>的理想时机。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge release-0.1</span><br><span class=\"line\">git push</span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge release-0.1</span><br><span class=\"line\">git push</span><br><span class=\"line\">git branch -d release-0.1</span><br></pre></td></tr></tbody></table></figure>\n<p>发布分支是作为功能开发（<code>develop</code>分支）和对外发布（<code>master</code>分支）间的缓冲。只要有合并到<code>master</code>分支，就应该打好<code>Tag</code>以方便跟踪。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a 0.1 -m &quot;Initial public release&quot; master</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></tbody></table></figure>\n<p><code>Git</code>有提供各种勾子（<code>hook</code>），即仓库有事件发生时触发执行的脚本。可以配置一个勾子，在你<code>push</code>中央仓库的<code>master</code>分支时，自动构建好版本，并对外发布。</p>\n<h3>最终用户发现<code>Bug</code></h3>\n<p><img src=\"/attaches/FC367B2F16E2E1AAEAA0AF16A346B456.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>对外版本发布后，小红小明一起开发下一版本的新功能，直到有最终用户开了一个<code>Ticket</code>抱怨当前版本的一个<code>Bug</code>。为了处理<code>Bug</code>，小红（或小明）从<code>master</code>分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回<code>master</code>分支：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b issue-#001 master</span><br><span class=\"line\"># Fix the bug</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge issue-#001</span><br><span class=\"line\">git push</span><br></pre></td></tr></tbody></table></figure>\n<p>就像发布分支，维护分支中新加这些重要修改需要包含到<code>develop</code>分支中，所以小红要执行一个合并操作。然后就可以安全地删除这个分支了：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge issue-#001</span><br><span class=\"line\">git push</span><br><span class=\"line\">git branch -d issue-#001</span><br></pre></td></tr></tbody></table></figure>\n<p>到了这里，但愿你对集中式工作流、功能分支工作流和<code>Gitflow</code>工作流已经有点感觉了。你应该也牢固的掌握了本地仓库的功能，<code>push</code>/<code>pull</code>模式和<code>Git</code>健壮的分支和合并模型。</p>\n<p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用<code>Git</code>不可违逆的条例。所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让<code>Git</code>为你所用。</p>\n","hasMore":true,"tags":["GIT","工作流指南","Gitflow"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT工作流指南】【三】Gitflow工作流\ntags:\n  - GIT\n  - 工作流指南\n  - Gitflow\ncategories: 转载\ndate: 2018-09-09\nstatus: published\n\n---\n\n`GIT工作流指南`，由 [xirong](https://github.com/xirong) 整理自 [oldratlee](https://github.com/oldratlee) 的`GitHub`，方便统一的学习回顾，在此感谢下面两位的贡献。\n\n1. 原文链接：[Git Workflows and Tutorials](https://www.atlassian.com/git/workflows)     \n2. 简体中文：由 [oldratlee](https://github.com/oldratlee) 翻译在 `GitHub` 上 [`Git`工作流指南](https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md)\n\n<!-- more --> \n\n`Gitflow`工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。\n\n![Git Workflows: Gitflow Cycle](../DATA/git-workflows-gitflow.png)\n\n这节介绍的[`Gitflow`工作流](http://nvie.com/posts/a-successful-git-branching-model/)借鉴自在[nvie](http://nvie.com/)的*Vincent Driessen*。\n\n`Gitflow`工作流定义了一个围绕项目发布的严格分支模型。虽然比`功能分支工作流`复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。\n\n`Gitflow`工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布时，也定义了各自的分支。当然你可以用上功能分支工作流所有的好处：`Pull Requests`、隔离实验性开发和更高效的协作。\n\n## 工作方式\n\n`Gitflow`工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并`push`分支到要中央仓库中。\n\n## 历史分支\n\n相对于使用仅有的一个`master`分支，`Gitflow`工作流使用两个分支来记录项目的历史。`master`分支存储了正式发布的历史，而`develop`分支作为功能的集成分支。这样也方便`master`分支上的所有提交分配一个版本号。\n\n![](../DATA/git-workflow-release-cycle-1historical.png)\n\n剩下要说明的问题围绕着这2个分支的区别展开。\n\n## 功能分支\n\n每个新功能位于一个自己的分支，这样可以`push`到中央仓库以备份和协作。但功能分支不是从`master`分支上拉出新分支，而是使用`develop`分支作为父分支。当新功能完成时，合并回`develop`分支。新功能提交应该从不直接与`master`分支交互。\n\n![](../DATA/git-workflow-release-cycle-2feature.png)\n\n注意，从各种含义和目的上来看，功能分支加上`develop`分支就是功能分支工作流的用法。但`Gitflow`工作流没有在这里止步。\n\n## 发布分支\n\n![](../DATA/git-workflow-release-cycle-3release.png)\n\n一旦`develop`分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从`develop`分支上`checkout`一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上，这个分支只应该做`Bug`修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到`master`分支并分配一个版本号打好`Tag`。另外，这些从新建发布分支以来的做的修改要合并回`develop`分支。\n\n使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，“这周我们要做准备发布版本4.0”，并且在仓库的目录结构中可以实际看到）。\n\n常用的分支约定：\n\n```\n用于新建发布分支的分支: develop\n用于合并的分支: master\n分支命名: release-* 或 release/*\n```\n\n## 维护分支\n\n![](../DATA/git-workflow-release-cycle-4maintenance.png)\n\n维护分支或说是热修复（`hotfix`）分支用于给产品发布版本（`production releases`）快速生成补丁，这是唯一可以直接从`master`分支`fork`出来的分支。修复完成，修改应该马上合并回`master`分支和`develop`分支（当前的发布分支），`master`分支应该用新的版本号打好`Tag`。\n\n为`Bug`修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在`master`分支上处理的临时发布。\n\n## 示例\n\n下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。\n\n### 创建开发分支\n\n![](../DATA/git-workflow-release-cycle-5createdev.png)\n\n第一步为`master`分支配套一个`develop`分支。简单来做可以本地创建一个空的`develop`分支，`push`到服务器上：\n\n```bash\ngit branch develop\ngit push -u origin develop\n```\n\n以后这个分支将会包含了项目的全部历史，而`master`分支将只包含了部分历史。其它开发者这时应该克隆中央仓库，建好`develop`分支的跟踪分支：\n\n```bash\ngit clone ssh://user@host/path/to/repo.git\ngit checkout -b develop origin/develop\n```\n\n现在每个开发都有了这些历史分支的本地拷贝。\n\n### 小红和小明开始开发新功能\n\n![](../DATA/git-workflow-release-cycle-6maryjohnbeginnew.png)\n\n这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于`master`分支，而是应该基于`develop`分支：\n\n```bash\ngit checkout -b some-feature develop\n```\n\n他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：\n\n```bash\ngit status\ngit add <some-file>\ngit commit\n```\n\n### 小红完成功能开发\n\n![](../DATA/git-workflow-release-cycle-7maryfinishes.png)\n\n添加了提交后，小红觉得她的功能OK了。如果团队使用`Pull Requests`，这时候可以发起一个用于合并到`develop`分支或者她可以直接合并到她本地的`develop`分支后`push`到中央仓库：\n\n```bash\ngit pull origin develop\ngit checkout develop\ngit merge some-feature\ngit push\ngit branch -d some-feature\n```\n\n第一条命令在合并功能前确保`develop`分支是最新的。注意，功能决不应该直接合并到`master`分支。冲突解决方法和集中式工作流一样。\n\n### 小红开始准备发布\n\n![](../DATA/git-workflow-release-cycle-8maryprepsrelease.png)\n\n这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：\n\n```bash\ngit checkout -b release-0.1 develop\n```\n\n这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。\n\n只要小红创建这个分支并`push`到中央仓库，这个发布就是功能冻结的。任何不在`develop`分支中的新功能都推到下个发布循环中。\n\n### 小红完成发布\n\n![](../DATA/git-workflow-release-cycle-9maryfinishes.png)\n\n一旦准备好了对外发布，小红合并修改到`master`分支和`develop`分支上，删除发布分支。合并回`develop`分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。另外，如果小红的团队要求`Code Review`，这是一个发起`Pull Request`的理想时机。\n\n```bash\ngit checkout master\ngit merge release-0.1\ngit push\ngit checkout develop\ngit merge release-0.1\ngit push\ngit branch -d release-0.1\n```\n\n发布分支是作为功能开发（`develop`分支）和对外发布（`master`分支）间的缓冲。只要有合并到`master`分支，就应该打好`Tag`以方便跟踪。\n\n```bash\ngit tag -a 0.1 -m \"Initial public release\" master\ngit push --tags\n```\n\n`Git`有提供各种勾子（`hook`），即仓库有事件发生时触发执行的脚本。可以配置一个勾子，在你`push`中央仓库的`master`分支时，自动构建好版本，并对外发布。\n\n### 最终用户发现`Bug`\n\n![](../DATA/git-workflow-gitflow-enduserbug.png)\n\n对外版本发布后，小红小明一起开发下一版本的新功能，直到有最终用户开了一个`Ticket`抱怨当前版本的一个`Bug`。为了处理`Bug`，小红（或小明）从`master`分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回`master`分支：\n\n```bash\ngit checkout -b issue-#001 master\n# Fix the bug\ngit checkout master\ngit merge issue-#001\ngit push\n```\n\n就像发布分支，维护分支中新加这些重要修改需要包含到`develop`分支中，所以小红要执行一个合并操作。然后就可以安全地删除这个分支了：\n\n```bash\ngit checkout develop\ngit merge issue-#001\ngit push\ngit branch -d issue-#001\n```\n\n到了这里，但愿你对集中式工作流、功能分支工作流和`Gitflow`工作流已经有点感觉了。你应该也牢固的掌握了本地仓库的功能，`push`/`pull`模式和`Git`健壮的分支和合并模型。\n\n记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用`Git`不可违逆的条例。所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让`Git`为你所用。\n"},{"title":"【SCRUM】‘敏捷’不敏捷！","excerpt":"<blockquote>\n<p><code>Scrum</code>能高效并创造性地交付尽可能高价值的产品。<code>Scrum</code>是轻量级的、易于理解的、难以精通的。</p>\n</blockquote>\n<p>基于“<code>Scrum</code>指南”，可以理解我们用它，就是为了高价值三个字，而现实却让人失望了。不仅仅让看重价值的人失望，还让制造价值的人失望。</p>\n","url":"/2018/09/09/管理/【SCRUM】‘敏捷’不敏捷！","fromDate":"2018-09-09","category":"管理","text":"<blockquote>\n<p><code>Scrum</code>能高效并创造性地交付尽可能高价值的产品。<code>Scrum</code>是轻量级的、易于理解的、难以精通的。</p>\n</blockquote>\n<p>基于“<code>Scrum</code>指南”，可以理解我们用它，就是为了高价值三个字，而现实却让人失望了。不仅仅让看重价值的人失望，还让制造价值的人失望。</p>\n<!-- more -->\n<p>事出有因，写这篇文章并不是简简单单的抨击<code>Scrum</code>，其实我一直都没有说这个理论架构本身有什么问题，仅仅是实践过程中所谓的敏捷变得让人有点难以忍受。<code>Scrum</code>标榜自己尽可能的交付高价值的产品，从字面意思理解，好像在告诉人们，这个框架会尽可能地让你的产品提高其自身价值。不知道我理解的有没有问题，但是产品的价值什么时候可以被一个框架左右了？而不是营销、创意、功能。<code>Scrum</code>框架所能做的不应该是简单的提高生产效率吗？或许生产力提高之后会影响产品的时间轴，从而让一些人抓住机会，让本应该属于产品的价值展示出来。但是这种提高价值的方式，我越来越觉得很像在淘宝买东西一样，买回来永远和卖家展示大相径庭。说到底宣传总会是把吸引眼球的东西先呈现出来，至于有没有欺骗成分，我觉得用户自己可以体会，这里就不多说了。如果说<code>Scrum</code>真的能提高生产率，也就罢了。我害怕的是这东西会像狂犬病一样，潜伏着...</p>\n<p><code>Scrum</code>指南里有一句（不管是老版本还是2017年版本的指南都会有这一句）:</p>\n<blockquote>\n<p><code>Scrum</code>是免费的，在本指南中提供。<code>Scrum</code>的角色、工件、事件和规则是不可改变的。虽然只实施部分<code>Scrum</code>是可能的，但这样就不是<code>Scrum</code>了。<code>Scrum</code>只以整体的形式存在，唯其如此才能作为其他技术、方法和实践的容器从而良好地运作。</p>\n</blockquote>\n<p>“它是免费的，但是你用的话还得有人教。所以你就交个万八千的给我们，我们给你发个初级认证，以后你就可以把这个当饭碗去骗...不不不...教别人了。你看这是我们的认证体系，四个级别...”，所以不管它好不好，别以为它是免费的。这不由得让我想起了“<a href=\"http://www.gov.cn/zwgk/2005-09/03/content_28808.htm\">禁止传销条例第二章第七条</a>”所规定的传销行为，不过也不用紧张，仅仅是最后一句牟取非法利益这还有点分歧。</p>\n<p>可能单纯的理解这句话的话，现在公司内执行的全都不是<code>Scrum</code>，甚至教练当初教的也不是<code>Scrum</code>。那我们在干什么呢？我还真的问过，有人说针对自己的公司适应调整...之后的话我也不记得了，按这样来说，这全都不是<code>Scrum</code>。那我还在这里说它干什么呢？所以我就单说说自己公司的<code>Scrum</code>吧。</p>\n<p>刚来公司的时候，我所在的部门其实并没有实行敏捷。整个开发管理的很松散，但是由于大家都是年轻人，心气很高，相处也很愉快。那时候每天日报，我的日报主要内容就是早上到公司准备的一个待办事项列表，简单明了。一天的任务开发完了，日报也就完成了。并不像传统的软件行业，没有项目经理，没有专职测试，设计师是共享的，产品经理是业余的。开发功能一般需要程序员设计，与每一个环节的人交流解决问题，并对开发结果负责。基本上是扁平的管理模式，从CEO到开发人员中间只有一个人。这种松散的管理模式对于‘大企业’来说当然不行，于是2017年年底的时候，公司准备在在我所在的部门推行敏捷。一开始我并没有很抵触，因为最早也接触过极限编程、持续集成之类的敏捷方法，但是<code>Scrum</code>这种，说实话真的是第一次接触，因为不懂，所以先虚心求教吧。</p>\n<p>一转眼已经到了现在（2018年第四个季度），怎么说呢，我的抵触情绪发生在看完‘Scrum指南’之后。那时候的思想还很简单，觉得这玩意就是个方法论，目的当然是指导增加效率了。但是我就没见过从诞生之日起，没有过改变一直被人信奉的理论，至少它得有个使用前提或者框框。还有就是刚开始公司内推敏捷课程的时候，我问过已经实行过一段时间的同事一些问题，但是都不了了之了。这种课程，不应该是介绍经验避免重蹈覆辙的么？可是那时候我听到的是比之前UPerform专业人员还幼稚的课堂，向上帝一样告诉人们该怎么活着，她们告诉我们该怎么样敏捷。</p>\n<p>我大概在两三个小组进行过敏捷，看见了这些人的状态。让我更加相信所谓的<code>Scrum</code>其实只是个骗局而已。</p>\n<p>第一个组，每天的站会就是一个形式而已，勤快点的程序员会在站会之前就了解其他人做了什么，不勤快的站会讲了什么大概都不太清楚。敏捷教练也不好意思去说什么，结果就是每天早上或者下午都会有15到20分钟的时间，大家一起‘旷工’。迭代会持续时间一定是要超出预期时间的，最重要的是大家还要为即将要做的事情估算一个无关痛痒的时间，‘反正都是这个迭代要做的事情’，甚至是‘反正都是要推到下个迭代才开始的事情’。分配任务的时候唠唠家常算是人之常情了，大家也不忌讳反正时间有的是呢。DemoDay，那应该就是程序员的末日了。因为没有测试，没有代码审查，基本上就是赶着时间开发完。到了神圣的DemoDay，Bug应该属于家常便饭了，说辞嘛，人无完人啦。回顾会的时候，有时候阐述了问题也说明了解决方式，然后就没有然后了，下个迭代继续走老路。</p>\n<p>说到底，第一个组也好，其他组也好。那时候都是在尝试进入这样一个流程。满怀期待的等着自己效率的增加。正由于形式太重了，忘记了产品开发的本质。需要集中解决的问题总是被人遗忘在角落里。那个时候气氛还好，并没有现在那么无聊，或许也是因为刚刚起步吧。</p>\n<p>第二个组，每天站会15分钟，同样需要阐述自己需要做的事情，同样大家象征性的说一下今天的事情，改变是需要有人协作的时候，会提出来并且讨论。这样也会导致原本十几分钟的会议，有时候要开到一个小时。迭代会时间就更长了，而且迭代周期从原来的两周压缩到了一周，每次DemoDay、回顾会、迭代会会连在一起开，整整一天就过去了。我读过相关内容，迭代会往往会与回顾会叉开一段时间。而这一组，为了追求效率就去掉了这个过程。</p>\n<p>公司部门对敏捷做出了自己的适应，反正按照解释，现在的<code>Scrum</code>已经不是当初那个<code>Scrum</code>了。而且<code>Scrum</code>中定义了的每个人的品质（承诺、勇气、专注、开放、敬重），我是一点也没看见。现在管理层还在问所有参与敏捷人，怎么提高你们的效率呢？我甚至觉得可笑。更可悲的是，作为人参与工作也好，家庭也好，最重要的提升自己的手段--交流，也变得很不符合潮流。人们每天不苟言笑，活得严肃，关于工作的交流多了，互相之间的关怀少了。</p>\n<p>我个人觉得，个人发展、认同感才是每个上班族更加关心的事情。而自从实行敏捷之后，这方面的关怀就变得杯水车薪了。每个人就只是工作而已，并不知道自己以后会怎么样，甚至工作内容都左右不了。更加荒诞的是，工作效率本来很高的人，每个迭代会比工作效率低的人多做数不清的工作，但是基本工资确实一样的。本来软件开发这个行业工作效率就难以衡量，工作以小组为单位，就更难衡量个人之间的差异了。</p>\n<p>结局是：产品隐藏结构越来越糟糕，因为程序员和产品没有架构能力，工作评估工作完成的不好，工作量不是太多就是太少，制度化内容并没有强制性，没有约束力。产品和程序员直接沟通障碍。产品有几个人同时更新时，导致部署的时候问题很多，没有充分利用网络，自动化技术，也没有人响应这些内容。本来就不完善的公司管理制度，在没有完善学习好的时候投身敏捷，注定是一场持久战。本来可以更好，却没有人关注更重要的点。工作效率真的提高了么，还是只是工作量增加了。</p>\n<p>敏捷就是一个半成品，一群优秀的人用敏捷的方式能提高效率，其实就是给旺盛的生产力加上束缚，让他规则有序。毕竟，能力和可控是反着来的。 而自我定位不准确的时候，就像现在，人性本就不堪一击，能力又不行，就直接导致整个垮掉。敏捷如果是一套理论，那就必然经历争执，逃避就是禁不住推敲；敏捷如果是一套规则，那就需要完整的去遵守，失败了不要推卸责任。90年代起家的<code>Scrum</code>，经历了10年在美国兴起，经历了20年才在中国兴起。有理由让我相信现在的中国软件开发管理市场就像是十年前的美国，没有规则，这才给了Scrum机会。</p>\n<p>我会持续关注，作为一个程序员，我需要的仅仅是一个待办事项列表。文中的引用是<code>UPerform</code>公众号对<code>Scrum指南</code>的直接引用。当我看了原文之后我甚至觉得他们只是用谷歌翻译了这篇文章而已，甚至都没有校对，就发到官方公众号上了，真是‘严谨’的治学态度。</p>\n<p>创始人 Ken Schwaber 本人说：</p>\n<blockquote>\n<p>Scrum is not a silver-bullet. It does not bring success. Intelligent, hard working people can use Scrum to overcome waterfall habits and build the best possible products, but the effort is great and those that succeed will be in the minority. I predicted five years ago that only 25% of all organizations that embraced Scrum would fully benefit, and I see now reason to change my projections.</p>\n</blockquote>\n<p>意思差不多就是：成功的人怎么样都能成功，失败的人总会失败。</p>\n<h2>引用</h2>\n<ul>\n<li><a href=\"https://productforums.google.com/forum/#!msg/websearch/Xdc7Cg_Nn_Y/SUeFRNTL_eQJ\">谷歌产品论坛 2012年9月5日</a></li>\n<li><a href=\"https://www.agileconnection.com/article/reason-scrum-so-often-fails-agile-teams\">敏捷小组使用Scrum经常失败的原因 2016年10月19日</a></li>\n<li><a href=\"https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/\">为什么‘敏捷’，特别是Scrum是可怕的 2015年9月6日</a></li>\n<li><a href=\"http://okigiveup.net/not-big-fan-of-scrum/\">为什么我不是Scrum的忠实粉丝 2016年7月11日</a></li>\n<li><a href=\"https://www.scrumdesk.com/10-scrummasters-failures/\">十大敏捷教练失败原因</a></li>\n<li><a href=\"https://dzone.com/articles/my-year-of-success-and-failure-using-scrum\">我的scrum成功与失败</a></li>\n<li><a href=\"http://www.controlchaos.com/\">控制混乱</a></li>\n<li><a href=\"https://hackerchick.com/scrum-framework-for-finding-failure/\">一个发现失败的框架</a></li>\n<li><a href=\"https://www.mendix.com/blog/5-reasons-why-agile-fails-and-how-to-fix-it/\">敏捷失败的五大原因并且怎么样修复它</a></li>\n<li><a href=\"https://jaxenter.com/ways-scrum-can-fail-113901.html\">scrum可能失败的方式</a></li>\n<li><a href=\"http://blog.scrumstudy.com/can-scrum-fail/\">Scrum会失败么</a></li>\n<li><a href=\"http://www.agileadvice.com/2016/07/29/agilemanagement/formula-building-successful-scrum-experience/\">构建成功的SCRUM体验的公式</a></li>\n<li><a href=\"https://www.barryovereem.com/how-to-succeed-with-zombie-scrum/\">如何成功使用Zombie-Scrum</a></li>\n<li><a href=\"https://www.construx.com/uploadedFiles/Construx/Construx_Content/Resources/Documents/10%20%20%20Keys%20to%20Successful%20Scrum%20Adoption.pdf\">Scrum成功的十大关键</a></li>\n<li><a href=\"https://www.scrumguides.org/scrum-guide.html\">scrum指南</a></li>\n<li><a href=\"https://www.boost.co.nz/blog/2018/04/successful-scrum-team-product-owner\">成功scrum团队的产品经理</a></li>\n<li><a href=\"https://www.implementingscrum.com/2015/04/21/11-tips-for-a-successful-scrum-implementation/\">成功实施Scrum的11个技巧</a></li>\n</ul>\n","hasMore":true,"tags":["SCRUM","敏捷"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【SCRUM】‘敏捷’不敏捷！\ntags:\n  - SCRUM\n  - 敏捷\ncategories: 管理\ndate: 2018-09-09\nstatus: published\n\n---\n\n>`Scrum`能高效并创造性地交付尽可能高价值的产品。`Scrum`是轻量级的、易于理解的、难以精通的。\n\n基于“`Scrum`指南”，可以理解我们用它，就是为了高价值三个字，而现实却让人失望了。不仅仅让看重价值的人失望，还让制造价值的人失望。\n\n<!-- more -->\n\n事出有因，写这篇文章并不是简简单单的抨击`Scrum`，其实我一直都没有说这个理论架构本身有什么问题，仅仅是实践过程中所谓的敏捷变得让人有点难以忍受。`Scrum`标榜自己尽可能的交付高价值的产品，从字面意思理解，好像在告诉人们，这个框架会尽可能地让你的产品提高其自身价值。不知道我理解的有没有问题，但是产品的价值什么时候可以被一个框架左右了？而不是营销、创意、功能。`Scrum`框架所能做的不应该是简单的提高生产效率吗？或许生产力提高之后会影响产品的时间轴，从而让一些人抓住机会，让本应该属于产品的价值展示出来。但是这种提高价值的方式，我越来越觉得很像在淘宝买东西一样，买回来永远和卖家展示大相径庭。说到底宣传总会是把吸引眼球的东西先呈现出来，至于有没有欺骗成分，我觉得用户自己可以体会，这里就不多说了。如果说`Scrum`真的能提高生产率，也就罢了。我害怕的是这东西会像狂犬病一样，潜伏着...\n\n`Scrum`指南里有一句（不管是老版本还是2017年版本的指南都会有这一句）:\n\n>`Scrum`是免费的，在本指南中提供。`Scrum`的角色、工件、事件和规则是不可改变的。虽然只实施部分`Scrum`是可能的，但这样就不是`Scrum`了。`Scrum`只以整体的形式存在，唯其如此才能作为其他技术、方法和实践的容器从而良好地运作。\n\n“它是免费的，但是你用的话还得有人教。所以你就交个万八千的给我们，我们给你发个初级认证，以后你就可以把这个当饭碗去骗...不不不...教别人了。你看这是我们的认证体系，四个级别...”，所以不管它好不好，别以为它是免费的。这不由得让我想起了“[禁止传销条例第二章第七条](http://www.gov.cn/zwgk/2005-09/03/content_28808.htm)”所规定的传销行为，不过也不用紧张，仅仅是最后一句牟取非法利益这还有点分歧。\n\n可能单纯的理解这句话的话，现在公司内执行的全都不是`Scrum`，甚至教练当初教的也不是`Scrum`。那我们在干什么呢？我还真的问过，有人说针对自己的公司适应调整...之后的话我也不记得了，按这样来说，这全都不是`Scrum`。那我还在这里说它干什么呢？所以我就单说说自己公司的`Scrum`吧。\n\n刚来公司的时候，我所在的部门其实并没有实行敏捷。整个开发管理的很松散，但是由于大家都是年轻人，心气很高，相处也很愉快。那时候每天日报，我的日报主要内容就是早上到公司准备的一个待办事项列表，简单明了。一天的任务开发完了，日报也就完成了。并不像传统的软件行业，没有项目经理，没有专职测试，设计师是共享的，产品经理是业余的。开发功能一般需要程序员设计，与每一个环节的人交流解决问题，并对开发结果负责。基本上是扁平的管理模式，从CEO到开发人员中间只有一个人。这种松散的管理模式对于‘大企业’来说当然不行，于是2017年年底的时候，公司准备在在我所在的部门推行敏捷。一开始我并没有很抵触，因为最早也接触过极限编程、持续集成之类的敏捷方法，但是`Scrum`这种，说实话真的是第一次接触，因为不懂，所以先虚心求教吧。\n\n一转眼已经到了现在（2018年第四个季度），怎么说呢，我的抵触情绪发生在看完‘Scrum指南’之后。那时候的思想还很简单，觉得这玩意就是个方法论，目的当然是指导增加效率了。但是我就没见过从诞生之日起，没有过改变一直被人信奉的理论，至少它得有个使用前提或者框框。还有就是刚开始公司内推敏捷课程的时候，我问过已经实行过一段时间的同事一些问题，但是都不了了之了。这种课程，不应该是介绍经验避免重蹈覆辙的么？可是那时候我听到的是比之前UPerform专业人员还幼稚的课堂，向上帝一样告诉人们该怎么活着，她们告诉我们该怎么样敏捷。\n\n我大概在两三个小组进行过敏捷，看见了这些人的状态。让我更加相信所谓的`Scrum`其实只是个骗局而已。\n\n第一个组，每天的站会就是一个形式而已，勤快点的程序员会在站会之前就了解其他人做了什么，不勤快的站会讲了什么大概都不太清楚。敏捷教练也不好意思去说什么，结果就是每天早上或者下午都会有15到20分钟的时间，大家一起‘旷工’。迭代会持续时间一定是要超出预期时间的，最重要的是大家还要为即将要做的事情估算一个无关痛痒的时间，‘反正都是这个迭代要做的事情’，甚至是‘反正都是要推到下个迭代才开始的事情’。分配任务的时候唠唠家常算是人之常情了，大家也不忌讳反正时间有的是呢。DemoDay，那应该就是程序员的末日了。因为没有测试，没有代码审查，基本上就是赶着时间开发完。到了神圣的DemoDay，Bug应该属于家常便饭了，说辞嘛，人无完人啦。回顾会的时候，有时候阐述了问题也说明了解决方式，然后就没有然后了，下个迭代继续走老路。\n\n说到底，第一个组也好，其他组也好。那时候都是在尝试进入这样一个流程。满怀期待的等着自己效率的增加。正由于形式太重了，忘记了产品开发的本质。需要集中解决的问题总是被人遗忘在角落里。那个时候气氛还好，并没有现在那么无聊，或许也是因为刚刚起步吧。\n\n第二个组，每天站会15分钟，同样需要阐述自己需要做的事情，同样大家象征性的说一下今天的事情，改变是需要有人协作的时候，会提出来并且讨论。这样也会导致原本十几分钟的会议，有时候要开到一个小时。迭代会时间就更长了，而且迭代周期从原来的两周压缩到了一周，每次DemoDay、回顾会、迭代会会连在一起开，整整一天就过去了。我读过相关内容，迭代会往往会与回顾会叉开一段时间。而这一组，为了追求效率就去掉了这个过程。\n\n公司部门对敏捷做出了自己的适应，反正按照解释，现在的`Scrum`已经不是当初那个`Scrum`了。而且`Scrum`中定义了的每个人的品质（承诺、勇气、专注、开放、敬重），我是一点也没看见。现在管理层还在问所有参与敏捷人，怎么提高你们的效率呢？我甚至觉得可笑。更可悲的是，作为人参与工作也好，家庭也好，最重要的提升自己的手段--交流，也变得很不符合潮流。人们每天不苟言笑，活得严肃，关于工作的交流多了，互相之间的关怀少了。\n\n我个人觉得，个人发展、认同感才是每个上班族更加关心的事情。而自从实行敏捷之后，这方面的关怀就变得杯水车薪了。每个人就只是工作而已，并不知道自己以后会怎么样，甚至工作内容都左右不了。更加荒诞的是，工作效率本来很高的人，每个迭代会比工作效率低的人多做数不清的工作，但是基本工资确实一样的。本来软件开发这个行业工作效率就难以衡量，工作以小组为单位，就更难衡量个人之间的差异了。\n\n结局是：产品隐藏结构越来越糟糕，因为程序员和产品没有架构能力，工作评估工作完成的不好，工作量不是太多就是太少，制度化内容并没有强制性，没有约束力。产品和程序员直接沟通障碍。产品有几个人同时更新时，导致部署的时候问题很多，没有充分利用网络，自动化技术，也没有人响应这些内容。本来就不完善的公司管理制度，在没有完善学习好的时候投身敏捷，注定是一场持久战。本来可以更好，却没有人关注更重要的点。工作效率真的提高了么，还是只是工作量增加了。\n\n敏捷就是一个半成品，一群优秀的人用敏捷的方式能提高效率，其实就是给旺盛的生产力加上束缚，让他规则有序。毕竟，能力和可控是反着来的。 而自我定位不准确的时候，就像现在，人性本就不堪一击，能力又不行，就直接导致整个垮掉。敏捷如果是一套理论，那就必然经历争执，逃避就是禁不住推敲；敏捷如果是一套规则，那就需要完整的去遵守，失败了不要推卸责任。90年代起家的`Scrum`，经历了10年在美国兴起，经历了20年才在中国兴起。有理由让我相信现在的中国软件开发管理市场就像是十年前的美国，没有规则，这才给了Scrum机会。\n\n我会持续关注，作为一个程序员，我需要的仅仅是一个待办事项列表。文中的引用是`UPerform`公众号对`Scrum指南`的直接引用。当我看了原文之后我甚至觉得他们只是用谷歌翻译了这篇文章而已，甚至都没有校对，就发到官方公众号上了，真是‘严谨’的治学态度。\n \n创始人 Ken Schwaber 本人说：\n\n> Scrum is not a silver-bullet. It does not bring success. Intelligent, hard working people can use Scrum to overcome waterfall habits and build the best possible products, but the effort is great and those that succeed will be in the minority. I predicted five years ago that only 25% of all organizations that embraced Scrum would fully benefit, and I see now reason to change my projections. \n\n意思差不多就是：成功的人怎么样都能成功，失败的人总会失败。\n\n## 引用\n\n* [谷歌产品论坛 2012年9月5日](https://productforums.google.com/forum/#!msg/websearch/Xdc7Cg_Nn_Y/SUeFRNTL_eQJ)\n* [敏捷小组使用Scrum经常失败的原因 2016年10月19日](https://www.agileconnection.com/article/reason-scrum-so-often-fails-agile-teams)\n* [为什么‘敏捷’，特别是Scrum是可怕的 2015年9月6日](https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/)\n* [为什么我不是Scrum的忠实粉丝 2016年7月11日](http://okigiveup.net/not-big-fan-of-scrum/)\n* [十大敏捷教练失败原因](https://www.scrumdesk.com/10-scrummasters-failures/)\n* [我的scrum成功与失败](https://dzone.com/articles/my-year-of-success-and-failure-using-scrum)\n* [控制混乱](http://www.controlchaos.com/)\n* [一个发现失败的框架](https://hackerchick.com/scrum-framework-for-finding-failure/)\n* [敏捷失败的五大原因并且怎么样修复它](https://www.mendix.com/blog/5-reasons-why-agile-fails-and-how-to-fix-it/)\n* [scrum可能失败的方式](https://jaxenter.com/ways-scrum-can-fail-113901.html)\n* [Scrum会失败么](http://blog.scrumstudy.com/can-scrum-fail/)\n* [构建成功的SCRUM体验的公式](http://www.agileadvice.com/2016/07/29/agilemanagement/formula-building-successful-scrum-experience/)\n* [如何成功使用Zombie-Scrum](https://www.barryovereem.com/how-to-succeed-with-zombie-scrum/)\n* [Scrum成功的十大关键](https://www.construx.com/uploadedFiles/Construx/Construx_Content/Resources/Documents/10%20%20%20Keys%20to%20Successful%20Scrum%20Adoption.pdf)\n* [scrum指南](https://www.scrumguides.org/scrum-guide.html)\n* [成功scrum团队的产品经理](https://www.boost.co.nz/blog/2018/04/successful-scrum-team-product-owner)\n* [成功实施Scrum的11个技巧](https://www.implementingscrum.com/2015/04/21/11-tips-for-a-successful-scrum-implementation/)\n"},{"title":"【GIT工作流指南】【二】功能分支工作流","excerpt":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n","url":"/2018/09/08/转载/【GIT工作流指南】【二】功能分支工作流","fromDate":"2018-09-08","category":"转载","text":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n<!-- more --> \n<p>功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。这样可以在把新功能集成到正式项目前，用<code>Pull Requests</code>的方式讨论变更。</p>\n<p><img src=\"/attaches/9346182B21E992D4E1EDD7A5AA66A839.png\" alt=\"Git Workflows: Feature Branch\" class=\"img-responsive\" /></p>\n<p><img src=\"/attaches/AC31BA7BB076B4AE45C844B9ABA424F9.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一旦你玩转了<code>集中式工作流</code>，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。</p>\n<p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在<code>master</code>分支上。\n这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。\n另外，也保证了<code>master</code>分支的代码一定不会是有问题的，极大有利于集成环境。</p>\n<p>功能开发隔离也让 <code>pull requests</code>工作流 成功可能，\n<code>pull requests</code>工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。\n另外，如果你在功能开发中有问题卡住了，可以开一个<code>pull requests</code>来向同学们征求建议。\n这些做法的重点就是，<code>pull requests</code>让团队成员之间互相评论工作变成非常方便！</p>\n<h2>工作方式</h2>\n<p>功能分支工作流仍然用中央仓库，并且<code>master</code>分支还是代表了正式项目的历史。\n但不是直接提交本地历史到各自的本地<code>master</code>分支，开发者每次在开始新功能前先创建一个新分支。\n功能分支应该有个有描述性的名字，比如<code>animated-menu-items</code>或<code>issue-#1061</code>，这样可以让分支有个清楚且高聚焦的用途。</p>\n<p>对于<code>master</code>分支和功能分支，<code>Git</code>是没有技术上的区别，所以开发者可以用和集中式工作流中完全一样的方式编辑、暂存和提交修改到功能分支上。</p>\n<p>另外，功能分支也可以（且应该）<code>push</code>到中央仓库中。这样不修改正式代码就可以和其它开发者分享提交的功能。\n由于<code>master</code>是仅有的一个‘特殊’分支，在中央仓库上存多个功能分支不会有任何问题。当然，这样做也可以很方便地备份各自的本地提交。</p>\n<h2><code>Pull Requests</code></h2>\n<p>功能分支除了可以隔离功能的开发，也使得通过<code>Pull Requests</code>讨论变更成为可能。\n一旦某个开发者完成一个功能，不是立即合并到<code>master</code>，而是<code>push</code>到中央仓库的功能分支上并发起一个<code>Pull Request</code>请求，将修改合并到<code>master</code>。\n在修改成为主干代码前，这让其它的开发者有机会先去<code>Review</code>变更。</p>\n<p><code>Code Review</code>是<code>Pull Requests</code>的一个重要的收益，而<code>Pull Requests</code>则是讨论代码的一个通用方式。\n你可以把<code>Pull Requests</code>作为专门给某个分支的讨论。这意味着可以在更早的开发过程中就可以进行<code>Code Review</code>。\n比如，一个开发者开发功能需要帮助时，要做的就是发起一个<code>Pull Request</code>，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。</p>\n<p>一旦<code>Pull Request</code>被接受了，发布功能要做的就和集中式工作流就很像了。\n首先，确定本地的<code>master</code>分支和上游的<code>master</code>分支是同步的。然后合并功能分支到本地<code>master</code>分支并<code>push</code>已经更新的本地<code>master</code>分支到中央仓库。</p>\n<h2>示例</h2>\n<p>下面的示例演示了如何把<code>Pull Requests</code>作为<code>Code Review</code>的方式，但注意<code>Pull Requests</code>可以用于很多其它的目的。</p>\n<h3>小红开始开发一个新功能</h3>\n<p><img src=\"/attaches/9C73EAF62D324BCCC161466E8A28055A.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>在开始开发功能前，小红需要一个独立的分支。使用下面的命令新建一个分支：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b marys-feature master</span><br></pre></td></tr></tbody></table></figure>\n<p>这个命令检出一个基于<code>master</code>名为<code>marys-feature</code>的分支，<code>Git</code>的<code>-b</code>选项表示如果分支还不存在则新建分支。\n这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">git add &lt;some-file&gt;</span><br><span class=\"line\">git commit</span><br></pre></td></tr></tbody></table></figure>\n<h3>小红要去吃个午饭</h3>\n<p><img src=\"/attaches/9480CEA6DC2174598FEED8AB261CB887.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>早上小红为新功能添加一些提交。\n去吃午饭前，<code>push</code>功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其它开发协作，也让他们可以看到小红的提交。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin marys-feature</span><br></pre></td></tr></tbody></table></figure>\n<p>这条命令<code>push</code> <code>marys-feature</code>分支到中央仓库（<code>origin</code>），<code>-u</code>选项设置本地分支去跟踪远程对应的分支。\n设置好跟踪的分支后，小红就可以使用<code>git push</code>命令省去指定推送分支的参数。</p>\n<h3>小红完成功能开发</h3>\n<p><img src=\"/attaches/860469FEBFFD1DC27E641A895C0F0D76.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>小红吃完午饭回来，完成整个功能的开发。在合并到<code>master</code>之前，她发起一个<code>Pull Request</code>让团队的其它人知道功能已经完成。但首先，她要确认中央仓库中已经有她最近的提交：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></tbody></table></figure>\n<p>然后，在她的<code>Git</code> <code>GUI</code>客户端中发起<code>Pull Request</code>，请求合并<code>marys-feature</code>到<code>master</code>，团队成员会自动收到通知。<code>Pull Request</code>很酷的是可以在相关的提交旁边显示评注，所以你可以对某个变更集提问。</p>\n<h3>小黑收到<code>Pull Request</code></h3>\n<p><img src=\"/attaches/F7B21BB9A2354E99A4A7AEDC781B1F1A.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>小黑收到了<code>Pull Request</code>后会查看<code>marys-feature</code>的修改。决定在合并到正式项目前是否要做些修改，且通过<code>Pull Request</code>和小红来回地讨论。</p>\n<h3>小红再做修改</h3>\n<p><img src=\"/attaches/F76095E041456F0DF98554F58376C138.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>要再做修改，小红用和功能第一个迭代完全一样的过程。编辑、暂存、提交并<code>push</code>更新到中央仓库。小红这些活动都会显示在<code>Pull Request</code>上，小黑可以断续做评注。</p>\n<p>如果小黑有需要，也可以把<code>marys-feature</code>分支拉到本地，自己来修改，他加的提交也会一样显示在<code>Pull Request</code>上。</p>\n<h3>小红发布她的功能</h3>\n<p><img src=\"/attaches/6236AD909133E4383DB6144E5FD3B05C.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一旦小黑可以的接受<code>Pull Request</code>，就可以合并功能到稳定项目代码中（可以由小黑或是小红来做这个操作）：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git pull</span><br><span class=\"line\">git pull origin marys-feature</span><br><span class=\"line\">git push</span><br></pre></td></tr></tbody></table></figure>\n<p>无论谁来做合并，首先要检出<code>master</code>分支并确认是它是最新的。然后执行<code>git pull origin marys-feature</code>合并<code>marys-feature</code>分支到和已经和远程一致的本地<code>master</code>分支。你可以使用简单<code>git merge marys-feature</code>命令，但前面的命令可以保证总是最新的新功能分支。最后更新的<code>master</code>分支要重新<code>push</code>回到<code>origin</code>。</p>\n<p>这个过程常常会生成一个合并提交。有些开发者喜欢有合并提交，因为它像一个新功能和原来代码基线的连通符。但如果你偏爱线性的提交历史，可以在执行合并时<code>rebase</code>新功能到<code>master</code>分支的顶部，这样生成一个快进（<code>fast-forward</code>）的合并。</p>\n<p>一些<code>GUI</code>客户端可以只要点一下<code>接受</code>按钮执行好上面的命令来自动化<code>Pull Request</code>接受过程。\n如果你的不能这样，至少在功能合并到<code>master</code>分支后能自动关闭<code>Pull Request</code>。</p>\n<h3>与此同时，小明在做和小红一样的事</h3>\n<p>当小红和小黑在<code>marys-feature</code>上工作并讨论她的<code>Pull Request</code>的时候，小明在自己的功能分支上做完全一样的事。</p>\n<p>通过隔离功能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。</p>\n<p>到了这里，但愿你发现了功能分支可以很直接地在 <code>集中式工作流</code> 的仅有的<code>master</code>分支上完成多功能的开发。\n另外，功能分支还使用了<code>Pull Request</code>，使得可以在你的版本控制<code>GUI</code>客户端中讨论某个提交。</p>\n<p>功能分支工作流是开发项目异常灵活的方式。问题是，有时候太灵活了。对于大型团队，常常需要给不同分支分配一个更具体的角色。\n<code>Gitflow</code>工作流是管理功能开发、发布准备和维护的常用模式。</p>\n","hasMore":true,"tags":["GIT","工作流指南","功能分支"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT工作流指南】【二】功能分支工作流\ntags:\n  - GIT\n  - 工作流指南\n  - 功能分支\ncategories: 转载\ndate: 2018-09-08\nstatus: published\n\n---\n\n`GIT工作流指南`，由 [xirong](https://github.com/xirong) 整理自 [oldratlee](https://github.com/oldratlee) 的`GitHub`，方便统一的学习回顾，在此感谢下面两位的贡献。\n\n1. 原文链接：[Git Workflows and Tutorials](https://www.atlassian.com/git/workflows)     \n2. 简体中文：由 [oldratlee](https://github.com/oldratlee) 翻译在 `GitHub` 上 [`Git`工作流指南](https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md)\n\n<!-- more --> \n\n功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。这样可以在把新功能集成到正式项目前，用`Pull Requests`的方式讨论变更。\n\n![Git Workflows: Feature Branch](../DATA/git-workflow-feature_branch.png)\n\n![](../DATA/git-workflow-feature-branch-1.png)\n\n一旦你玩转了`集中式工作流`，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。\n\n功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在`master`分支上。\n这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。\n另外，也保证了`master`分支的代码一定不会是有问题的，极大有利于集成环境。\n\n功能开发隔离也让 `pull requests`工作流 成功可能，\n`pull requests`工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。\n另外，如果你在功能开发中有问题卡住了，可以开一个`pull requests`来向同学们征求建议。\n这些做法的重点就是，`pull requests`让团队成员之间互相评论工作变成非常方便！\n\n## 工作方式\n\n功能分支工作流仍然用中央仓库，并且`master`分支还是代表了正式项目的历史。\n但不是直接提交本地历史到各自的本地`master`分支，开发者每次在开始新功能前先创建一个新分支。\n功能分支应该有个有描述性的名字，比如`animated-menu-items`或`issue-#1061`，这样可以让分支有个清楚且高聚焦的用途。\n\n对于`master`分支和功能分支，`Git`是没有技术上的区别，所以开发者可以用和集中式工作流中完全一样的方式编辑、暂存和提交修改到功能分支上。\n\n另外，功能分支也可以（且应该）`push`到中央仓库中。这样不修改正式代码就可以和其它开发者分享提交的功能。\n由于`master`是仅有的一个‘特殊’分支，在中央仓库上存多个功能分支不会有任何问题。当然，这样做也可以很方便地备份各自的本地提交。\n\n## `Pull Requests`\n\n功能分支除了可以隔离功能的开发，也使得通过`Pull Requests`讨论变更成为可能。\n一旦某个开发者完成一个功能，不是立即合并到`master`，而是`push`到中央仓库的功能分支上并发起一个`Pull Request`请求，将修改合并到`master`。\n在修改成为主干代码前，这让其它的开发者有机会先去`Review`变更。\n\n`Code Review`是`Pull Requests`的一个重要的收益，而`Pull Requests`则是讨论代码的一个通用方式。\n你可以把`Pull Requests`作为专门给某个分支的讨论。这意味着可以在更早的开发过程中就可以进行`Code Review`。\n比如，一个开发者开发功能需要帮助时，要做的就是发起一个`Pull Request`，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。\n\n一旦`Pull Request`被接受了，发布功能要做的就和集中式工作流就很像了。\n首先，确定本地的`master`分支和上游的`master`分支是同步的。然后合并功能分支到本地`master`分支并`push`已经更新的本地`master`分支到中央仓库。\n\n## 示例\n\n下面的示例演示了如何把`Pull Requests`作为`Code Review`的方式，但注意`Pull Requests`可以用于很多其它的目的。\n\n### 小红开始开发一个新功能\n\n![](../DATA/git-workflow-feature-branch-2.png)\n\n在开始开发功能前，小红需要一个独立的分支。使用下面的命令新建一个分支：\n\n```bash\ngit checkout -b marys-feature master\n```\n\n这个命令检出一个基于`master`名为`marys-feature`的分支，`Git`的`-b`选项表示如果分支还不存在则新建分支。\n这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：\n\n```bash\ngit status\ngit add <some-file>\ngit commit\n```\n\n### 小红要去吃个午饭\n\n![](../DATA/git-workflow-feature-branch-3.png)\n\n早上小红为新功能添加一些提交。\n去吃午饭前，`push`功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其它开发协作，也让他们可以看到小红的提交。\n\n```bash\ngit push -u origin marys-feature\n```\n\n这条命令`push` `marys-feature`分支到中央仓库（`origin`），`-u`选项设置本地分支去跟踪远程对应的分支。\n设置好跟踪的分支后，小红就可以使用`git push`命令省去指定推送分支的参数。\n\n### 小红完成功能开发\n\n![](../DATA/git-workflow-feature-branch-4.png)\n\n小红吃完午饭回来，完成整个功能的开发。在合并到`master`之前，她发起一个`Pull Request`让团队的其它人知道功能已经完成。但首先，她要确认中央仓库中已经有她最近的提交：\n\n```bash\ngit push\n```\n\n然后，在她的`Git` `GUI`客户端中发起`Pull Request`，请求合并`marys-feature`到`master`，团队成员会自动收到通知。`Pull Request`很酷的是可以在相关的提交旁边显示评注，所以你可以对某个变更集提问。\n\n### 小黑收到`Pull Request`\n\n![](../DATA/git-workflow-feature-branch-5.png)\n\n小黑收到了`Pull Request`后会查看`marys-feature`的修改。决定在合并到正式项目前是否要做些修改，且通过`Pull Request`和小红来回地讨论。\n\n### 小红再做修改\n\n![](../DATA/git-workflow-feature-branch-6.png)\n\n要再做修改，小红用和功能第一个迭代完全一样的过程。编辑、暂存、提交并`push`更新到中央仓库。小红这些活动都会显示在`Pull Request`上，小黑可以断续做评注。\n\n如果小黑有需要，也可以把`marys-feature`分支拉到本地，自己来修改，他加的提交也会一样显示在`Pull Request`上。\n\n### 小红发布她的功能\n\n![](../DATA/git-workflow-feature-branch-7.png)\n\n一旦小黑可以的接受`Pull Request`，就可以合并功能到稳定项目代码中（可以由小黑或是小红来做这个操作）：\n\n```bash\ngit checkout master\ngit pull\ngit pull origin marys-feature\ngit push\n```\n\n无论谁来做合并，首先要检出`master`分支并确认是它是最新的。然后执行`git pull origin marys-feature`合并`marys-feature`分支到和已经和远程一致的本地`master`分支。你可以使用简单`git merge marys-feature`命令，但前面的命令可以保证总是最新的新功能分支。最后更新的`master`分支要重新`push`回到`origin`。\n\n这个过程常常会生成一个合并提交。有些开发者喜欢有合并提交，因为它像一个新功能和原来代码基线的连通符。但如果你偏爱线性的提交历史，可以在执行合并时`rebase`新功能到`master`分支的顶部，这样生成一个快进（`fast-forward`）的合并。\n\n一些`GUI`客户端可以只要点一下`接受`按钮执行好上面的命令来自动化`Pull Request`接受过程。\n如果你的不能这样，至少在功能合并到`master`分支后能自动关闭`Pull Request`。\n\n### 与此同时，小明在做和小红一样的事\n\n当小红和小黑在`marys-feature`上工作并讨论她的`Pull Request`的时候，小明在自己的功能分支上做完全一样的事。\n\n通过隔离功能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。\n\n到了这里，但愿你发现了功能分支可以很直接地在 `集中式工作流` 的仅有的`master`分支上完成多功能的开发。\n另外，功能分支还使用了`Pull Request`，使得可以在你的版本控制`GUI`客户端中讨论某个提交。\n\n功能分支工作流是开发项目异常灵活的方式。问题是，有时候太灵活了。对于大型团队，常常需要给不同分支分配一个更具体的角色。\n`Gitflow`工作流是管理功能开发、发布准备和维护的常用模式。\n"},{"title":"【GIT工作流指南】【一】集中式工作流","excerpt":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n","url":"/2018/09/07/转载/【GIT工作流指南】【一】集中式工作流","fromDate":"2018-09-07","category":"转载","text":"<p><code>GIT工作流指南</code>，由 <a href=\"https://github.com/xirong\">xirong</a> 整理自 <a href=\"https://github.com/oldratlee\">oldratlee</a> 的<code>GitHub</code>，方便统一的学习回顾，在此感谢下面两位的贡献。</p>\n<ol>\n<li>原文链接：<a href=\"https://www.atlassian.com/git/workflows\">Git Workflows and Tutorials</a></li>\n<li>简体中文：由 <a href=\"https://github.com/oldratlee\">oldratlee</a> 翻译在 <code>GitHub</code> 上 <a href=\"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md\"><code>Git</code>工作流指南</a></li>\n</ol>\n<!-- more --> \n<p>如果你的开发团队成员已经很熟悉<code>Subversion</code>，集中式工作流让你无需去适应一个全新流程就可以体验<code>Git</code>带来的收益。这个工作流也可以作为向更<code>Git</code>风格工作流迁移的友好过渡。\n<img src=\"/attaches/C8A7DCC387473FF7B118375B67FEBCC9.png\" alt=\"Git Workflows: SVN-style\" class=\"img-responsive\" /></p>\n<p>使用<code>Git</code>加强开发的工作流，相比<code>SVN</code>，<code>Git</code>有以下两个优势:</p>\n<ol>\n<li>首先，每个开发者可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分修改独立开来，即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。</li>\n<li>其次，<code>Git</code>提供了强壮的分支和合并模型。</li>\n</ol>\n<h2>工作方式</h2>\n<p>像<code>Subversion</code>一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比<code>SVN</code>缺省的开发分支<code>trunk</code>，<code>Git</code>叫做<code>master</code>，所有修改提交到这个分支上。本工作流只用到<code>master</code>这一个分支。</p>\n<p>首先，开发者克隆中央仓库。在自己的项目拷贝中，像<code>SVN</code>一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。</p>\n<p>然后，开发者发布修改到正式项目中，开发者要把本地<code>master</code>分支的修改<code>push</code>到中央仓库中。这相当于<code>svn commit</code>操作，但<code>push</code>操作会把所有还不在中央仓库的本地提交都推上去。</p>\n<p><img src=\"/attaches/9AD16EE8AF30AEB1FFF57707740987BD.png\" alt=\"git-workflow-svn-push-local\" class=\"img-responsive\" /></p>\n<h2>冲突解决</h2>\n<p>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，<code>Git</code>会拒绝<code>push</code>提交否则会覆盖已经在中央库的正式提交。</p>\n<p><img src=\"/attaches/F2D124D04CCC0CA7266E52F26ED2C376.png\" alt=\"git-workflow-svn-managingconflicts\" class=\"img-responsive\" /></p>\n<p>在开发者提交自己功能修改到中央库前，需要先<code>fetch</code>在中央库的新增提交，<code>rebase</code>自己提交到中央库提交历史之上。\n这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的<code>SVN</code>的工作流中一样。</p>\n<p>如果本地修改和上游提交有冲突，<code>Git</code>会暂停<code>rebase</code>过程，给你手动解决冲突的机会。<code>Git</code>解决合并冲突，用和生成提交一样的<code>git status</code>和<code>git add</code>命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，<code>Git</code>可以很简单中止整个<code>rebase</code>操作，重来一次（或者让别人来帮助解决）。</p>\n<h2>示例</h2>\n<p>让我们一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。</p>\n<h3>有人先初始化好中央仓库</h3>\n<p><img src=\"/attaches/BA20478118AA78E12EA9F2DC969EDEB6.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>第一步，有人在服务器上创建好中央仓库。如果是新项目，你可以初始化一个空仓库；否则你要导入已有的<code>Git</code>或<code>SVN</code>仓库。</p>\n<p>中央仓库应该是个裸仓库（<code>bare repository</code>），即没有工作目录（<code>working directory</code>）的仓库。可以用下面的命令创建：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host</span><br><span class=\"line\">git init --bare /path/to/repo.git</span><br></pre></td></tr></tbody></table></figure>\n<p>确保写上有效的<code>user</code>（<code>SSH</code>的用户名），<code>host</code>（服务器的域名或IP地址），<code>/path/to/repo.git</code>（你想存放仓库的位置）。\n注意，为了表示是一个裸仓库，按照约定加上<code>.git</code>扩展名到仓库名上。</p>\n<h3>所有人克隆中央仓库</h3>\n<p><img src=\"/attaches/AB1C3D20A8546603EAA601360549C027.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>下一步，各个开发者创建整个项目的本地拷贝。通过<code>git clone</code>命令完成：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://user@host/path/to/repo.git</span><br></pre></td></tr></tbody></table></figure>\n<p>基于你后续会持续和克隆的仓库做交互的假设，克隆仓库时<code>Git</code>会自动添加远程别名<code>origin</code>指回‘父’仓库。</p>\n<h3>小明开发功能</h3>\n<p><img src=\"/attaches/01D7B9F39440E432135780DD8F159D20.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>在小明的本地仓库中，他使用标准的<code>Git</code>过程开发功能：编辑、暂存（<code>Stage</code>）和提交。\n暂存是指，用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。\n这样你可以创建一个高度聚焦的提交，尽管你本地修改很多内容。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status # 查看本地仓库的修改状态</span><br><span class=\"line\">git add # 暂存文件</span><br><span class=\"line\">git commit # 提交文件</span><br></pre></td></tr></tbody></table></figure>\n<p>请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库上有了什么操作。\n对需要多个更简单更原子分块的大功能，这个做法是很有用的。</p>\n<h3>小红开发功能</h3>\n<p><img src=\"/attaches/6F419A4596807A987025F4D04F3C2B48.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。和小明一样，她也不关心中央仓库有没有新提交；\n当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。</p>\n<h3>小明发布功能</h3>\n<p><img src=\"/attaches/6F1CEB157D0BDBE31B58F4CD3A599532.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其它团队成员可以看到他的修改。他可以用下面的<code>git push</code>命令：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></tbody></table></figure>\n<p>注意，<code>origin</code>是在小明克隆仓库时<code>Git</code>创建的远程中央仓库别名。<code>master</code>参数告诉<code>Git</code>推送的分支。\n由于中央仓库自从小明克隆以来还没有被更新过，所以<code>push</code>操作不会有冲突，成功完成。</p>\n<h3>小红试着发布功能</h3>\n<p><img src=\"/attaches/5C78A63AEC5F75481BF133FED7046C96.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>一起来看看在小明发布修改后，小红<code>push</code>修改会怎么样？她使用完全一样的<code>push</code>命令：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></tbody></table></figure>\n<p>但她的本地历史已经和中央仓库有分岐了，<code>Git</code>拒绝操作并给出下面很长的出错消息：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: failed to push some refs to '/path/to/repo.git'</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')</span><br><span class=\"line\">hint: before pushing again.</span><br><span class=\"line\">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br></pre></td></tr></tbody></table></figure>\n<p>这避免了小红覆写正式的提交。她要先<code>pull</code>小明的更新到她的本地仓库合并上她的本地修改后，再重试。</p>\n<h3>小红在小明的提交之上<code>rebase</code></h3>\n<p><img src=\"/attaches/351F6E0C3666984095C92FF10DAAED82.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>小红用<code>git pull</code>合并上游的修改到自己的仓库中。\n这条命令类似<code>svn update</code>——拉取所有上游提交命令到小红的本地仓库，并尝试和她的本地修改合并：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master</span><br></pre></td></tr></tbody></table></figure>\n<p><code>--rebase</code>选项告诉<code>Git</code>把小红的提交移到同步了中央仓库修改后的<code>master</code>分支的顶部，如下图所示：</p>\n<p><img src=\"/attaches/B7DDCCB145575BE7266B0EABCED1CE48.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>如果你忘加了这个选项，<code>pull</code>操作仍然可以完成，但每次<code>pull</code>操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾。\n对于集中式工作流，最好是使用<code>rebase</code>而不是生成一个合并提交。</p>\n<h3>小红解决合并冲突</h3>\n<p><img src=\"/attaches/BB0C1667A0E07C16E2F3FCD234F18DFA.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p><code>rebase</code>操作过程是把本地提交一次一个地迁移到更新了的中央仓库<code>master</code>分支之上。\n这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。\n这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入<code>Bug</code>的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p>\n<p>如果小红和小明的功能是不相关的，不大可能在<code>rebase</code>过程中有冲突。如果有，<code>Git</code>在合并有冲突的提交处暂停<code>rebase</code>过程，输出下面的信息并带上相关的指令：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFLICT (content): Merge conflict in &lt;some-file&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"/attaches/8DBE0538648A5A395815FDEFCE7CB2DB.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p><code>Git</code>很赞的一点是，任何人可以解决他自己的冲突。在这个例子中，小红可以简单的运行<code>git status</code>命令来查看哪里有问题。\n冲突文件列在<code>Unmerged paths</code>（未合并路径）一节中：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Unmerged paths:</span><br><span class=\"line\"># (use &quot;git reset HEAD &lt;some-file&gt;...&quot; to unstage)</span><br><span class=\"line\"># (use &quot;git add/rm &lt;some-file&gt;...&quot; as appropriate to mark resolution)</span><br><span class=\"line\">#</span><br><span class=\"line\"># both modified: &lt;some-file&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p>接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让<code>git rebase</code>完成剩下的事：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;some-file&gt; </span><br><span class=\"line\">git rebase --continue</span><br></pre></td></tr></tbody></table></figure>\n<p>要做的就这些了。<code>Git</code>会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。</p>\n<p>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行<code>git pull --rebase</code>命令前的样子：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --abort</span><br></pre></td></tr></tbody></table></figure>\n<h3>小红成功发布功能</h3>\n<p><img src=\"/attaches/20357E89A77EA5D358C0DC8BEA37B553.png\" alt=\"\" class=\"img-responsive\" /></p>\n<p>小红完成和中央仓库的同步后，就能成功发布她的修改了：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></tbody></table></figure>\n<p>如你所见，仅使用几个<code>Git</code>命令我们就可以模拟出传统<code>Subversion</code>开发环境。对于要从<code>SVN</code>迁移过来的团队来说这太好了，但没有发挥出<code>Git</code>分布式本质的优势。</p>\n<p>如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下 <code>功能分支工作流</code> 的收益。\n通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。</p>\n","hasMore":true,"tags":["GIT","工作流指南","集中式"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【GIT工作流指南】【一】集中式工作流\ntags:\n  - GIT\n  - 工作流指南\n  - 集中式\ncategories: 转载\ndate: 2018-09-07\nstatus: published\n\n---\n\n`GIT工作流指南`，由 [xirong](https://github.com/xirong) 整理自 [oldratlee](https://github.com/oldratlee) 的`GitHub`，方便统一的学习回顾，在此感谢下面两位的贡献。\n\n1. 原文链接：[Git Workflows and Tutorials](https://www.atlassian.com/git/workflows)     \n2. 简体中文：由 [oldratlee](https://github.com/oldratlee) 翻译在 `GitHub` 上 [`Git`工作流指南](https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md)\n\n<!-- more --> \n\n如果你的开发团队成员已经很熟悉`Subversion`，集中式工作流让你无需去适应一个全新流程就可以体验`Git`带来的收益。这个工作流也可以作为向更`Git`风格工作流迁移的友好过渡。\n![Git Workflows: SVN-style](../DATA/git-workflow-svn.png)\n\n使用`Git`加强开发的工作流，相比`SVN`，`Git`有以下两个优势:\n\n1. 首先，每个开发者可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分修改独立开来，即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。\n2. 其次，`Git`提供了强壮的分支和合并模型。\n\n## 工作方式\n\n像`Subversion`一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比`SVN`缺省的开发分支`trunk`，`Git`叫做`master`，所有修改提交到这个分支上。本工作流只用到`master`这一个分支。\n\n首先，开发者克隆中央仓库。在自己的项目拷贝中，像`SVN`一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。\n\n然后，开发者发布修改到正式项目中，开发者要把本地`master`分支的修改`push`到中央仓库中。这相当于`svn commit`操作，但`push`操作会把所有还不在中央仓库的本地提交都推上去。\n\n![git-workflow-svn-push-local](../DATA/git-workflow-svn-push-local.png)\n\n## 冲突解决\n\n中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，`Git`会拒绝`push`提交否则会覆盖已经在中央库的正式提交。\n\n![git-workflow-svn-managingconflicts](../DATA/git-workflow-svn-managingconflicts.png)\n\n在开发者提交自己功能修改到中央库前，需要先`fetch`在中央库的新增提交，`rebase`自己提交到中央库提交历史之上。\n这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的`SVN`的工作流中一样。\n\n如果本地修改和上游提交有冲突，`Git`会暂停`rebase`过程，给你手动解决冲突的机会。`Git`解决合并冲突，用和生成提交一样的`git status`和`git add`命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，`Git`可以很简单中止整个`rebase`操作，重来一次（或者让别人来帮助解决）。\n\n## 示例\n\n让我们一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。\n\n### 有人先初始化好中央仓库\n\n![](../DATA/git-workflow-svn-initialize.png)\n\n第一步，有人在服务器上创建好中央仓库。如果是新项目，你可以初始化一个空仓库；否则你要导入已有的`Git`或`SVN`仓库。\n\n中央仓库应该是个裸仓库（`bare repository`），即没有工作目录（`working directory`）的仓库。可以用下面的命令创建：\n\n```bash\nssh user@host\ngit init --bare /path/to/repo.git\n```\n\n确保写上有效的`user`（`SSH`的用户名），`host`（服务器的域名或IP地址），`/path/to/repo.git`（你想存放仓库的位置）。\n注意，为了表示是一个裸仓库，按照约定加上`.git`扩展名到仓库名上。\n\n### 所有人克隆中央仓库\n\n![](../DATA/git-workflow-svn-clone.png)\n\n下一步，各个开发者创建整个项目的本地拷贝。通过`git clone`命令完成：\n\n```bash\ngit clone ssh://user@host/path/to/repo.git\n```\n\n基于你后续会持续和克隆的仓库做交互的假设，克隆仓库时`Git`会自动添加远程别名`origin`指回‘父’仓库。\n\n### 小明开发功能\n\n![](../DATA/git-workflow-svn-1.png)\n\n在小明的本地仓库中，他使用标准的`Git`过程开发功能：编辑、暂存（`Stage`）和提交。\n暂存是指，用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。\n这样你可以创建一个高度聚焦的提交，尽管你本地修改很多内容。\n\n```bash\ngit status # 查看本地仓库的修改状态\ngit add # 暂存文件\ngit commit # 提交文件\n```\n\n请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库上有了什么操作。\n对需要多个更简单更原子分块的大功能，这个做法是很有用的。\n\n### 小红开发功能\n\n![](../DATA/git-workflow-svn-2.png)\n\n与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。和小明一样，她也不关心中央仓库有没有新提交；\n当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。\n\n### 小明发布功能\n\n![](../DATA/git-workflow-svn-3.png)\n\n一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其它团队成员可以看到他的修改。他可以用下面的`git push`命令：\n\n```bash\ngit push origin master\n```\n\n注意，`origin`是在小明克隆仓库时`Git`创建的远程中央仓库别名。`master`参数告诉`Git`推送的分支。\n由于中央仓库自从小明克隆以来还没有被更新过，所以`push`操作不会有冲突，成功完成。\n\n### 小红试着发布功能\n\n![](../DATA/git-workflow-svn-4.png)\n\n一起来看看在小明发布修改后，小红`push`修改会怎么样？她使用完全一样的`push`命令：\n\n```bash\ngit push origin master\n```\n\n但她的本地历史已经和中央仓库有分岐了，`Git`拒绝操作并给出下面很长的出错消息：\n\n```\nerror: failed to push some refs to '/path/to/repo.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n这避免了小红覆写正式的提交。她要先`pull`小明的更新到她的本地仓库合并上她的本地修改后，再重试。\n\n### 小红在小明的提交之上`rebase`\n\n![](../DATA/git-workflow-svn-5.png)\n\n小红用`git pull`合并上游的修改到自己的仓库中。\n这条命令类似`svn update`——拉取所有上游提交命令到小红的本地仓库，并尝试和她的本地修改合并：\n\n```bash\ngit pull --rebase origin master\n```\n\n`--rebase`选项告诉`Git`把小红的提交移到同步了中央仓库修改后的`master`分支的顶部，如下图所示：\n\n![](../DATA/git-workflow-svn-6.png)\n\n如果你忘加了这个选项，`pull`操作仍然可以完成，但每次`pull`操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾。\n对于集中式工作流，最好是使用`rebase`而不是生成一个合并提交。\n\n### 小红解决合并冲突\n\n![](../DATA/git-workflow-svn-7.png)\n\n`rebase`操作过程是把本地提交一次一个地迁移到更新了的中央仓库`master`分支之上。\n这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。\n这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入`Bug`的分析，如果有必要，回滚修改也可以做到对项目影响最小。\n\n如果小红和小明的功能是不相关的，不大可能在`rebase`过程中有冲突。如果有，`Git`在合并有冲突的提交处暂停`rebase`过程，输出下面的信息并带上相关的指令：\n\n```\nCONFLICT (content): Merge conflict in <some-file>\n```\n\n![](../DATA/git-workflow-svn-8.png)\n\n`Git`很赞的一点是，任何人可以解决他自己的冲突。在这个例子中，小红可以简单的运行`git status`命令来查看哪里有问题。\n冲突文件列在`Unmerged paths`（未合并路径）一节中：\n\n```\n# Unmerged paths:\n# (use \"git reset HEAD <some-file>...\" to unstage)\n# (use \"git add/rm <some-file>...\" as appropriate to mark resolution)\n#\n# both modified: <some-file>\n```\n\n接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让`git rebase`完成剩下的事：\n\n```bash\ngit add <some-file> \ngit rebase --continue\n```\n\n要做的就这些了。`Git`会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。\n\n如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行`git pull --rebase`命令前的样子：\n\n```bash\ngit rebase --abort\n```\n\n### 小红成功发布功能\n\n![](../DATA/git-workflow-svn-9.png)\n\n小红完成和中央仓库的同步后，就能成功发布她的修改了：\n\n```bash\ngit push origin master\n```\n\n如你所见，仅使用几个`Git`命令我们就可以模拟出传统`Subversion`开发环境。对于要从`SVN`迁移过来的团队来说这太好了，但没有发挥出`Git`分布式本质的优势。\n\n如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下 `功能分支工作流` 的收益。\n通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。\n"},{"title":"【docker】【四】docker开源项目","excerpt":"<blockquote>\n<p>本文记录<code>docker</code>更多的开源项目。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。本文也是docker笔记系列的最后一篇，由于dockers开源项目众多，所以本篇文章会持续更新。</p>\n</blockquote>\n","url":"/2018/08/23/技术笔记/【docker】【四】docker开源项目","fromDate":"2018-08-23","category":"技术笔记","text":"<blockquote>\n<p>本文记录<code>docker</code>更多的开源项目。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。本文也是docker笔记系列的最后一篇，由于dockers开源项目众多，所以本篇文章会持续更新。</p>\n</blockquote>\n<!-- more -->\n<h2>高可用键值对数据库</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 仓库地址 `https://github.com/coreos/etcd`</span><br><span class=\"line\"></span><br><span class=\"line\"># 二进制安装</span><br><span class=\"line\">curl -L https://github.com/coreos/etcd/releases/download/v3.0.4/etcd-v3.0.4-linux-amd64.tar.gz -o etcd-v3.0.4-linux-amd64.tar.gz</span><br><span class=\"line\">tar xzvf etcd-v3.0.4-linux-amd64.tar.gz</span><br><span class=\"line\">cd etcd-v3.0.4-linux-amd64</span><br><span class=\"line\">cp etcd* /usr/local/bin</span><br><span class=\"line\"># 使用</span><br><span class=\"line\">etcd --version</span><br><span class=\"line\"># 直接使用 etcd 运行实例即可</span><br><span class=\"line\"># 查看健康状态</span><br><span class=\"line\">curl -L http://127.0.0.1:2379/health </span><br><span class=\"line\">etcdctl cluster-health</span><br><span class=\"line\"># 设置键值</span><br><span class=\"line\">etcdctl set testkey &quot;Hello World&quot;</span><br><span class=\"line\">etcdctl get testkey</span><br><span class=\"line\">curl -L -X PUT http://localhost:2379/v2/keys/testkey -d value=&quot;Hello World&quot;</span><br><span class=\"line\">curl -L http://localhost:2379/v2/keys/testkey</span><br><span class=\"line\"></span><br><span class=\"line\"># docker安装</span><br><span class=\"line\">docker run -p 2379:2379 -p 2380:2380 -v /etc/ssl/certs/:/etc/ssl/certs/ quay.io/coreos/etcd:v3.0.4</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动参数：通用参数、集群参数、安全相关参数、代理参数，参考官方。</span><br><span class=\"line\"># etcdctl 命令 参考man手册或者help</span><br><span class=\"line\"># etcd集群管理</span><br><span class=\"line\">curl https://discovery.etcd.io/new?size=3</span><br><span class=\"line\"># https://discovery.etcd.io/58bad304591e13cac5dfab2c3d65e745</span><br><span class=\"line\"># 节点1</span><br><span class=\"line\">etcd --name n1 --initial-cluster-token cluster1 --initial-cluster-state new \\</span><br><span class=\"line\">--listen-client-urls http://Node1:2379,http://localhost:2379 \\</span><br><span class=\"line\">--listen-peer-urls http://Node1:2380 \\</span><br><span class=\"line\">--advertise-client-urls http://Node1:2379 \\</span><br><span class=\"line\">--initial-advertise-peer-urls http://Node1:2380 \\</span><br><span class=\"line\">--discovery https://discovery.etcd.io/58bad304591e13cac5dfab2c3d65e745</span><br><span class=\"line\"># 其他节点类似 只是改了 Node{n} 和 --name</span><br></pre></td></tr></tbody></table></figure>\n<h2>Docker Machine 三剑客之一</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># https://github.com/docker/machine/releases</span><br><span class=\"line\">$ curl -L https://github.com/docker/machine/releases/download/v0.15.0/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp; chmod +x /tmp/docker-machine &amp;&amp; sudo cp /tmp/docker-machine /usr/local/bin/docker-machine</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一台全新的docker虚拟主机</span><br><span class=\"line\">docker-machine create --driver=virtualbox vbox-instance</span><br><span class=\"line\"># 创建本地主机</span><br><span class=\"line\">docker-machine create --driver generic --generic-ip-address=10.0.100.102 --generic-ssh-user=user test</span><br><span class=\"line\"># 云平台主机</span><br><span class=\"line\">docker-machine create --driver amazonec2 --amazonec2-access-key AKI******* --amazonec2-secret-key 8T********** --amazonec2-vpc-id vpc-******** aes\\_instace</span><br><span class=\"line\"># 查看docker主机</span><br><span class=\"line\">docker-machine ls</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker Compose 三剑客之一</h2>\n<p>二进制安装</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># https://github.com/docker/compose/releases</span><br><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></tbody></table></figure>\n<p>模板文件 参考 https://www.cnblogs.com/52fhy/p/5991344.html</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;2&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  webapp:</span><br><span class=\"line\">    build: /path/to/Dockerfile  # 使用Dockerfile构建镜像</span><br><span class=\"line\">    cgroup\\_parent: cgroup1 # 继承cgroup1的资源限制</span><br><span class=\"line\">    container\\_name: docker-webapp # 容器名称 指定名称后不能扩展、</span><br><span class=\"line\">    dns: # 自定义dns</span><br><span class=\"line\">      - 8.8.8.8</span><br><span class=\"line\">      - 9.9.9.9</span><br><span class=\"line\">    dns\\_search: # 配置dns搜索域</span><br><span class=\"line\">      - domain.example.com</span><br><span class=\"line\">    Dockerfile: Dockerfile-alternate # 指定额外的Dockerfile文件 不能和image同时使用</span><br><span class=\"line\">    env\\_file: # 环境变量文件</span><br><span class=\"line\">      - ./common.env</span><br><span class=\"line\">    environment: # 环境变量</span><br><span class=\"line\">      - BACK\\_ENV=develop</span><br><span class=\"line\">      - BOOLEAN=&quot;true&quot;</span><br><span class=\"line\">      - BOOLEAN2=&quot;yes&quot;</span><br><span class=\"line\">    expose: # 声明暴露端口</span><br><span class=\"line\">      - &quot;3000&quot;</span><br><span class=\"line\">      - &quot;80&quot;</span><br><span class=\"line\">    extends:</span><br><span class=\"line\">      file: common.yml</span><br><span class=\"line\">      service: webapp</span><br><span class=\"line\">    external\\_links: # 链接到外部服务 </span><br><span class=\"line\">      - redis\\_1</span><br><span class=\"line\">    extra\\_hosts: # host文件修改</span><br><span class=\"line\">      - &quot;google.com:8.8.8.8&quot;</span><br><span class=\"line\">    devices: # 指定设备映射关系</span><br><span class=\"line\">      - &quot;/dev/ttyUSB1:/dev/ttyUSB0&quot;</span><br><span class=\"line\">    cap\\_add:</span><br><span class=\"line\">      - ALL # 授予所有内核能力</span><br><span class=\"line\">    cap\\_drop: </span><br><span class=\"line\">      - NET\\_ADMIN # 去掉NET\\_ADMIN能力</span><br><span class=\"line\">    image: examples/web # 指定镜像名称</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      com.abc.c: &quot;hello World&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - db</span><br><span class=\"line\">    log\\_driver: &quot;syslog&quot;</span><br><span class=\"line\">    log\\_opt:</span><br><span class=\"line\">      syslog-address: &quot;tcp:192.168.0.42:123&quot;</span><br><span class=\"line\">    net: &quot;host&quot;</span><br><span class=\"line\">    pid: &quot;host&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;80:80&quot;</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      nproc: 65535 # 最大进程数</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;/data:/data&quot;</span><br><span class=\"line\">    volumes\\_driver: mydriver # 挂载数据卷</span><br><span class=\"line\">    volumes\\_from: </span><br><span class=\"line\">      - service-name # 从另一个服务挂载数据卷</span><br><span class=\"line\">    command: echo &quot;Hello World&quot; # 覆盖默认启动命令</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker Swarm 三剑客之一</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">docker pull swarm</span><br><span class=\"line\"># 查看版本</span><br><span class=\"line\">docker run --rm swarm -v</span><br><span class=\"line\"># 添加到集群之前需要设置docker服务监听</span><br><span class=\"line\">docker deamon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class=\"line\"># docker 1.8 版本之前使用 -d</span><br><span class=\"line\"></span><br><span class=\"line\">#或者修改服务配置文件 /etc/default/docker 【ubuntu】</span><br><span class=\"line\">DOCKER\\_OPTS=&quot;$DOCKER_OPTS -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 集群服务启动发现方式有 dockerhub 本地文件 Etcd Consul Zoomkeeper 和 手动指定</span><br><span class=\"line\"># 启动Consul服务</span><br><span class=\"line\">docker run -d -p 8500:8500 --name=consul progrium/consul -server -bootstrap</span><br><span class=\"line\"># 启动主节点管理</span><br><span class=\"line\">docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise &lt;manager0_ip&gt;:4000 consul://&lt;consul_ip&gt;:8500</span><br><span class=\"line\"># 启动从管理节点 提高可用性</span><br><span class=\"line\">docker run -d swarm manage -H :4000 --replication --advertise &lt;manager1_ip&gt;:4000 consul://&lt;consul_ip&gt;:8500</span><br><span class=\"line\"># 启动工作节点</span><br><span class=\"line\">docker run -d swarm join --advertise=&lt;node_ip&gt;:2375 consul://&lt;consul_ip&gt;:8500</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 利用dockerhub进行集群配置</span><br><span class=\"line\"># 注册到DockerHub 创建集群ID </span><br><span class=\"line\">docker run --rm swarm create # 会返回一串字符 是集群唯一ID 以后需要</span><br><span class=\"line\"># 配置集群节点</span><br><span class=\"line\">docker run --rm swarm join --addr=192.168.0.2:2375 token://&lt;id&gt;</span><br><span class=\"line\"># 配置管理节点</span><br><span class=\"line\">docker run -d -p 12375:2375 swarm manage token://&lt;id&gt;</span><br><span class=\"line\"># 查看集群节点</span><br><span class=\"line\">docker run --rm swarm list token://&lt;id&gt;</span><br><span class=\"line\"># 添加另外一个节点</span><br><span class=\"line\">docker run --rm swarm join --addr=192.168.0.3:2375 token://&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在任意节点上都可以启动若干容器</span><br><span class=\"line\">docker -H 192.168.0.2:12375 run -d ubuntu ping 127.0.0.1</span><br><span class=\"line\">docker -H 192.168.0.2:12375 ps</span><br><span class=\"line\"># 使用info查看所有节点信息</span><br><span class=\"line\">docker -H 192.168.0.2:12375 info </span><br><span class=\"line\"></span><br><span class=\"line\"># 配置网络</span><br><span class=\"line\"># 使用consul添加Docker Daemon选项</span><br><span class=\"line\">--cluster-store=consul://&lt;ip&gt;:8500 --cluster-advertise=192.168.0.3:2375</span><br><span class=\"line\"># 重启docker服务</span><br><span class=\"line\"># 创建一个网络</span><br><span class=\"line\">docker -H 192.168.0.2:12375 network create swarm_network</span><br><span class=\"line\">docker -H 192.168.0.2:12375 network ls</span><br></pre></td></tr></tbody></table></figure>\n<p>服务后端发现的多种实现方式</p>\n<ol>\n<li><code>token://&lt;token&gt;</code></li>\n<li><code>file://path/to/file</code></li>\n<li><code>consul://&lt;ip&gt;/&lt;path&gt;</code></li>\n<li><code>etcd://&lt;ip1&gt;,&lt;ip2&gt;/path</code></li>\n<li><code>zk://&lt;ip1&gt;,&lt;ip2&gt;/path</code></li>\n<li><code>[nodes://]&lt;ip1&gt;,&lt;ip2&gt;</code></li>\n</ol>\n<p>调度器 在manage容器上 用--strategy进行配置</p>\n<ol>\n<li>spread 节点负载基本一致 平均分</li>\n<li>binpack 用尽量少的节点 集中运算</li>\n<li>random 随机</li>\n</ol>\n<p>过滤器</p>\n<ol>\n<li>Constraint 通过键值对区分 运行命令时使用 <code>-e constraint:color==green</code> 即可</li>\n<li>Affinity 通过容器区分 让特定容器在一起 <code>-e affinity:container==&lt;name or id&gt;</code></li>\n<li>Port</li>\n<li>Dependency</li>\n<li>Health</li>\n</ol>\n<h2>Mesos 集群资源调度平台</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker 安装方式 需要 zookeeper mesos marathon</span><br><span class=\"line\">docker pull garland/zookeeper</span><br><span class=\"line\">docker pull garland/mesosphere-docker-mesos-master</span><br><span class=\"line\">docker pull garland/mesosphere-docker-marathon</span><br><span class=\"line\"># 主机节点IP环境变量</span><br><span class=\"line\">HOST_IP=10.0.0.2</span><br><span class=\"line\"># 启动 zookeelper </span><br><span class=\"line\">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 garland/zookeeper</span><br><span class=\"line\"># 启动 mesos-master服务</span><br><span class=\"line\">docker run -d --net=&quot;host&quot; -p 5050:5050 \\</span><br><span class=\"line\">-e &quot;MESOS_HOSTNAME=${HOST\\_IP}&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_IP=${HOST_IP}&quot; \\</span><br><span class=\"line\">-e &quot;MESOS_ZK=zk://${HOST\\_IP}:2181/mesos&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_PORT=5050&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_LOG\\_DIR=/var/log/mesos&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_QUORUM=1&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_REGISTRY=in\\_memory&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_WORK\\_DIR=/var/lib/mesos&quot; \\\\</span><br><span class=\"line\">garland/mesosphere-docker-mesos-master</span><br><span class=\"line\"># 启动 marathon</span><br><span class=\"line\">docker run -d -p 8080:8080 garland/mesosphere-docker-marathon --master zk://${HOST_IP}:2181/mesos --zk zk://${HOST\\_IP}:2181/marathon</span><br><span class=\"line\"># 启动 mesos slave容器</span><br><span class=\"line\">docker run -d --name mesos\\_slave\\_1 --entrypoint=&quot;mesos-slave&quot; \\\\</span><br><span class=\"line\">-e &quot;MESOS\\_MASTER=zk://${HOST_IP}:2181/mesos&quot; \\</span><br><span class=\"line\">-e &quot;MESOS_LOG_DIR=/var/log/mesos&quot; \\</span><br><span class=\"line\">-e &quot;MESOS_LOGGING_LEVEL=INFO&quot; \\</span><br><span class=\"line\">garland/mesosphere-docker-mesos-master</span><br><span class=\"line\"># 本地访问 8080 即可</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["docker","开源项目"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【docker】【四】docker开源项目\ntags:\n  - docker\n  - 开源项目\ncategories: 技术笔记\ndate: 2018-08-23\nstatus: published\n\n---\n\n> 本文记录`docker`更多的开源项目。所有操作仅在CENTOS7上测试过，但是`docker`命令是通用的，不同的是配置文件目录位置或者系统命令。本文也是docker笔记系列的最后一篇，由于dockers开源项目众多，所以本篇文章会持续更新。\n\n<!-- more -->\n\n## 高可用键值对数据库\n\n```bash\n# 仓库地址 `https://github.com/coreos/etcd`\n\n# 二进制安装\ncurl -L https://github.com/coreos/etcd/releases/download/v3.0.4/etcd-v3.0.4-linux-amd64.tar.gz -o etcd-v3.0.4-linux-amd64.tar.gz\ntar xzvf etcd-v3.0.4-linux-amd64.tar.gz\ncd etcd-v3.0.4-linux-amd64\ncp etcd* /usr/local/bin\n# 使用\netcd --version\n# 直接使用 etcd 运行实例即可\n# 查看健康状态\ncurl -L http://127.0.0.1:2379/health \netcdctl cluster-health\n# 设置键值\netcdctl set testkey \"Hello World\"\netcdctl get testkey\ncurl -L -X PUT http://localhost:2379/v2/keys/testkey -d value=\"Hello World\"\ncurl -L http://localhost:2379/v2/keys/testkey\n\n# docker安装\ndocker run -p 2379:2379 -p 2380:2380 -v /etc/ssl/certs/:/etc/ssl/certs/ quay.io/coreos/etcd:v3.0.4\n\n# 启动参数：通用参数、集群参数、安全相关参数、代理参数，参考官方。\n# etcdctl 命令 参考man手册或者help\n# etcd集群管理\ncurl https://discovery.etcd.io/new?size=3\n# https://discovery.etcd.io/58bad304591e13cac5dfab2c3d65e745\n# 节点1\netcd --name n1 --initial-cluster-token cluster1 --initial-cluster-state new \\\n--listen-client-urls http://Node1:2379,http://localhost:2379 \\\n--listen-peer-urls http://Node1:2380 \\\n--advertise-client-urls http://Node1:2379 \\\n--initial-advertise-peer-urls http://Node1:2380 \\\n--discovery https://discovery.etcd.io/58bad304591e13cac5dfab2c3d65e745\n# 其他节点类似 只是改了 Node{n} 和 --name\n```\n\n## Docker Machine 三剑客之一\n\n```bash\n# https://github.com/docker/machine/releases\n$ curl -L https://github.com/docker/machine/releases/download/v0.15.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine && chmod +x /tmp/docker-machine && sudo cp /tmp/docker-machine /usr/local/bin/docker-machine\n\n# 创建一台全新的docker虚拟主机\ndocker-machine create --driver=virtualbox vbox-instance\n# 创建本地主机\ndocker-machine create --driver generic --generic-ip-address=10.0.100.102 --generic-ssh-user=user test\n# 云平台主机\ndocker-machine create --driver amazonec2 --amazonec2-access-key AKI******* --amazonec2-secret-key 8T********** --amazonec2-vpc-id vpc-******** aes_instace\n# 查看docker主机\ndocker-machine ls\n```\n\n## docker Compose 三剑客之一\n\n二进制安装\n\n```bash\n# https://github.com/docker/compose/releases\ncurl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n\n模板文件 参考 https://www.cnblogs.com/52fhy/p/5991344.html\n\n```yml\nversion: \"2\"\nservices:\n  webapp:\n    build: /path/to/Dockerfile  # 使用Dockerfile构建镜像\n    cgroup_parent: cgroup1 # 继承cgroup1的资源限制\n    container_name: docker-webapp # 容器名称 指定名称后不能扩展、\n    dns: # 自定义dns\n      - 8.8.8.8\n      - 9.9.9.9\n    dns_search: # 配置dns搜索域\n      - domain.example.com\n    Dockerfile: Dockerfile-alternate # 指定额外的Dockerfile文件 不能和image同时使用\n    env_file: # 环境变量文件\n      - ./common.env\n    environment: # 环境变量\n      - BACK_ENV=develop\n      - BOOLEAN=\"true\"\n      - BOOLEAN2=\"yes\"\n    expose: # 声明暴露端口\n      - \"3000\"\n      - \"80\"\n    extends:\n      file: common.yml\n      service: webapp\n    external_links: # 链接到外部服务 \n      - redis_1\n    extra_hosts: # host文件修改\n      - \"google.com:8.8.8.8\"\n    devices: # 指定设备映射关系\n      - \"/dev/ttyUSB1:/dev/ttyUSB0\"\n    cap_add:\n      - ALL # 授予所有内核能力\n    cap_drop: \n      - NET_ADMIN # 去掉NET_ADMIN能力\n    image: examples/web # 指定镜像名称\n    labels:\n      com.abc.c: \"hello World\"\n    links:\n      - db\n    log_driver: \"syslog\"\n    log_opt:\n      syslog-address: \"tcp:192.168.0.42:123\"\n    net: \"host\"\n    pid: \"host\"\n    ports:\n      - \"80:80\"\n    ulimits:\n      nproc: 65535 # 最大进程数\n    volumes:\n      - \"/data:/data\"\n    volumes_driver: mydriver # 挂载数据卷\n    volumes_from: \n      - service-name # 从另一个服务挂载数据卷\n    command: echo \"Hello World\" # 覆盖默认启动命令\n```\n\n## docker Swarm 三剑客之一\n\n```bash\n# 安装\ndocker pull swarm\n# 查看版本\ndocker run --rm swarm -v\n# 添加到集群之前需要设置docker服务监听\ndocker deamon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\n# docker 1.8 版本之前使用 -d\n\n#或者修改服务配置文件 /etc/default/docker 【ubuntu】\nDOCKER_OPTS=\"$DOCKER_OPTS -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\"\n\n# 集群服务启动发现方式有 dockerhub 本地文件 Etcd Consul Zoomkeeper 和 手动指定\n# 启动Consul服务\ndocker run -d -p 8500:8500 --name=consul progrium/consul -server -bootstrap\n# 启动主节点管理\ndocker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise <manager0_ip>:4000 consul://<consul_ip>:8500\n# 启动从管理节点 提高可用性\ndocker run -d swarm manage -H :4000 --replication --advertise <manager1_ip>:4000 consul://<consul_ip>:8500\n# 启动工作节点\ndocker run -d swarm join --advertise=<node_ip>:2375 consul://<consul_ip>:8500\n\n\n# 利用dockerhub进行集群配置\n# 注册到DockerHub 创建集群ID \ndocker run --rm swarm create # 会返回一串字符 是集群唯一ID 以后需要\n# 配置集群节点\ndocker run --rm swarm join --addr=192.168.0.2:2375 token://<id>\n# 配置管理节点\ndocker run -d -p 12375:2375 swarm manage token://<id>\n# 查看集群节点\ndocker run --rm swarm list token://<id>\n# 添加另外一个节点\ndocker run --rm swarm join --addr=192.168.0.3:2375 token://<id>\n\n# 在任意节点上都可以启动若干容器\ndocker -H 192.168.0.2:12375 run -d ubuntu ping 127.0.0.1\ndocker -H 192.168.0.2:12375 ps\n# 使用info查看所有节点信息\ndocker -H 192.168.0.2:12375 info \n\n# 配置网络\n# 使用consul添加Docker Daemon选项\n--cluster-store=consul://<ip>:8500 --cluster-advertise=192.168.0.3:2375\n# 重启docker服务\n# 创建一个网络\ndocker -H 192.168.0.2:12375 network create swarm_network\ndocker -H 192.168.0.2:12375 network ls\n```\n\n服务后端发现的多种实现方式\n\n1. `token://<token>`\n1. `file://path/to/file` \n1. `consul://<ip>/<path>` \n1. `etcd://<ip1>,<ip2>/path`\n1. `zk://<ip1>,<ip2>/path` \n1. `[nodes://]<ip1>,<ip2>`\n\n调度器 在manage容器上 用--strategy进行配置\n\n1. spread 节点负载基本一致 平均分\n2. binpack 用尽量少的节点 集中运算\n3. random 随机\n\n过滤器 \n\n1. Constraint 通过键值对区分 运行命令时使用 `-e constraint:color==green` 即可\n2. Affinity 通过容器区分 让特定容器在一起 `-e affinity:container==<name or id>`\n3. Port \n4. Dependency\n5. Health\n\n## Mesos 集群资源调度平台\n\n```bash\n# docker 安装方式 需要 zookeeper mesos marathon\ndocker pull garland/zookeeper\ndocker pull garland/mesosphere-docker-mesos-master\ndocker pull garland/mesosphere-docker-marathon\n# 主机节点IP环境变量\nHOST_IP=10.0.0.2\n# 启动 zookeelper \ndocker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 garland/zookeeper\n# 启动 mesos-master服务\ndocker run -d --net=\"host\" -p 5050:5050 \\\n-e \"MESOS_HOSTNAME=${HOST_IP}\" \\\n-e \"MESOS_IP=${HOST_IP}\" \\\n-e \"MESOS_ZK=zk://${HOST_IP}:2181/mesos\" \\\n-e \"MESOS_PORT=5050\" \\\n-e \"MESOS_LOG_DIR=/var/log/mesos\" \\\n-e \"MESOS_QUORUM=1\" \\\n-e \"MESOS_REGISTRY=in_memory\" \\\n-e \"MESOS_WORK_DIR=/var/lib/mesos\" \\\ngarland/mesosphere-docker-mesos-master\n# 启动 marathon\ndocker run -d -p 8080:8080 garland/mesosphere-docker-marathon --master zk://${HOST_IP}:2181/mesos --zk zk://${HOST_IP}:2181/marathon\n# 启动 mesos slave容器\ndocker run -d --name mesos_slave_1 --entrypoint=\"mesos-slave\" \\\n-e \"MESOS_MASTER=zk://${HOST_IP}:2181/mesos\" \\\n-e \"MESOS_LOG_DIR=/var/log/mesos\" \\\n-e \"MESOS_LOGGING_LEVEL=INFO\" \\\ngarland/mesosphere-docker-mesos-master\n# 本地访问 8080 即可\n```\n\n"},{"title":"【docker】【三】docker进阶","excerpt":"<blockquote>\n<p>本文是记录<code>docker</code>更多仓库、交互、安全方面的内容。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。</p>\n</blockquote>\n","url":"/2018/08/21/技术笔记/【docker】【三】docker进阶","fromDate":"2018-08-21","category":"技术笔记","text":"<blockquote>\n<p>本文是记录<code>docker</code>更多仓库、交互、安全方面的内容。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。</p>\n</blockquote>\n<!-- more -->\n<h2>客户端与服务端</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 让docker服务端监听本地1234端口</span><br><span class=\"line\">docker daemon -H 0.0.0.0:1234</span><br><span class=\"line\"># docker 默认启动配置文件在 /etc/default/docker </span><br><span class=\"line\"># 对于systemd 用户管理启动服务的系统 配置文件在 /etc/systemd/system/docker.service.d/docker.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 让客户端链接监听1234的服务端 显示版本信息</span><br><span class=\"line\">docker -H tcp://127.0.0.1:1234 version</span><br></pre></td></tr></tbody></table></figure>\n<h2>配置私有仓库</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry registry:2.1</span><br><span class=\"line\"># 使用自定义配置文件 默认配置文件在 /etc/docker/registry/config.yml</span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\ </span><br><span class=\"line\">-v /home/user/registry-conf/conf.yml:/etc/docker/registry/config.yml registry:2.1</span><br><span class=\"line\"># 使用自定义存储位置 默认存储位置在 /var/lib/registry</span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">-v /opt/dada/registry:/var/lib/registry registry:2.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置使用TLS证书</span><br><span class=\"line\">openssl req -newkey rsa:4096 -nodes -sha256 -leyout myrepo.key -x509 -days 365 -out myrepo.crt</span><br><span class=\"line\"># 生成的证书 需要安装到 /etc/docker/certs.d/myrepo.com:5000/ca.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置启用证书</span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">-v \\`pwd\\`/certs:/certs \\</span><br><span class=\"line\">-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/myrepo.crt \\</span><br><span class=\"line\">-e REGISTRY_HTTP_TLS_KEY=/certs/myrepo.key \\</span><br><span class=\"line\">registry:2.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用nexus3部署docker仓库</span><br><span class=\"line\">docker pull sonatype/nexus3</span><br><span class=\"line\">docker run -d --name nexus --restart=always -p 5000:5000 -p 8081:8081 sonatype/nexus3</span><br></pre></td></tr></tbody></table></figure>\n<p>管理访问权限</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 管理访问权限</span><br><span class=\"line\"># 使用nginx代理进行权限认证</span><br><span class=\"line\">sudo apt-get -y install nginx</span><br><span class=\"line\"># 增加配置</span><br><span class=\"line\"># docker-registry.conf</span><br><span class=\"line\"># 本地的registry服务监听在5000端口</span><br><span class=\"line\">upstream docker-registry{</span><br><span class=\"line\">    server localhost:5000;</span><br><span class=\"line\">}</span><br><span class=\"line\"># 代理服务器监听在15000端口</span><br><span class=\"line\">server{</span><br><span class=\"line\">    listen 15000;</span><br><span class=\"line\">    server_name private-registry-server.ccom;</span><br><span class=\"line\">    add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;</span><br><span class=\"line\">    # ssl 配置</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/ssl/certs/myrepo.crt;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/private/myrepo.key;</span><br><span class=\"line\">    proxy_pass http://docker-registry;</span><br><span class=\"line\">    proxy_set_header Host \\$http\\_post;</span><br><span class=\"line\">    proxy\\_set\\_header X-Real-IP \\\\$remote_addr;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For \\$proxy\\_add\\_x\\_forwarded\\_for;</span><br><span class=\"line\">    proxy\\_set\\_header X-Forwarded-Proto \\\\$scheme;</span><br><span class=\"line\">    proxy_read_timeout 600;</span><br><span class=\"line\">    client_max_body_size 0;</span><br><span class=\"line\">    chunked_transfer_encoding on;</span><br><span class=\"line\">    location /{</span><br><span class=\"line\">        auth_basic &quot;Please Input username/password&quot;;</span><br><span class=\"line\">        auth_basic_user_file docker-registry-htpasswd;</span><br><span class=\"line\">        proxy_pass http://docker-registry;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    location /v2/ {</span><br><span class=\"line\">        if (\\$http\\_user\\_agent ~ &quot;^(docker\\\\/1\\\\.(3|4|5(?!\\\\.[0-9]-dev))|Go).*\\\\$&quot;){</span><br><span class=\"line\">            return 404;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        proxy_pass http://dicker-registry;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置文件存储在 /etc/nginx/docker-registry-htpasswd 文件中</span><br><span class=\"line\"># 文件格式每行为 username:pass 即可。pass存储的不是明文 而是crypt函数加密的字符串。</span><br><span class=\"line\"># 安装apache2-utils 进行crypt函数加密密码</span><br><span class=\"line\">sudo apt-get install apache2-utils -y</span><br></pre></td></tr></tbody></table></figure>\n<p>使用 Docker Compose</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose.yml </span><br><span class=\"line\">registry:</span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  image:registry:2.1</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - 5000:5000</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    REGISTRY_HTTP_TLS_KEY:/certs/myrepo.key</span><br><span class=\"line\">    REGISTRY_AUTH:htpasswd</span><br><span class=\"line\">    REGISTRY_AUTH_HTPASSWD_OATH:/auth/docker-registry-htpasswd</span><br><span class=\"line\">  volumns:</span><br><span class=\"line\">    - /path/to/data:/var/lib/registry</span><br><span class=\"line\">    - /path/to/certs:/certs</span><br><span class=\"line\">    - /path/to/auth:/auth</span><br></pre></td></tr></tbody></table></figure>\n<p>仓库配置文件</p>\n<blockquote>\n<p>配置仓库 详细可以参考 https://blog.csdn.net/kikajack/article/details/79692156</p>\n</blockquote>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: 0.1 # 版本信息</span><br><span class=\"line\">log:</span><br><span class=\"line\">  accesslog:</span><br><span class=\"line\">    disabled: true</span><br><span class=\"line\">  level: debug # debug info warn error</span><br><span class=\"line\">  formatter: text # text json logstash</span><br><span class=\"line\">  fields: # 用于过滤日志</span><br><span class=\"line\">    service: registry</span><br><span class=\"line\">    environment: staging</span><br><span class=\"line\">  hooks: # 异常时邮件</span><br><span class=\"line\">    - type: mail</span><br><span class=\"line\">      disabled: true</span><br><span class=\"line\">      levels:</span><br><span class=\"line\">        - panic</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        smtp:</span><br><span class=\"line\">          addr: mail.example.com:25</span><br><span class=\"line\">          username: mailuser</span><br><span class=\"line\">          password: password</span><br><span class=\"line\">          insecure: true</span><br><span class=\"line\">        from: sender@example.com</span><br><span class=\"line\">        to:</span><br><span class=\"line\">          - errors@example.com</span><br><span class=\"line\">loglevel: debug # deprecated: use &quot;log&quot;</span><br><span class=\"line\">storage: # 存储选项</span><br><span class=\"line\">  filesystem:</span><br><span class=\"line\">    rootdirectory: /var/lib/registry</span><br><span class=\"line\">    maxthreads: 100</span><br><span class=\"line\">  azure:</span><br><span class=\"line\">    accountname: accountname</span><br><span class=\"line\">    accountkey: base64encodedaccountkey</span><br><span class=\"line\">    container: containername</span><br><span class=\"line\">  gcs:</span><br><span class=\"line\">    bucket: bucketname</span><br><span class=\"line\">    keyfile: /path/to/keyfile</span><br><span class=\"line\">    rootdirectory: /gcs/object/name/prefix</span><br><span class=\"line\">    chunksize: 5242880</span><br><span class=\"line\">  s3:</span><br><span class=\"line\">    accesskey: awsaccesskey</span><br><span class=\"line\">    secretkey: awssecretkey</span><br><span class=\"line\">    region: us-west-1</span><br><span class=\"line\">    regionendpoint: http://myobjects.local</span><br><span class=\"line\">    bucket: bucketname</span><br><span class=\"line\">    encrypt: true</span><br><span class=\"line\">    keyid: mykeyid</span><br><span class=\"line\">    secure: true</span><br><span class=\"line\">    v4auth: true</span><br><span class=\"line\">    chunksize: 5242880</span><br><span class=\"line\">    multipartcopychunksize: 33554432</span><br><span class=\"line\">    multipartcopymaxconcurrency: 100</span><br><span class=\"line\">    multipartcopythresholdsize: 33554432</span><br><span class=\"line\">    rootdirectory: /s3/object/name/prefix</span><br><span class=\"line\">  swift:</span><br><span class=\"line\">    username: username</span><br><span class=\"line\">    password: password</span><br><span class=\"line\">    authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth</span><br><span class=\"line\">    tenant: tenantname</span><br><span class=\"line\">    tenantid: tenantid</span><br><span class=\"line\">    domain: domain name for Openstack Identity v3 API</span><br><span class=\"line\">    domainid: domain id for Openstack Identity v3 API</span><br><span class=\"line\">    insecureskipverify: true</span><br><span class=\"line\">    region: fr</span><br><span class=\"line\">    container: containername</span><br><span class=\"line\">    rootdirectory: /swift/object/name/prefix</span><br><span class=\"line\">  oss:</span><br><span class=\"line\">    accesskeyid: accesskeyid</span><br><span class=\"line\">    accesskeysecret: accesskeysecret</span><br><span class=\"line\">    region: OSS region name</span><br><span class=\"line\">    endpoint: optional endpoints</span><br><span class=\"line\">    internal: optional internal endpoint</span><br><span class=\"line\">    bucket: OSS bucket</span><br><span class=\"line\">    encrypt: optional data encryption setting</span><br><span class=\"line\">    secure: optional ssl setting</span><br><span class=\"line\">    chunksize: optional size valye</span><br><span class=\"line\">    rootdirectory: optional root directory</span><br><span class=\"line\">  inmemory:  # This driver takes no parameters</span><br><span class=\"line\">  delete: # 是否允许删除镜像功能</span><br><span class=\"line\">    enabled: false</span><br><span class=\"line\">  redirect:</span><br><span class=\"line\">    disable: false</span><br><span class=\"line\">  cache: # 对镜像元数据的缓存功能</span><br><span class=\"line\">    blobdescriptor: redis</span><br><span class=\"line\">  maintenance: # 维护相关功能</span><br><span class=\"line\">    uploadpurging:</span><br><span class=\"line\">      enabled: true</span><br><span class=\"line\">      age: 168h</span><br><span class=\"line\">      interval: 24h</span><br><span class=\"line\">      dryrun: false</span><br><span class=\"line\">    readonly:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">auth: # 认证选项</span><br><span class=\"line\">  silly: # 测试使用 进要求请求头带有认证域即可</span><br><span class=\"line\">    realm: silly-realm</span><br><span class=\"line\">    service: silly-service</span><br><span class=\"line\">  token: # 需要额外的token服务支持</span><br><span class=\"line\">    realm: token-realm</span><br><span class=\"line\">    service: token-service</span><br><span class=\"line\">    issuer: registry-token-issuer</span><br><span class=\"line\">    rootcertbundle: /root/certs/bundle</span><br><span class=\"line\">  htpasswd: # 基于apache htpasswd密码文件权限检查</span><br><span class=\"line\">    realm: basic-realm</span><br><span class=\"line\">    path: /path/to/htpasswd</span><br><span class=\"line\">middleware:</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    - name: ARegistryMiddleware</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        foo: bar</span><br><span class=\"line\">  repository:</span><br><span class=\"line\">    - name: ARepositoryMiddleware</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        foo: bar</span><br><span class=\"line\">  storage:</span><br><span class=\"line\">    - name: cloudfront</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        baseurl: https://my.cloudfronted.domain.com/</span><br><span class=\"line\">        privatekey: /path/to/pem</span><br><span class=\"line\">        keypairid: cloudfrontkeypairid</span><br><span class=\"line\">        duration: 3000s</span><br><span class=\"line\">  storage:</span><br><span class=\"line\">    - name: redirect</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        baseurl: https://example.com/</span><br><span class=\"line\">reporting:</span><br><span class=\"line\">  bugsnag:</span><br><span class=\"line\">    apikey: bugsnagapikey</span><br><span class=\"line\">    releasestage: bugsnagreleasestage</span><br><span class=\"line\">    endpoint: bugsnagendpoint</span><br><span class=\"line\">  newrelic:</span><br><span class=\"line\">    licensekey: newreliclicensekey</span><br><span class=\"line\">    name: newrelicname</span><br><span class=\"line\">    verbose: true</span><br><span class=\"line\">http: # http服务相关</span><br><span class=\"line\">  addr: localhost:5000 # 服务监听地址</span><br><span class=\"line\">  prefix: /my/nested/registry/</span><br><span class=\"line\">  host: https://myregistryaddress.org:5000</span><br><span class=\"line\">  secret: asecretforlocaldevelopment # 安全相关的随机字符串</span><br><span class=\"line\">  relativeurls: false</span><br><span class=\"line\">  tls: # 证书相关文件路径信息</span><br><span class=\"line\">    certificate: /path/to/x509/public</span><br><span class=\"line\">    key: /path/to/x509/private</span><br><span class=\"line\">    clientcas:</span><br><span class=\"line\">      - /path/to/ca.pem</span><br><span class=\"line\">      - /path/to/another/ca.pem</span><br><span class=\"line\">    letsencrypt:</span><br><span class=\"line\">      cachefile: /path/to/cache-file</span><br><span class=\"line\">      email: emailused@letsencrypt.com</span><br><span class=\"line\">  debug:</span><br><span class=\"line\">    addr: localhost:5001</span><br><span class=\"line\">  headers:</span><br><span class=\"line\">    X-Content-Type-Options: [nosniff]</span><br><span class=\"line\">  http2: # 是否开启支持</span><br><span class=\"line\">    disabled: false</span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">    - name: alistener</span><br><span class=\"line\">      disabled: false</span><br><span class=\"line\">      url: https://my.listener.com/event</span><br><span class=\"line\">      headers: &lt;http.Header&gt;</span><br><span class=\"line\">      timeout: 500</span><br><span class=\"line\">      threshold: 5</span><br><span class=\"line\">      backoff: 1000</span><br><span class=\"line\">      ignoredmediatypes:</span><br><span class=\"line\">        - application/octet-stream</span><br><span class=\"line\">redis:</span><br><span class=\"line\">  addr: localhost:6379</span><br><span class=\"line\">  password: asecret</span><br><span class=\"line\">  db: 0</span><br><span class=\"line\">  dialtimeout: 10ms</span><br><span class=\"line\">  readtimeout: 10ms</span><br><span class=\"line\">  writetimeout: 10ms</span><br><span class=\"line\">  pool:</span><br><span class=\"line\">    maxidle: 16</span><br><span class=\"line\">    maxactive: 64</span><br><span class=\"line\">    idletimeout: 300s</span><br><span class=\"line\">health:</span><br><span class=\"line\">  storagedriver:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    interval: 10s</span><br><span class=\"line\">    threshold: 3</span><br><span class=\"line\">  file:</span><br><span class=\"line\">    - file: /path/to/checked/file</span><br><span class=\"line\">      interval: 10s</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    - uri: http://server.to.check/must/return/200</span><br><span class=\"line\">      headers:</span><br><span class=\"line\">        Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]</span><br><span class=\"line\">      statuscode: 200</span><br><span class=\"line\">      timeout: 3s</span><br><span class=\"line\">      interval: 10s</span><br><span class=\"line\">      threshold: 3</span><br><span class=\"line\">  tcp:</span><br><span class=\"line\">    - addr: redis-server.domain.com:6379</span><br><span class=\"line\">      timeout: 3s</span><br><span class=\"line\">      interval: 10s</span><br><span class=\"line\">      threshold: 3</span><br><span class=\"line\">proxy:</span><br><span class=\"line\">  remoteurl: https://registry-1.docker.io</span><br><span class=\"line\">  username: [username]</span><br><span class=\"line\">  password: [password]</span><br><span class=\"line\">compatibility:</span><br><span class=\"line\">  schema1:</span><br><span class=\"line\">    signingkeyfile: /etc/registry/key.json</span><br><span class=\"line\">validation:</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  manifests:</span><br><span class=\"line\">    urls:</span><br><span class=\"line\">      allow:</span><br><span class=\"line\">        - ^https?://([^/]+\\.)*example\\.com/</span><br><span class=\"line\">      deny:</span><br><span class=\"line\">        - ^https?://www\\.example\\.com/</span><br></pre></td></tr></tbody></table></figure>\n<p>批量推送镜像 <code>push_images.sh</code></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Usage: push_images image1 [image2...]</span><br><span class=\"line\"># Author: zhoyq@gitee</span><br><span class=\"line\"># Create: 2018-08-08</span><br><span class=\"line\">registry=127.0.0.1:5000</span><br><span class=\"line\">echo_r(){</span><br><span class=\"line\">    [ $# -ne 1 ] &amp;&amp; return 0</span><br><span class=\"line\">    echo -e &quot;\\\\033[31m$1\\033[0m&quot;</span><br><span class=\"line\">}</span><br><span class=\"line\">echo_g(){</span><br><span class=\"line\">    [ $# -ne 1 ] &amp;&amp; return 0</span><br><span class=\"line\">    echo -e &quot;\\\\033[32m$1\\033[0m&quot;</span><br><span class=\"line\">}</span><br><span class=\"line\">echo_y(){</span><br><span class=\"line\">    [ $# -ne 1 ] &amp;&amp; return 0</span><br><span class=\"line\">    echo -e &quot;\\\\033[33m$1\\033[0m&quot;</span><br><span class=\"line\">}</span><br><span class=\"line\">echo_b(){</span><br><span class=\"line\">    [ $# -ne 1 ] &amp;&amp; return 0</span><br><span class=\"line\">    echo -e &quot;\\\\034[33m$1\\033[0m&quot;</span><br><span class=\"line\">}</span><br><span class=\"line\">usage(){</span><br><span class=\"line\">    docker images</span><br><span class=\"line\">    echo &quot;Usage:$0 registry 1:tag1 [registry2:tag2...]&quot;</span><br><span class=\"line\">}</span><br><span class=\"line\">[ $# -ne 1 ] &amp;&amp; usage &amp;&amp; exit</span><br><span class=\"line\">echo_b &quot;The registry server is $registry&quot;</span><br><span class=\"line\">for image in &quot;$@&quot;</span><br><span class=\"line\">do</span><br><span class=\"line\">  echo_b &quot;Uploading $image&quot;</span><br><span class=\"line\">  docker tag $image $registry/$image</span><br><span class=\"line\">  docker push $registry/$image</span><br><span class=\"line\">  docker rmi $registry/$image</span><br><span class=\"line\">  echo_g &quot;Done&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"># 需要给与权限</span><br><span class=\"line\"># chmod a+x push_images.sh</span><br></pre></td></tr></tbody></table></figure>\n<p>全部推送 <code>push_all.sh</code></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Usage: push_all</span><br><span class=\"line\"># Author: zhoyq@gitee</span><br><span class=\"line\"># Create: 2018-08-08</span><br><span class=\"line\">for image in `docker images | grep -v &quot;REPOSITORY&quot; | grep -v &quot;&lt;none&gt;&quot; | awk '{print $1&quot;:&quot;$2}'`</span><br><span class=\"line\">do</span><br><span class=\"line\">  push_images.sh $image</span><br><span class=\"line\">done</span><br></pre></td></tr></tbody></table></figure>\n<h2>安全防护与配置</h2>\n<p>第三方检测工具</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker Bench</span><br><span class=\"line\">git clone https://github.com/docker/docker-bench-security.git</span><br><span class=\"line\"># 对本地环境进行快速检查</span><br><span class=\"line\">docker run -it --net host --pid host --cap-add audit\\_control \\\\</span><br><span class=\"line\">-v /var/lib:/var/lib \\\\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\\\</span><br><span class=\"line\">-v /usr/lib/systemd:/usr/lib/systemd \\\\</span><br><span class=\"line\">-v /etc:/etc --label docker\\_bench\\_security \\\\</span><br><span class=\"line\">docker/docker-bench-security</span><br><span class=\"line\"></span><br><span class=\"line\"># clair</span><br><span class=\"line\">git clone https://github.com/coreos/clair.git</span><br><span class=\"line\">curl -L https://raw.githubuseracontent.com/coreos/clair/v1.2.2/docker-compose.yml -o $HOME/docker-compose.yml</span><br><span class=\"line\">mkdir $HOME/clair\\_config</span><br><span class=\"line\">curl -L https://raw.githubuseracontent.com/coreos/clair/v1.2.2/config.example.yaml -o $HOME/clair_config/config.yaml</span><br><span class=\"line\"># 编辑文件数据库地址</span><br><span class=\"line\">docker-compose -f $HOME/docker-compose.yml up -d</span><br></pre></td></tr></tbody></table></figure>\n<h2>高级网络功能</h2>\n<p>使用 libnetwork 构建跨主机容器网络</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># libnetwork的跨主机方案，需要使用一个键值数据库作为网络信息信息。</span><br><span class=\"line\"># 例如 Consul Etcd ZooKeeper</span><br><span class=\"line\"># 启动一个Consul容器</span><br><span class=\"line\">docker run -d -p 8500:8500 -h consul progrium/consul -server -bootstrap</span><br><span class=\"line\"># 设置docker启动选项</span><br><span class=\"line\">DOCKER\\_OPTS=&quot;$DOCKER_OPTS --cluster-store=consul://&lt;CONSUL_NODE&gt;:8500 --cluster-advertise=eth0:2376&quot; </span><br><span class=\"line\"># 重新启动docker服务</span><br><span class=\"line\"># service docker restart </span><br><span class=\"line\">systemctl restart docker </span><br><span class=\"line\"># 创建网络</span><br><span class=\"line\">docker network create -d overlay multi</span><br><span class=\"line\"># 运行一个容器</span><br><span class=\"line\">docker run -it --name=c1 --net=multi busybox</span><br><span class=\"line\"># 在另外一台服务器上运行第二个实例</span><br><span class=\"line\">docker run -it --name=c2 --net=multi busybox</span><br><span class=\"line\"># 检查连通性</span><br><span class=\"line\">ping c1</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["docker","进阶"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【docker】【三】docker进阶\ntags:\n  - docker\n  - 进阶\ncategories: 技术笔记\ndate: 2018-08-21\nstatus: published\n\n---\n\n> 本文是记录`docker`更多仓库、交互、安全方面的内容。所有操作仅在CENTOS7上测试过，但是`docker`命令是通用的，不同的是配置文件目录位置或者系统命令。\n\n<!-- more -->\n\n## 客户端与服务端\n\n```bash\n# 让docker服务端监听本地1234端口\ndocker daemon -H 0.0.0.0:1234\n# docker 默认启动配置文件在 /etc/default/docker \n# 对于systemd 用户管理启动服务的系统 配置文件在 /etc/systemd/system/docker.service.d/docker.conf\n\n# 让客户端链接监听1234的服务端 显示版本信息\ndocker -H tcp://127.0.0.1:1234 version\n```\n\n## 配置私有仓库\n\n```bash\ndocker run -d -p 5000:5000 --restart=always --name registry registry:2.1\n# 使用自定义配置文件 默认配置文件在 /etc/docker/registry/config.yml\ndocker run -d -p 5000:5000 --restart=always --name registry \\ \n-v /home/user/registry-conf/conf.yml:/etc/docker/registry/config.yml registry:2.1\n# 使用自定义存储位置 默认存储位置在 /var/lib/registry\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n-v /opt/dada/registry:/var/lib/registry registry:2.1\n\n# 配置使用TLS证书\nopenssl req -newkey rsa:4096 -nodes -sha256 -leyout myrepo.key -x509 -days 365 -out myrepo.crt\n# 生成的证书 需要安装到 /etc/docker/certs.d/myrepo.com:5000/ca.crt\n\n# 配置启用证书\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n-v \\`pwd\\`/certs:/certs \\\n-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/myrepo.crt \\\n-e REGISTRY_HTTP_TLS_KEY=/certs/myrepo.key \\\nregistry:2.1\n\n# 使用nexus3部署docker仓库\ndocker pull sonatype/nexus3\ndocker run -d --name nexus --restart=always -p 5000:5000 -p 8081:8081 sonatype/nexus3\n```\n\n管理访问权限\n\n```bash\n# 管理访问权限\n# 使用nginx代理进行权限认证\nsudo apt-get -y install nginx\n# 增加配置\n# docker-registry.conf\n# 本地的registry服务监听在5000端口\nupstream docker-registry{\n    server localhost:5000;\n}\n# 代理服务器监听在15000端口\nserver{\n    listen 15000;\n    server_name private-registry-server.ccom;\n    add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;\n    # ssl 配置\n    ssl on;\n    ssl_certificate /etc/ssl/certs/myrepo.crt;\n    ssl_certificate_key /etc/ssl/private/myrepo.key;\n    proxy_pass http://docker-registry;\n    proxy_set_header Host \\$http_post;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_read_timeout 600;\n    client_max_body_size 0;\n    chunked_transfer_encoding on;\n    location /{\n        auth_basic \"Please Input username/password\";\n        auth_basic_user_file docker-registry-htpasswd;\n        proxy_pass http://docker-registry;\n    }\n    location /v2/ {\n        if (\\$http_user_agent ~ \"^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go).*\\$\"){\n            return 404;\n        }\n        proxy_pass http://dicker-registry;\n    }\n}\n\n# 配置文件存储在 /etc/nginx/docker-registry-htpasswd 文件中\n# 文件格式每行为 username:pass 即可。pass存储的不是明文 而是crypt函数加密的字符串。\n# 安装apache2-utils 进行crypt函数加密密码\nsudo apt-get install apache2-utils -y\n```\n\n使用 Docker Compose\n\n```yml\n# docker-compose.yml \nregistry:\n  restart: always\n  image:registry:2.1\n  ports:\n    - 5000:5000\n  environment:\n    REGISTRY_HTTP_TLS_KEY:/certs/myrepo.key\n    REGISTRY_AUTH:htpasswd\n    REGISTRY_AUTH_HTPASSWD_OATH:/auth/docker-registry-htpasswd\n  volumns:\n    - /path/to/data:/var/lib/registry\n    - /path/to/certs:/certs\n    - /path/to/auth:/auth\n```\n\n仓库配置文件\n\n> 配置仓库 详细可以参考 https://blog.csdn.net/kikajack/article/details/79692156\n\n```yml \nversion: 0.1 # 版本信息\nlog:\n  accesslog:\n    disabled: true\n  level: debug # debug info warn error\n  formatter: text # text json logstash\n  fields: # 用于过滤日志\n    service: registry\n    environment: staging\n  hooks: # 异常时邮件\n    - type: mail\n      disabled: true\n      levels:\n        - panic\n      options:\n        smtp:\n          addr: mail.example.com:25\n          username: mailuser\n          password: password\n          insecure: true\n        from: sender@example.com\n        to:\n          - errors@example.com\nloglevel: debug # deprecated: use \"log\"\nstorage: # 存储选项\n  filesystem:\n    rootdirectory: /var/lib/registry\n    maxthreads: 100\n  azure:\n    accountname: accountname\n    accountkey: base64encodedaccountkey\n    container: containername\n  gcs:\n    bucket: bucketname\n    keyfile: /path/to/keyfile\n    rootdirectory: /gcs/object/name/prefix\n    chunksize: 5242880\n  s3:\n    accesskey: awsaccesskey\n    secretkey: awssecretkey\n    region: us-west-1\n    regionendpoint: http://myobjects.local\n    bucket: bucketname\n    encrypt: true\n    keyid: mykeyid\n    secure: true\n    v4auth: true\n    chunksize: 5242880\n    multipartcopychunksize: 33554432\n    multipartcopymaxconcurrency: 100\n    multipartcopythresholdsize: 33554432\n    rootdirectory: /s3/object/name/prefix\n  swift:\n    username: username\n    password: password\n    authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth\n    tenant: tenantname\n    tenantid: tenantid\n    domain: domain name for Openstack Identity v3 API\n    domainid: domain id for Openstack Identity v3 API\n    insecureskipverify: true\n    region: fr\n    container: containername\n    rootdirectory: /swift/object/name/prefix\n  oss:\n    accesskeyid: accesskeyid\n    accesskeysecret: accesskeysecret\n    region: OSS region name\n    endpoint: optional endpoints\n    internal: optional internal endpoint\n    bucket: OSS bucket\n    encrypt: optional data encryption setting\n    secure: optional ssl setting\n    chunksize: optional size valye\n    rootdirectory: optional root directory\n  inmemory:  # This driver takes no parameters\n  delete: # 是否允许删除镜像功能\n    enabled: false\n  redirect:\n    disable: false\n  cache: # 对镜像元数据的缓存功能\n    blobdescriptor: redis\n  maintenance: # 维护相关功能\n    uploadpurging:\n      enabled: true\n      age: 168h\n      interval: 24h\n      dryrun: false\n    readonly:\n      enabled: false\nauth: # 认证选项\n  silly: # 测试使用 进要求请求头带有认证域即可\n    realm: silly-realm\n    service: silly-service\n  token: # 需要额外的token服务支持\n    realm: token-realm\n    service: token-service\n    issuer: registry-token-issuer\n    rootcertbundle: /root/certs/bundle\n  htpasswd: # 基于apache htpasswd密码文件权限检查\n    realm: basic-realm\n    path: /path/to/htpasswd\nmiddleware:\n  registry:\n    - name: ARegistryMiddleware\n      options:\n        foo: bar\n  repository:\n    - name: ARepositoryMiddleware\n      options:\n        foo: bar\n  storage:\n    - name: cloudfront\n      options:\n        baseurl: https://my.cloudfronted.domain.com/\n        privatekey: /path/to/pem\n        keypairid: cloudfrontkeypairid\n        duration: 3000s\n  storage:\n    - name: redirect\n      options:\n        baseurl: https://example.com/\nreporting:\n  bugsnag:\n    apikey: bugsnagapikey\n    releasestage: bugsnagreleasestage\n    endpoint: bugsnagendpoint\n  newrelic:\n    licensekey: newreliclicensekey\n    name: newrelicname\n    verbose: true\nhttp: # http服务相关\n  addr: localhost:5000 # 服务监听地址\n  prefix: /my/nested/registry/\n  host: https://myregistryaddress.org:5000\n  secret: asecretforlocaldevelopment # 安全相关的随机字符串\n  relativeurls: false\n  tls: # 证书相关文件路径信息\n    certificate: /path/to/x509/public\n    key: /path/to/x509/private\n    clientcas:\n      - /path/to/ca.pem\n      - /path/to/another/ca.pem\n    letsencrypt:\n      cachefile: /path/to/cache-file\n      email: emailused@letsencrypt.com\n  debug:\n    addr: localhost:5001\n  headers:\n    X-Content-Type-Options: [nosniff]\n  http2: # 是否开启支持\n    disabled: false\nnotifications:\n  endpoints:\n    - name: alistener\n      disabled: false\n      url: https://my.listener.com/event\n      headers: <http.Header>\n      timeout: 500\n      threshold: 5\n      backoff: 1000\n      ignoredmediatypes:\n        - application/octet-stream\nredis:\n  addr: localhost:6379\n  password: asecret\n  db: 0\n  dialtimeout: 10ms\n  readtimeout: 10ms\n  writetimeout: 10ms\n  pool:\n    maxidle: 16\n    maxactive: 64\n    idletimeout: 300s\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\n  file:\n    - file: /path/to/checked/file\n      interval: 10s\n  http:\n    - uri: http://server.to.check/must/return/200\n      headers:\n        Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]\n      statuscode: 200\n      timeout: 3s\n      interval: 10s\n      threshold: 3\n  tcp:\n    - addr: redis-server.domain.com:6379\n      timeout: 3s\n      interval: 10s\n      threshold: 3\nproxy:\n  remoteurl: https://registry-1.docker.io\n  username: [username]\n  password: [password]\ncompatibility:\n  schema1:\n    signingkeyfile: /etc/registry/key.json\nvalidation:\n  enabled: true\n  manifests:\n    urls:\n      allow:\n        - ^https?://([^/]+\\.)*example\\.com/\n      deny:\n        - ^https?://www\\.example\\.com/\n```\n\n批量推送镜像 `push_images.sh`\n\n```bash \n#!/bin/bash\n# Usage: push_images image1 [image2...]\n# Author: zhoyq@gitee\n# Create: 2018-08-08\nregistry=127.0.0.1:5000\necho_r(){\n    [ $# -ne 1 ] && return 0\n    echo -e \"\\033[31m$1\\033[0m\"\n}\necho_g(){\n    [ $# -ne 1 ] && return 0\n    echo -e \"\\033[32m$1\\033[0m\"\n}\necho_y(){\n    [ $# -ne 1 ] && return 0\n    echo -e \"\\033[33m$1\\033[0m\"\n}\necho_b(){\n    [ $# -ne 1 ] && return 0\n    echo -e \"\\034[33m$1\\033[0m\"\n}\nusage(){\n    docker images\n    echo \"Usage:$0 registry 1:tag1 [registry2:tag2...]\"\n}\n[ $# -ne 1 ] && usage && exit\necho_b \"The registry server is $registry\"\nfor image in \"$@\"\ndo\n  echo_b \"Uploading $image\"\n  docker tag $image $registry/$image\n  docker push $registry/$image\n  docker rmi $registry/$image\n  echo_g \"Done\"\ndone\n# 需要给与权限\n# chmod a+x push_images.sh\n```\n\n全部推送 `push_all.sh`\n\n```bash\n#!/bin/bash\n# Usage: push_all\n# Author: zhoyq@gitee\n# Create: 2018-08-08\nfor image in `docker images | grep -v \"REPOSITORY\" | grep -v \"<none>\" | awk '{print $1\":\"$2}'`\ndo\n  push_images.sh $image\ndone\n```\n\n## 安全防护与配置\n\n第三方检测工具\n\n```bash\n# docker Bench\ngit clone https://github.com/docker/docker-bench-security.git\n# 对本地环境进行快速检查\ndocker run -it --net host --pid host --cap-add audit_control \\\n-v /var/lib:/var/lib \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /usr/lib/systemd:/usr/lib/systemd \\\n-v /etc:/etc --label docker_bench_security \\\ndocker/docker-bench-security\n\n# clair\ngit clone https://github.com/coreos/clair.git\ncurl -L https://raw.githubuseracontent.com/coreos/clair/v1.2.2/docker-compose.yml -o $HOME/docker-compose.yml\nmkdir $HOME/clair_config\ncurl -L https://raw.githubuseracontent.com/coreos/clair/v1.2.2/config.example.yaml -o $HOME/clair_config/config.yaml\n# 编辑文件数据库地址\ndocker-compose -f $HOME/docker-compose.yml up -d\n```\n\n## 高级网络功能\n\n使用 libnetwork 构建跨主机容器网络\n\n```bash\n# libnetwork的跨主机方案，需要使用一个键值数据库作为网络信息信息。\n# 例如 Consul Etcd ZooKeeper\n# 启动一个Consul容器\ndocker run -d -p 8500:8500 -h consul progrium/consul -server -bootstrap\n# 设置docker启动选项\nDOCKER_OPTS=\"$DOCKER_OPTS --cluster-store=consul://<CONSUL_NODE>:8500 --cluster-advertise=eth0:2376\" \n# 重新启动docker服务\n# service docker restart \nsystemctl restart docker \n# 创建网络\ndocker network create -d overlay multi\n# 运行一个容器\ndocker run -it --name=c1 --net=multi busybox\n# 在另外一台服务器上运行第二个实例\ndocker run -it --name=c2 --net=multi busybox\n# 检查连通性\nping c1\n```\n"},{"title":"【docker】【二】docker实践","excerpt":"<blockquote>\n<p>本文是记录常用的<code>docker</code>实例的笔记，尽量使用简单的文字介绍<code>docker</code>实例的使用。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。</p>\n</blockquote>\n","url":"/2018/08/20/技术笔记/【docker】【二】docker实践","fromDate":"2018-08-20","category":"技术笔记","text":"<blockquote>\n<p>本文是记录常用的<code>docker</code>实例的笔记，尽量使用简单的文字介绍<code>docker</code>实例的使用。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。</p>\n</blockquote>\n<!-- more -->\n<h2>docker 常用系统镜像</h2>\n<ol>\n<li>busybox</li>\n<li>alpine</li>\n<li>debian</li>\n<li>ubuntu</li>\n<li>centOS</li>\n<li>fedora</li>\n</ol>\n<h2>为镜像添加SSH服务 基于ubuntu_14.04</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 示例中$为宿主机内，@代表docker容器内</span><br><span class=\"line\">$ docker run -it ubuntu:14.04 /bin/bash</span><br><span class=\"line\">@ apt-get update</span><br><span class=\"line\">@ apt-get install openssh-server -y</span><br><span class=\"line\">@ mkdir -p /var/run/sshd</span><br><span class=\"line\">@ /usr/sbin/sshd -D &amp;</span><br><span class=\"line\"># 可以检查端口22 查看程序运行情况</span><br><span class=\"line\"># 修改ssh服务安全登陆配置 取消pam登陆限制</span><br><span class=\"line\">@ sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd</span><br><span class=\"line\">@ mkdir /root/.ssh</span><br><span class=\"line\"># 编辑文件 复制信息到文件中 可以通过 ssh-keygen-t rsa 命令生成</span><br><span class=\"line\">@ vi /root/.ssh/authorized_keys</span><br><span class=\"line\"># 创建自动启动脚本</span><br><span class=\"line\">@ vi /run.sh</span><br><span class=\"line\">@ chmod +x /run.sh</span><br><span class=\"line\">@ exit </span><br></pre></td></tr></tbody></table></figure>\n<p>run.sh 内容</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">/usr/sbin/sshd -D</span><br></pre></td></tr></tbody></table></figure>\n<p>或者使用Dockerfile直接生成镜像：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\">MAINTAINER docker_user(user@docker.com)</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install -y openssh-server</span><br><span class=\"line\">RUN mkdir -p /var/run/sshd</span><br><span class=\"line\">RUN mkdir -p /root/.ssh</span><br><span class=\"line\">RUN sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd</span><br><span class=\"line\">ADD authorized_keys /root/.ssh/authorized_keys</span><br><span class=\"line\">ADD run.sh /run.sh</span><br><span class=\"line\">RUN chmod 755 /run.sh</span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\">CMD [&quot;/run.sh&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>使用命令生成镜像：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行命令</span><br><span class=\"line\">docker build -t sshd:Docerfile</span><br></pre></td></tr></tbody></table></figure>\n<h2>apache WEB服务与应用</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM httpd:2.4</span><br><span class=\"line\">COPY ./public-html /usr/local/apache2/htdocs/</span><br></pre></td></tr></tbody></table></figure>\n<p>构建并运行</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建</span><br><span class=\"line\">docker build -t apache2-image .</span><br><span class=\"line\"># 运行</span><br><span class=\"line\">docket run -it --rm --name apache-container -p 80:80 apache2-image</span><br><span class=\"line\">docker run -it --rm --name my-apache-app -p 80:80 -v &quot;$PWD&quot;:/usr/local/apache2/htdocs/ httpd:2.4</span><br></pre></td></tr></tbody></table></figure>\n<p>使用自定义镜像</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM sshd:Dockerfile</span><br><span class=\"line\">MAINTAINER docker\\_user(user@docker.com)</span><br><span class=\"line\">ENV DEBIAN\\_FRONTEND noninteractive</span><br><span class=\"line\">RUN apt-get -yq install apache2 &amp;&amp; \\\\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\">RUN echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; \\\\</span><br><span class=\"line\">    dpkg-reconfigure -f noninteractive tzdata</span><br><span class=\"line\">ADD run.sh /run.sh</span><br><span class=\"line\">RUN chmod 755 /*.sh</span><br><span class=\"line\">RUN mkdir -p /var/lock/apache2 &amp;&amp; mkdir -p /app &amp;&amp; rm -rf /var/www/html &amp;&amp; ln -s /app /var/www/html</span><br><span class=\"line\">COPY sample/ /app</span><br><span class=\"line\">ENV APACHE\\_RUN\\_USER www-data</span><br><span class=\"line\">ENV APACHE\\_RUN\\_GROUP www-data</span><br><span class=\"line\">ENV APACHE\\_LOG\\_DIR /var/log/apache2</span><br><span class=\"line\">ENV APACHE\\_PID\\_FILE /var/run/apache2.pid</span><br><span class=\"line\">ENV APACHE\\_RUN\\_DIR /var/run/apache2</span><br><span class=\"line\">ENV APACHE\\_LOCK\\_DIR /var/lock/apache2</span><br><span class=\"line\">ENV APACHE\\_SERVERADMIN admin@localhost</span><br><span class=\"line\">ENV APACHE\\_SERVERNAME localhost</span><br><span class=\"line\">ENV APACHE\\_SERVERALIAS docker.localhost</span><br><span class=\"line\">ENV APACHE\\_DOCUMENTROOT /var/www</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">CMD [&quot;/run.sh&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>run.sh 内容</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/sshd &amp;</span><br><span class=\"line\">exec apache2 -D FOREGROUND</span><br></pre></td></tr></tbody></table></figure>\n<h2>nginx WEB服务与应用</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">COPY ./index.html /usr/sahre/nginx/html</span><br></pre></td></tr></tbody></table></figure>\n<p>构建并运行</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建</span><br><span class=\"line\">docker build -t my-nginx .</span><br><span class=\"line\"># 运行</span><br><span class=\"line\">docker run --name nginx-container -d my-nginx</span><br><span class=\"line\"># 直接运行</span><br><span class=\"line\">docker run --name nginx-container -p 80:80 -v index.html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></tbody></table></figure>\n<h2>tomcat WEB服务与应用</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM sshd:Dockerfile</span><br><span class=\"line\">MAINTAINER docker\\_user(user@docker.com)</span><br><span class=\"line\">ENV DEBIAN\\_FRONTEND noninteractive</span><br><span class=\"line\">RUN echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; \\\\</span><br><span class=\"line\">    dpkg-reconfigure -f noninteractive tzdata</span><br><span class=\"line\">RUN apt-get install -yq --no-install-recommends wget pwgen ca-certificates &amp;&amp; \\\\</span><br><span class=\"line\">    apt-get clean &amp;&amp; \\\\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\">ENV CATALINA\\_HOME /tomcat</span><br><span class=\"line\">ENV JAVA\\_HOME /jdk</span><br><span class=\"line\">ADD apache-tomcat-7.0.56 /tomcat</span><br><span class=\"line\">ADD jdk /jdk</span><br><span class=\"line\">ADD create\\_tomcat\\_admin\\_user.sh /create\\_tomcat\\_admin\\_user.sh</span><br><span class=\"line\">ADD run.sh /run.sh</span><br><span class=\"line\">RUN chmod +x /*.sh</span><br><span class=\"line\">RUN chmod +x /tomcat/bin/*.sh</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD [&quot;/run.sh&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>create_tomcat_admin_user.sh 内容</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if[-f /.tomcat\\_admin\\_created ];then</span><br><span class=\"line\">echo &quot;Tomcat 'admin' user already created&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">fi</span><br><span class=\"line\">PASS=${TOMCAT_PASS:-$(pwgen -s 12 1)}</span><br><span class=\"line\">\\_word=$([${TOMCAT\\_PASS}] &amp;&amp; echo &quot;preset&quot; || echo &quot;random&quot;)</span><br><span class=\"line\">echo &quot;=&gt; Creating and admin user with a ${_word} password in Tomcat&quot;</span><br><span class=\"line\">sed -i -r 's/&lt;\\/tomcat-users&gt;//' ${CATALINA\\_HOME}/conf/tomcat-users.xml</span><br><span class=\"line\">echo '&lt;role rolename=&quot;manager-gui&quot;/&gt;' &gt;&gt; ${CATALINA_HOME}/conf/tomcat_users.xml</span><br><span class=\"line\">echo '&lt;role rolename=&quot;manager-script&quot;/&gt;' &gt;&gt; ${CATALINA\\_HOME}/conf/tomcat\\_users.xml</span><br><span class=\"line\">echo '&lt;role rolename=&quot;manager-jmx&quot;/&gt;' &gt;&gt; ${CATALINA_HOME}/conf/tomcat_users.xml</span><br><span class=\"line\">echo '&lt;role rolename=&quot;admin-gui&quot;/&gt;' &gt;&gt; ${CATALINA\\_HOME}/conf/tomcat\\_users.xml</span><br><span class=\"line\">echo '&lt;role rolename=&quot;admin-script&quot;/&gt;' &gt;&gt; ${CATALINA_HOME}/conf/tomcat_users.xml</span><br><span class=\"line\">echo '&lt;user username=&quot;admin&quot; password=&quot;${PASS}&quot; roles=&quot;manager-gui,manager-script,manager-jmx,admin-gui,admin-script&quot; /&gt;' &gt;&gt; ${CATALINA_HOME}/conf/tomcat_users.xml</span><br><span class=\"line\">echo '&lt;/tomcat-users&gt;' &gt;&gt; ${CATALINA\\_HOME}/conf/tomcat\\_users.xml</span><br><span class=\"line\">echo '==&gt; Done!'</span><br><span class=\"line\">touch /.tomcat\\_admin\\_created</span><br><span class=\"line\">echo '===================================================='</span><br><span class=\"line\">echo 'You can now configure to this Tomcat Server using'</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;admin:${PASS}&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo '===================================================='</span><br></pre></td></tr></tbody></table></figure>\n<p>run.sh 内容</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [! -f /.tomcat_admin_created];then </span><br><span class=\"line\">/create_tomcat_admin_user.sh &amp; </span><br><span class=\"line\">fi</span><br><span class=\"line\">/usr/sbin/sshd -D &amp;</span><br><span class=\"line\">exec ${CATALINA\\_HOME}/bin/catalina.sh run</span><br></pre></td></tr></tbody></table></figure>\n<p>构建并运行</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构架</span><br><span class=\"line\">docker build -t tomcat7.0:jdk1.6 .</span><br><span class=\"line\"># 运行</span><br><span class=\"line\">docker run -d -P tomcat7.0:jdk1.6</span><br><span class=\"line\"># 获取密码</span><br><span class=\"line\">docker logs &lt;容器ID或者名称&gt;</span><br></pre></td></tr></tbody></table></figure>\n<h2>jetty WEB服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:8080 -p 443:8443 jetty</span><br></pre></td></tr></tbody></table></figure>\n<h2>LAMP 服务与应用</h2>\n<p>LAMP 即 Linux + Apache + Mysql + Php</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80:80 -it linode/lamp /bin/bash</span><br><span class=\"line\">@ systemctl start apache2</span><br><span class=\"line\">@ systemctl start mysql</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">docker run -p 80:80 -p 3306:3306 -d tutum/lamp</span><br></pre></td></tr></tbody></table></figure>\n<h2>可持续开发与管理 服务与应用</h2>\n<p>Jenkins + Gitlab</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:8080 -p 50000:50000 -v /your/path:/var/jenkins\\_home jenkins</span><br><span class=\"line\">docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 23:23 --name gitlib --restart always --volume /srv/gitlib/config:/etc/gitlib --volume /srv/gitlib/logs:/var/log/gitlib --volume /srv/gitlib/data:/var/opt/gitlib gitlib/gitlib-ce:latest</span><br></pre></td></tr></tbody></table></figure>\n<h2>mysql 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行 自定义密码和配置文件</span><br><span class=\"line\">docker run --name hi-mysql -eMYSQL\\_ROOT\\_PASSWORD=123 -v /my/custom:/etc/mysql/conf.d -d mysql:5.6.40</span><br><span class=\"line\"># 链接使用mysql</span><br><span class=\"line\">docker run --name some-app --link some-mysql:mysql -d application-that-uses-mysql</span><br><span class=\"line\"># 备份</span><br><span class=\"line\">docker exec hi-mysql /bin/sh -c 'exec mysqldump -uroot -p&quot;123456&quot; &lt;db名称&gt; | gzip' &gt; /root/backup/back-$(date +%Y%m%d).sql.gz</span><br><span class=\"line\"># 备份所有</span><br><span class=\"line\">docker exec hi-mysql /bin/sh -c 'exec mysqldump --all-databases -uroot -p&quot;123456&quot; | gzip' &gt; /root/backup/back-$(date +%Y%m%d).sql.gz</span><br></pre></td></tr></tbody></table></figure>\n<h2>mongo 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mongo-container -d mongo</span><br><span class=\"line\">docker run -it --link mongo-container:db alpine sh</span><br><span class=\"line\"># 直接进入数据命令交互模式</span><br><span class=\"line\">docker run -it --link mongo-container:db --entrypoint mongo mongo --host db</span><br></pre></td></tr></tbody></table></figure>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM sshd</span><br><span class=\"line\">MAINTAINER docker\\_user(user@docker.com)</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y mongodb pwgen &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* </span><br><span class=\"line\">RUN mkdir -p /data/db</span><br><span class=\"line\">VOLUME /data/db</span><br><span class=\"line\">ENV AUTH yes</span><br><span class=\"line\">ADD run.sh /run.sh</span><br><span class=\"line\">ADD set\\_mongodb\\_password.sh /set\\_mongodb\\_password.sh</span><br><span class=\"line\">RUN chmod 755 /*.sh</span><br><span class=\"line\">EXPOSE 27017</span><br><span class=\"line\">EXPOSE 28017</span><br><span class=\"line\">CMD [&quot;/run.sh&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>set_mongodb_password.sh 内容</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [-f /.mongodb\\_password\\_set];then</span><br><span class=\"line\">echo &quot;MongoDB password already set!&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">fi</span><br><span class=\"line\">/usr/bin/mongod --smallfiles --nojournal &amp; </span><br><span class=\"line\">PASS=${MONGODB_PASS:-$(pwgen -s 12 1)}</span><br><span class=\"line\">\\_word=$([${MONGODB\\_PASS}] &amp;&amp; echo &quot;preset&quot; || echo &quot;random&quot;)</span><br><span class=\"line\">RET=1</span><br><span class=\"line\">while [[RET -ne 0]];do</span><br><span class=\"line\">echo &quot;=&gt; Waiting for confirmation of MongoDB service startup&quot;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\">mongo admin --eval &quot;help&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">RET=$?</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;=&gt; Creating an admin user with a ${\\_word} password in MongoDB&quot;</span><br><span class=\"line\">mongo admin --eval &quot;db.addUser({user:'admin',pwd:'$PASS',roles:['userAdminAnyDatabase','dbAdminAnyDatabase']});&quot;</span><br><span class=\"line\">mongo admin --eval &quot;db.shutdownServer();&quot;</span><br><span class=\"line\">echo &quot;=&gt; Done!&quot;</span><br><span class=\"line\">touch /.mongodb_password_set</span><br><span class=\"line\">echo &quot;=================================================&quot;</span><br><span class=\"line\">echo &quot;You can now connect to this MongoDB server using&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;mongo admin -u admin -p $PASS --host &lt;host&gt; --port &lt;port&gt;&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;Please remember to change the above password as soon as possible!&quot;</span><br><span class=\"line\">echo &quot;=================================================&quot;</span><br></pre></td></tr></tbody></table></figure>\n<p>run.sh 内容</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [-f /.mongodb\\_password\\_set];then</span><br><span class=\"line\">/set\\_mongodb\\_password.sh</span><br><span class=\"line\">fi </span><br><span class=\"line\">if [&quot;$AUTH&quot; == &quot;yes&quot;];then</span><br><span class=\"line\">export mongodb='/usr/bin/mongod --nojournal --auth --httpinterface --rest'</span><br><span class=\"line\">else </span><br><span class=\"line\">export mongodb='/usr/bin/mongod --nojournal --httpinterface --rest'</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [!-f /data/db/mongod.lock];then</span><br><span class=\"line\">eval $mongodb</span><br><span class=\"line\">else</span><br><span class=\"line\">export mongodb=$mongodb' --dbpath /data/db'</span><br><span class=\"line\">rm /data/db/mongod.lock</span><br><span class=\"line\">mongod --dbpath /data/db --repair &amp;&amp; eval $mongodb</span><br><span class=\"line\">fi</span><br></pre></td></tr></tbody></table></figure>\n<p>构建并运行</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建</span><br><span class=\"line\">docker build -t mongodb-image .</span><br><span class=\"line\"># 运行</span><br><span class=\"line\">docker run -d -p 27017:17017 -p 28017:28017 mongodb</span><br><span class=\"line\"># 使用 docker logs &lt;容器名称或者ID&gt; 获取密码</span><br><span class=\"line\"># 指定密码运行</span><br><span class=\"line\">docker run -d -p 27017:17017 -p 28017:28017 -eMONGODB\\_PASS=&quot;mypass&quot; mongodb</span><br><span class=\"line\"># 不需要密码</span><br><span class=\"line\">docker run -d -p 27017:17017 -p 28017:28017 -eAUTH=no mongodb</span><br></pre></td></tr></tbody></table></figure>\n<h2>redis 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name redis-container -d redis</span><br></pre></td></tr></tbody></table></figure>\n<h2>memcached 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 限制内存使用大小</span><br><span class=\"line\">docker run --name memcached-container -d memcached -m 64 </span><br></pre></td></tr></tbody></table></figure>\n<h2>CouchDB 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name couchdb-container couchdb</span><br></pre></td></tr></tbody></table></figure>\n<h2>Cassandra 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-cassandra -d cassandra:latest</span><br></pre></td></tr></tbody></table></figure>\n<p>搭建集群</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-cassandra -d -e CAS-SANDRA\\_BROADCAST\\_ADDRESS=10.42.42.42 -p 7000:7000 cassandra:latest</span><br><span class=\"line\">docker run --name my-cassandra -d -e CAS-SANDRA\\_BROADCAST\\_ADDRESS=10.43.43.43 -p 7000:7000 -e CASSANDRA\\_SEEDS=10.42.42.42 cassandra:latest</span><br></pre></td></tr></tbody></table></figure>\n<h2>RabbitMQ 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装以及链接命令</span><br><span class=\"line\">docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3</span><br><span class=\"line\">docker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ\\_ERLANG\\_COOKIE='secret cookie here' rabbitmq:3</span><br><span class=\"line\">docker run -it --rm --link some-rabbit:my-rabbit -e RABBITMQ\\_ERLANG\\_COOKIE='secret cookie here' rabbitmq:3 bash</span><br><span class=\"line\">@ rabbitmqctl -n rabbit@my-rabbit list\\_users</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it --rm --link some-rabbit:my-rabbit -e RABBITMQ\\_ERLANG\\_COOKIE='secret cookie here' -e RABBITMQ\\_NODENAME=rabbit@my-rabbit rabbitmq:3 bash</span><br><span class=\"line\">@ rabbitmqctl list\\_users</span><br><span class=\"line\"># 管理</span><br><span class=\"line\">docker run -d --hostname my-rabbit --name some-rabbit -p 8080:15672 rabbitmq:3-management</span><br><span class=\"line\"># 默认用户名密码 guest guest</span><br><span class=\"line\">docker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ\\_DEFAULT\\_USER=user -e RABBITMQ\\_DEFAULT\\_PASS=password rabbitmq:3-management</span><br><span class=\"line\"># vhost </span><br><span class=\"line\">docker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ\\_DEFAULT\\_VHOST=my\\_vhost rabbitmq:3-management</span><br><span class=\"line\">docker run --name some-app --link some-rabbit:rabbit -d application-that-uses-rabbitmq</span><br></pre></td></tr></tbody></table></figure>\n<h2>Celery 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 官方镜像</span><br><span class=\"line\">docker run --link some-rabbit:rabbit --name some-celery -d celery:latest</span><br><span class=\"line\"># 检查集群状态</span><br><span class=\"line\">docker run --link some-rabbit:rabbit --rm celery celery status</span><br><span class=\"line\"># 启动celery worker</span><br><span class=\"line\">docker run --link some-redis:redis -e CELERY\\_BROKER\\_URL=redis://redis --name some-celery -d celery</span><br></pre></td></tr></tbody></table></figure>\n<h2>Hadoop 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用官方镜像</span><br><span class=\"line\">docker run -it sequenceiq/hadoop-docker:2.7.0 /etc/bootstrap.sh -bash</span><br></pre></td></tr></tbody></table></figure>\n<h2>Spark 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 官方</span><br><span class=\"line\">docker pull sequenceiq/spark:1.6.0</span><br><span class=\"line\">docker run -it -p 8088:8088 -p 8042:8042 -h sandbox sequenceiq/spark:1.6.0 bash</span><br></pre></td></tr></tbody></table></figure>\n<h2>Storm 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/denverdino/dockerstorm.git</span><br><span class=\"line\">cd docker-swarm/local</span><br><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">docker-compose scale supervisor=3</span><br><span class=\"line\">docker-compose start topology</span><br></pre></td></tr></tbody></table></figure>\n<h2>Elasticsearch 服务与应用</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d elesticsearch</span><br><span class=\"line\">docker run -d elesticsearch -Des.node.name=&quot;TestNode&quot;</span><br><span class=\"line\"># 自定义配置</span><br><span class=\"line\">docker run -d -v &quot;$PWD/config&quot;:/usr/share/elasticsearch/config elesticsearch</span><br><span class=\"line\"># 数据持久化</span><br><span class=\"line\">docker run -d -v &quot;$PWD/esdata&quot;:/usr/share/elasticsearch/data elesticsearch</span><br><span class=\"line\"># 9200 对外服务 9300 内部通信</span><br></pre></td></tr></tbody></table></figure>\n<h2>C/C++ 开发环境</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM gcc:4.9</span><br><span class=\"line\">COPY . /usr/src/myapp</span><br><span class=\"line\">WORKDIR /usr/src/myapp</span><br><span class=\"line\">RUN gcc -o myapp main.c</span><br><span class=\"line\">CMD [&quot;./myapp&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>构建并运行</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t gcc-image .</span><br><span class=\"line\">docker run -it --rm --name gcc-container gcc-image</span><br><span class=\"line\">docker run --rm --v &quot;$PWD&quot;:/usr/src/myapp -w /usr/src/myapp gcc:4.9 gcc -o myapp main.c</span><br></pre></td></tr></tbody></table></figure>\n<h2>LLVM</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull imiell/llvm</span><br></pre></td></tr></tbody></table></figure>\n<h2>Clang</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull bowery/clang</span><br></pre></td></tr></tbody></table></figure>\n<h2>Java 开发环境</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:7</span><br><span class=\"line\">COPY . /usr/src/javaapp</span><br><span class=\"line\">WORKDIR /usr/src/javaapp</span><br><span class=\"line\">RUN javac HelloWorld.java</span><br><span class=\"line\">CMD [&quot;java&quot;,&quot;HelloWorld&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>构建并运行</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t java-image</span><br><span class=\"line\">docker run -it --rm --name java-container java-image</span><br><span class=\"line\">docker run --rm -v &quot;$PWD&quot;:/usr/src/javaapp -w /usr/src/javaapp java:7 javac HelloWorld.java</span><br></pre></td></tr></tbody></table></figure>\n<h2>Python 开发环境</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:3-onbuild</span><br><span class=\"line\">CMD [&quot;python3.5&quot;,&quot;./py3-sameple.py&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<h2>PyPy</h2>\n<p>Dockerfile</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM pypy:3-onbuild</span><br><span class=\"line\">CMD [&quot;pypy3&quot;,&quot;./hi.py&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<h2>Javascript 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull node:4-onbuild</span><br></pre></td></tr></tbody></table></figure>\n<h2>Go 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull golang</span><br><span class=\"line\"># beego</span><br><span class=\"line\">git clone https://github.com/astaxie/beego.git</span><br><span class=\"line\"># Gogs</span><br><span class=\"line\">docker run --rm --name gogs -p 8300:3000 -p 8322:22 -v /srv/lxc/gogs/data:/data   gogs/gogs</span><br></pre></td></tr></tbody></table></figure>\n<h2>Php 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull php:5.6-cli</span><br></pre></td></tr></tbody></table></figure>\n<h2>Ruby 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ruby:2.1.2-onbuild</span><br><span class=\"line\">docker pull jruby:1.7.24-onbuild</span><br></pre></td></tr></tbody></table></figure>\n<h2>Perl 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull perl</span><br></pre></td></tr></tbody></table></figure>\n<h2>R 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull r-base</span><br></pre></td></tr></tbody></table></figure>\n<h2>Erlang 开发环境</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull erlang:latest</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["docker","实践"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【docker】【二】docker实践\ntags:\n  - docker\n  - 实践\ncategories: 技术笔记\ndate: 2018-08-20\nstatus: published\n\n---\n\n> 本文是记录常用的`docker`实例的笔记，尽量使用简单的文字介绍`docker`实例的使用。所有操作仅在CENTOS7上测试过，但是`docker`命令是通用的，不同的是配置文件目录位置或者系统命令。\n\n<!-- more -->\n\n## docker 常用系统镜像\n\n1. busybox\n2. alpine\n3. debian\n4. ubuntu\n5. centOS\n6. fedora\n\n## 为镜像添加SSH服务 基于ubuntu_14.04\n\n```bash\n# 示例中$为宿主机内，@代表docker容器内\n$ docker run -it ubuntu:14.04 /bin/bash\n@ apt-get update\n@ apt-get install openssh-server -y\n@ mkdir -p /var/run/sshd\n@ /usr/sbin/sshd -D &\n# 可以检查端口22 查看程序运行情况\n# 修改ssh服务安全登陆配置 取消pam登陆限制\n@ sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd\n@ mkdir /root/.ssh\n# 编辑文件 复制信息到文件中 可以通过 ssh-keygen-t rsa 命令生成\n@ vi /root/.ssh/authorized_keys\n# 创建自动启动脚本\n@ vi /run.sh\n@ chmod +x /run.sh\n@ exit \n```\n\nrun.sh 内容\n\n```bash\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n或者使用Dockerfile直接生成镜像：\n\n```Dockerfile\nFROM ubuntu:14.04\nMAINTAINER docker_user(user@docker.com)\nRUN apt-get update\nRUN apt-get install -y openssh-server\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\nRUN sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd\nADD authorized_keys /root/.ssh/authorized_keys\nADD run.sh /run.sh\nRUN chmod 755 /run.sh\nEXPOSE 22\nCMD [\"/run.sh\"]\n```\n\n使用命令生成镜像：\n\n```bash\n# 运行命令\ndocker build -t sshd:Docerfile\n```\n\n## apache WEB服务与应用\n\nDockerfile\n\n```Dockerfile\nFROM httpd:2.4\nCOPY ./public-html /usr/local/apache2/htdocs/\n```\n\n构建并运行\n\n```bash\n# 构建\ndocker build -t apache2-image .\n# 运行\ndocket run -it --rm --name apache-container -p 80:80 apache2-image\ndocker run -it --rm --name my-apache-app -p 80:80 -v \"$PWD\":/usr/local/apache2/htdocs/ httpd:2.4\n```\n\n使用自定义镜像\n\n```Dockerfile\nFROM sshd:Dockerfile\nMAINTAINER docker_user(user@docker.com)\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get -yq install apache2 && \\\n    rm -rf /var/lib/apt/lists/*\nRUN echo \"Asia/Shanghai\" > /etc/timezone && \\\n    dpkg-reconfigure -f noninteractive tzdata\nADD run.sh /run.sh\nRUN chmod 755 /*.sh\nRUN mkdir -p /var/lock/apache2 && mkdir -p /app && rm -rf /var/www/html && ln -s /app /var/www/html\nCOPY sample/ /app\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\nENV APACHE_PID_FILE /var/run/apache2.pid\nENV APACHE_RUN_DIR /var/run/apache2\nENV APACHE_LOCK_DIR /var/lock/apache2\nENV APACHE_SERVERADMIN admin@localhost\nENV APACHE_SERVERNAME localhost\nENV APACHE_SERVERALIAS docker.localhost\nENV APACHE_DOCUMENTROOT /var/www\nEXPOSE 80\nWORKDIR /app\nCMD [\"/run.sh\"]\n```\n\nrun.sh 内容\n```bash\n/usr/sbin/sshd &\nexec apache2 -D FOREGROUND\n```\n\n## nginx WEB服务与应用\n\nDockerfile\n\n```Dockerfile\nFROM nginx\nCOPY ./index.html /usr/sahre/nginx/html\n```\n\n构建并运行\n\n```bash\n# 构建\ndocker build -t my-nginx .\n# 运行\ndocker run --name nginx-container -d my-nginx\n# 直接运行\ndocker run --name nginx-container -p 80:80 -v index.html:/usr/share/nginx/html:ro -d nginx\n```\n\n## tomcat WEB服务与应用\n\nDockerfile\n\n```Dockerfile\nFROM sshd:Dockerfile\nMAINTAINER docker_user(user@docker.com)\nENV DEBIAN_FRONTEND noninteractive\nRUN echo \"Asia/Shanghai\" > /etc/timezone && \\\n    dpkg-reconfigure -f noninteractive tzdata\nRUN apt-get install -yq --no-install-recommends wget pwgen ca-certificates && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\nENV CATALINA_HOME /tomcat\nENV JAVA_HOME /jdk\nADD apache-tomcat-7.0.56 /tomcat\nADD jdk /jdk\nADD create_tomcat_admin_user.sh /create_tomcat_admin_user.sh\nADD run.sh /run.sh\nRUN chmod +x /*.sh\nRUN chmod +x /tomcat/bin/*.sh\nEXPOSE 8080\nCMD [\"/run.sh\"]\n```\n\ncreate_tomcat_admin_user.sh 内容\n\n```bash\nif[-f /.tomcat_admin_created ];then\necho \"Tomcat 'admin' user already created\"\nexit 0\nfi\nPASS=${TOMCAT_PASS:-$(pwgen -s 12 1)}\n_word=$([${TOMCAT_PASS}] && echo \"preset\" || echo \"random\")\necho \"=> Creating and admin user with a ${_word} password in Tomcat\"\nsed -i -r 's/<\\/tomcat-users>//' ${CATALINA_HOME}/conf/tomcat-users.xml\necho '<role rolename=\"manager-gui\"/>' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '<role rolename=\"manager-script\"/>' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '<role rolename=\"manager-jmx\"/>' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '<role rolename=\"admin-gui\"/>' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '<role rolename=\"admin-script\"/>' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '<user username=\"admin\" password=\"${PASS}\" roles=\"manager-gui,manager-script,manager-jmx,admin-gui,admin-script\" />' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '</tomcat-users>' >> ${CATALINA_HOME}/conf/tomcat_users.xml\necho '==> Done!'\ntouch /.tomcat_admin_created\necho '===================================================='\necho 'You can now configure to this Tomcat Server using'\necho \"\"\necho \"admin:${PASS}\"\necho \"\"\necho '===================================================='\n```\n\nrun.sh 内容\n\n```bash \nif [! -f /.tomcat_admin_created];then \n/create_tomcat_admin_user.sh & \nfi\n/usr/sbin/sshd -D &\nexec ${CATALINA_HOME}/bin/catalina.sh run\n```\n\n构建并运行\n\n```bash \n# 构架\ndocker build -t tomcat7.0:jdk1.6 .\n# 运行\ndocker run -d -P tomcat7.0:jdk1.6\n# 获取密码\ndocker logs <容器ID或者名称>\n```\n\n## jetty WEB服务与应用\n\n```bash  \ndocker run -d -p 80:8080 -p 443:8443 jetty\n```\n\n## LAMP 服务与应用\n\nLAMP 即 Linux + Apache + Mysql + Php\n\n```bash  \ndocker run -p 80:80 -it linode/lamp /bin/bash\n@ systemctl start apache2\n@ systemctl start mysql\n# 或者\ndocker run -p 80:80 -p 3306:3306 -d tutum/lamp\n```\n\n## 可持续开发与管理 服务与应用\n\nJenkins + Gitlab\n\n```bash  \ndocker run -p 8080:8080 -p 50000:50000 -v /your/path:/var/jenkins_home jenkins\ndocker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 23:23 --name gitlib --restart always --volume /srv/gitlib/config:/etc/gitlib --volume /srv/gitlib/logs:/var/log/gitlib --volume /srv/gitlib/data:/var/opt/gitlib gitlib/gitlib-ce:latest\n```\n\n## mysql 服务与应用\n\n```bash\n# 运行 自定义密码和配置文件\ndocker run --name hi-mysql -eMYSQL_ROOT_PASSWORD=123 -v /my/custom:/etc/mysql/conf.d -d mysql:5.6.40\n# 链接使用mysql\ndocker run --name some-app --link some-mysql:mysql -d application-that-uses-mysql\n# 备份\ndocker exec hi-mysql /bin/sh -c 'exec mysqldump -uroot -p\"123456\" <db名称> | gzip' > /root/backup/back-$(date +%Y%m%d).sql.gz\n# 备份所有\ndocker exec hi-mysql /bin/sh -c 'exec mysqldump --all-databases -uroot -p\"123456\" | gzip' > /root/backup/back-$(date +%Y%m%d).sql.gz\n```\n\n## mongo 服务与应用\n\n```bash\ndocker run --name mongo-container -d mongo\ndocker run -it --link mongo-container:db alpine sh\n# 直接进入数据命令交互模式\ndocker run -it --link mongo-container:db --entrypoint mongo mongo --host db\n```\n\nDockerfile\n\n```Dockerfile\nFROM sshd\nMAINTAINER docker_user(user@docker.com)\nRUN apt-get update && apt-get install -y mongodb pwgen && apt-get clean && rm -rf /var/lib/apt/lists/* \nRUN mkdir -p /data/db\nVOLUME /data/db\nENV AUTH yes\nADD run.sh /run.sh\nADD set_mongodb_password.sh /set_mongodb_password.sh\nRUN chmod 755 /*.sh\nEXPOSE 27017\nEXPOSE 28017\nCMD [\"/run.sh\"]\n```\n\nset_mongodb_password.sh 内容\n\n```bash\nif [-f /.mongodb_password_set];then\necho \"MongoDB password already set!\"\nexit 0\nfi\n/usr/bin/mongod --smallfiles --nojournal & \nPASS=${MONGODB_PASS:-$(pwgen -s 12 1)}\n_word=$([${MONGODB_PASS}] && echo \"preset\" || echo \"random\")\nRET=1\nwhile [[RET -ne 0]];do\necho \"=> Waiting for confirmation of MongoDB service startup\"\nsleep 5\nmongo admin --eval \"help\" > /dev/null 2>&1\nRET=$?\ndone\necho \"=> Creating an admin user with a ${_word} password in MongoDB\"\nmongo admin --eval \"db.addUser({user:'admin',pwd:'$PASS',roles:['userAdminAnyDatabase','dbAdminAnyDatabase']});\"\nmongo admin --eval \"db.shutdownServer();\"\necho \"=> Done!\"\ntouch /.mongodb_password_set\necho \"=================================================\"\necho \"You can now connect to this MongoDB server using\"\necho \"\"\necho \"mongo admin -u admin -p $PASS --host <host> --port <port>\"\necho \"\"\necho \"Please remember to change the above password as soon as possible!\"\necho \"=================================================\"\n```\n\nrun.sh 内容\n\n```bash\nif [-f /.mongodb_password_set];then\n/set_mongodb_password.sh\nfi \nif [\"$AUTH\" == \"yes\"];then\nexport mongodb='/usr/bin/mongod --nojournal --auth --httpinterface --rest'\nelse \nexport mongodb='/usr/bin/mongod --nojournal --httpinterface --rest'\nfi\nif [!-f /data/db/mongod.lock];then\neval $mongodb\nelse\nexport mongodb=$mongodb' --dbpath /data/db'\nrm /data/db/mongod.lock\nmongod --dbpath /data/db --repair && eval $mongodb\nfi\n```\n\n构建并运行\n\n```bash\n# 构建\ndocker build -t mongodb-image .\n# 运行\ndocker run -d -p 27017:17017 -p 28017:28017 mongodb\n# 使用 docker logs <容器名称或者ID> 获取密码\n# 指定密码运行\ndocker run -d -p 27017:17017 -p 28017:28017 -eMONGODB_PASS=\"mypass\" mongodb\n# 不需要密码\ndocker run -d -p 27017:17017 -p 28017:28017 -eAUTH=no mongodb\n```\n\n## redis 服务与应用\n\n```bash\ndocker run --name redis-container -d redis\n```\n\n## memcached 服务与应用\n\n```bash\n# 限制内存使用大小\ndocker run --name memcached-container -d memcached -m 64 \n```\n\n## CouchDB 服务与应用\n\n```bash\ndocker run -d --name couchdb-container couchdb\n```\n\n## Cassandra 服务与应用\n\n```bash \ndocker run --name my-cassandra -d cassandra:latest\n```\n\n搭建集群\n\n```bash \ndocker run --name my-cassandra -d -e CAS-SANDRA_BROADCAST_ADDRESS=10.42.42.42 -p 7000:7000 cassandra:latest\ndocker run --name my-cassandra -d -e CAS-SANDRA_BROADCAST_ADDRESS=10.43.43.43 -p 7000:7000 -e CASSANDRA_SEEDS=10.42.42.42 cassandra:latest\n```\n\n## RabbitMQ 服务与应用\n\n```bash \n# 安装以及链接命令\ndocker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3\ndocker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ_ERLANG_COOKIE='secret cookie here' rabbitmq:3\ndocker run -it --rm --link some-rabbit:my-rabbit -e RABBITMQ_ERLANG_COOKIE='secret cookie here' rabbitmq:3 bash\n@ rabbitmqctl -n rabbit@my-rabbit list_users\n\ndocker run -it --rm --link some-rabbit:my-rabbit -e RABBITMQ_ERLANG_COOKIE='secret cookie here' -e RABBITMQ_NODENAME=rabbit@my-rabbit rabbitmq:3 bash\n@ rabbitmqctl list_users\n# 管理\ndocker run -d --hostname my-rabbit --name some-rabbit -p 8080:15672 rabbitmq:3-management\n# 默认用户名密码 guest guest\ndocker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password rabbitmq:3-management\n# vhost \ndocker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost rabbitmq:3-management\ndocker run --name some-app --link some-rabbit:rabbit -d application-that-uses-rabbitmq\n```\n\n## Celery 服务与应用\n\n```bash \n# 官方镜像\ndocker run --link some-rabbit:rabbit --name some-celery -d celery:latest\n# 检查集群状态\ndocker run --link some-rabbit:rabbit --rm celery celery status\n# 启动celery worker\ndocker run --link some-redis:redis -e CELERY_BROKER_URL=redis://redis --name some-celery -d celery\n```\n\n## Hadoop 服务与应用\n\n```bash \n# 使用官方镜像\ndocker run -it sequenceiq/hadoop-docker:2.7.0 /etc/bootstrap.sh -bash\n```\n\n## Spark 服务与应用\n\n```bash \n# 官方\ndocker pull sequenceiq/spark:1.6.0\ndocker run -it -p 8088:8088 -p 8042:8042 -h sandbox sequenceiq/spark:1.6.0 bash\n```\n\n## Storm 服务与应用\n\n```bash \ngit clone https://github.com/denverdino/dockerstorm.git\ncd docker-swarm/local\ndocker-compose build\ndocker-compose up -d\ndocker-compose scale supervisor=3\ndocker-compose start topology\n```\n\n## Elasticsearch 服务与应用\n\n```bash \ndocker run -d elesticsearch\ndocker run -d elesticsearch -Des.node.name=\"TestNode\"\n# 自定义配置\ndocker run -d -v \"$PWD/config\":/usr/share/elasticsearch/config elesticsearch\n# 数据持久化\ndocker run -d -v \"$PWD/esdata\":/usr/share/elasticsearch/data elesticsearch\n# 9200 对外服务 9300 内部通信\n```\n\n## C/C++ 开发环境\n\nDockerfile\n```Dockerfile\nFROM gcc:4.9\nCOPY . /usr/src/myapp\nWORKDIR /usr/src/myapp\nRUN gcc -o myapp main.c\nCMD [\"./myapp\"]\n```\n\n构建并运行\n\n```bash \ndocker build -t gcc-image .\ndocker run -it --rm --name gcc-container gcc-image\ndocker run --rm --v \"$PWD\":/usr/src/myapp -w /usr/src/myapp gcc:4.9 gcc -o myapp main.c\n```\n\n## LLVM\n\n```bash \ndocker pull imiell/llvm\n```\n\n## Clang\n\n```bash \ndocker pull bowery/clang\n```\n\n## Java 开发环境\n\nDockerfile\n\n```Dockerfile\nFROM java:7\nCOPY . /usr/src/javaapp\nWORKDIR /usr/src/javaapp\nRUN javac HelloWorld.java\nCMD [\"java\",\"HelloWorld\"]\n```\n\n构建并运行\n\n```bash \ndocker build -t java-image\ndocker run -it --rm --name java-container java-image\ndocker run --rm -v \"$PWD\":/usr/src/javaapp -w /usr/src/javaapp java:7 javac HelloWorld.java\n```\n\n## Python 开发环境\n\nDockerfile\n\n```Dockerfile\nFROM python:3-onbuild\nCMD [\"python3.5\",\"./py3-sameple.py\"]\n```\n\n## PyPy\n\nDockerfile\n\n```Dockerfile\nFROM pypy:3-onbuild\nCMD [\"pypy3\",\"./hi.py\"]\n```\n\n## Javascript 开发环境\n\n```bash  \ndocker pull node:4-onbuild\n```\n\n## Go 开发环境\n\n```bash  \ndocker pull golang\n# beego\ngit clone https://github.com/astaxie/beego.git\n# Gogs\ndocker run --rm --name gogs -p 8300:3000 -p 8322:22 -v /srv/lxc/gogs/data:/data   gogs/gogs\n```\n\n## Php 开发环境\n\n```bash \ndocker pull php:5.6-cli\n```\n\n## Ruby 开发环境\n\n```bash \ndocker pull ruby:2.1.2-onbuild\ndocker pull jruby:1.7.24-onbuild\n```\n\n## Perl 开发环境\n\n```bash \ndocker pull perl\n```\n\n## R 开发环境\n\n```bash\ndocker pull r-base\n```\n\n## Erlang 开发环境\n\n```bash\ndocker pull erlang:latest\n```\n"},{"title":"【docker】【一】docker基础","excerpt":"<blockquote>\n<p>本文是记录常用的<code>docker</code>命令的笔记，尽量使用简单的文字介绍<code>docker</code>命令。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。</p>\n</blockquote>\n","url":"/2018/08/18/技术笔记/【docker】【一】docker基础","fromDate":"2018-08-18","category":"技术笔记","text":"<blockquote>\n<p>本文是记录常用的<code>docker</code>命令的笔记，尽量使用简单的文字介绍<code>docker</code>命令。所有操作仅在CENTOS7上测试过，但是<code>docker</code>命令是通用的，不同的是配置文件目录位置或者系统命令。</p>\n</blockquote>\n<!-- more -->\n<h2>docker 镜像相关</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接从docker hub镜像源下载镜像</span><br><span class=\"line\">docker pull &lt;镜像名称&gt;</span><br><span class=\"line\">e. docker pull mysql:5.6.40</span><br><span class=\"line\"># 列出镜像信息</span><br><span class=\"line\">docker images </span><br><span class=\"line\"># 添加镜像标签，实际上镜像标签指向的是原镜像文件</span><br><span class=\"line\">docker tag &lt;镜像名称&gt; &lt;tag名称&gt;</span><br><span class=\"line\">e. docker tag ubuntu:latest myubuntu:latest</span><br><span class=\"line\"># 获取镜像所有信息</span><br><span class=\"line\">docker inspect &lt;镜像名称&gt;</span><br><span class=\"line\"># 查看镜像历史</span><br><span class=\"line\">docker history &lt;镜像名称&gt;</span><br><span class=\"line\"># 搜所镜像</span><br><span class=\"line\">docker search &lt;搜索名称&gt;</span><br><span class=\"line\">e. docker search -s 3 nginx # 星级3以上的镜像</span><br><span class=\"line\"># 删除镜像</span><br><span class=\"line\">docker rmi &lt;镜像标签或者ID&gt;</span><br><span class=\"line\">e. docker rmi myubuntu:latest # 不会删除 ubuntu:latest 原始镜像</span><br><span class=\"line\">e. docker rmi -f myubuntu:latest # 强行删除</span><br><span class=\"line\"># 创建镜像</span><br><span class=\"line\">docker commit &lt;容器标签或者ID&gt;</span><br><span class=\"line\">e.docker commit -a &quot;作者&quot; -m &quot;这是一个, 提交消息&quot; &lt;容器ID&gt; &lt;新的镜像名以及标签&gt;</span><br><span class=\"line\"># 操作系统模板导入，可以直接从OPENVZ模板导入。</span><br><span class=\"line\"># http://open-vz.org/Download/templates/precreated</span><br><span class=\"line\">docker import &lt;文件名&gt;</span><br><span class=\"line\">e. cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04</span><br><span class=\"line\"># 存出和导入镜像</span><br><span class=\"line\">docker save -o &lt;存出文件名&gt; &lt;镜像名称&gt;</span><br><span class=\"line\">e. docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br><span class=\"line\">docker load --input &lt;导入文件名&gt;</span><br><span class=\"line\">docker load &lt; &lt;导入文件名&gt;</span><br><span class=\"line\">e. docker load --input ubuntu_14.04.tar</span><br><span class=\"line\">e. docker load &lt; ubuntu_14.04.tar</span><br><span class=\"line\"># 上传镜像</span><br><span class=\"line\">docker push &lt;镜像标签或者ID&gt;</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker 容器相关</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个容器，容器创建后处于停止状态</span><br><span class=\"line\">docker create -it &lt;镜像名称&gt;</span><br><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker start &lt;容器名称或者ID&gt;</span><br><span class=\"line\"># 新建并启动容器</span><br><span class=\"line\">docker run -it ubuntu /bin/bash # 交互</span><br><span class=\"line\">docker run -d ubuntu /bin/echo 'Hello World' # 后台运行</span><br><span class=\"line\"># 终止运行</span><br><span class=\"line\">docker stop &lt;容器名称或者ID&gt;</span><br><span class=\"line\">docker kill &lt;容器名称或者ID&gt; # 强行终止</span><br><span class=\"line\"># 重启容器</span><br><span class=\"line\">docker restart &lt;容器名称或者ID&gt;</span><br><span class=\"line\"># 进入容器</span><br><span class=\"line\">docker attach &lt;容器名称或者ID&gt; # 这样进入容器，多个终端时候会同步显示</span><br><span class=\"line\">docker exec -it &lt;容器名称或者ID&gt; /bin/bash # 推荐使用的方式</span><br><span class=\"line\"># 使用nsenter进入容器</span><br><span class=\"line\">nsenter --target &lt;pid&gt; --mount --uts --ipc --net --pid</span><br><span class=\"line\"># 删除容器</span><br><span class=\"line\">docker rm &lt;容器名称或者ID&gt;</span><br><span class=\"line\">e. docker rm -f abc # 强制删除</span><br><span class=\"line\">e. docker rm -l abc # 删除容器链接，但是保留容器</span><br><span class=\"line\">e. docker rm -v abc # 删除容器挂载的容器卷</span><br><span class=\"line\"># 导入导出容器</span><br><span class=\"line\">docker export -o &lt;导出文件&gt; &lt;导出容容器名称或者ID&gt;</span><br><span class=\"line\">docker import &lt;导入文件&gt; - test/ubuntu:v1.0</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker 私有仓库相关</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 搭建本地私有仓库，默认会把仓库文件存放在 `/tmp/registry` 可以通过-v挂载，把文件存储在本地</span><br><span class=\"line\">docker run -d -p 5000:5000 registry</span><br><span class=\"line\">docker run -d -p 5000:5000 -v /path/to/local/reg:/tmp/registry registry</span><br><span class=\"line\"># 上传镜像，先标记在提交</span><br><span class=\"line\">docker tag ubuntu:14.04 &lt;HOST_IP&gt;:5000/test</span><br><span class=\"line\">docker push &lt;HOST_IP&gt;:5000/test</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认情况下远程必须使用https连接才能进行推送，或者配置ssl或者按照如下任意一种方式，屏蔽即可。</span><br><span class=\"line\"># 一、 配置 docker daemon 启动参数以新人远程仓库</span><br><span class=\"line\"># DOCKER_OPTS=&quot;--insecure-registry &lt;HOST_IP&gt;:5000&quot;</span><br><span class=\"line\"># 二、 编辑 /usr/lib/systemd/system/docker.service </span><br><span class=\"line\"># ExecStart=/usr/bin/dockerd</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd --insecure-registry &lt;HOST_IP&gt;:5000</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载镜像</span><br><span class=\"line\">docker pull &lt;HOST_IP&gt;:5000/test</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker 数据管理相关</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 挂载数据卷</span><br><span class=\"line\">docker run -d -P --name web -v /path:/opt/webapp &lt;镜像标签或者是ID&gt;</span><br><span class=\"line\"># 挂载只读数据卷</span><br><span class=\"line\">docker run -d -P --name web -v /path:/opt/webapp:ro &lt;镜像标签或者是ID&gt;</span><br><span class=\"line\"># 创建一个数据卷容器</span><br><span class=\"line\">docker run -it -v /dbdata --name dbdata ubuntu</span><br><span class=\"line\"># 在其他容器使用数据卷容器</span><br><span class=\"line\">docker run -it --volumns-from dbdata --name db1 ubuntu</span><br><span class=\"line\"># 删除数据卷容器，需要在最后一个还挂载着数据卷的容器上使用，指定删除数据卷才行</span><br><span class=\"line\">docker rm -v &lt;数据卷容器ID&gt;</span><br><span class=\"line\"># 数据卷容器备份</span><br><span class=\"line\">docker run --volumns-from dbdata -v $(PWD):/backup --name worker ubuntu tar -cvf /backup/backup.tar /dbdata </span><br><span class=\"line\"># 数据卷容器恢复</span><br><span class=\"line\">docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span><br><span class=\"line\">docker run --volumns-from dbdata2 -v $(PWD):/backup busybox tar -xvf /backup/backup.tar</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker 容器通信</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 容器互联，避免占用多余的端口 </span><br><span class=\"line\">docker run -d --name db training/postgres # 创建数据库容器</span><br><span class=\"line\">docker run -d -P --name web --link db:db training/webapp python app.py # 链接数据库容器 --link 容器名称:别名</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker Dockerfile</h2>\n<p>以下是一个Dockerfile的样例：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This Dockerfile uses the ubuntu image</span><br><span class=\"line\"># VERSION 2 - EDITION 1</span><br><span class=\"line\"># Author: docker_user</span><br><span class=\"line\"># 使用的基础镜像</span><br><span class=\"line\">FROM &lt;image&gt;</span><br><span class=\"line\"># 环境变量</span><br><span class=\"line\">ENV HOST_IP 127.0.0.1</span><br><span class=\"line\"># 镜像元数据标签信息</span><br><span class=\"line\">LABEL version=1.0</span><br><span class=\"line\"># 维护者</span><br><span class=\"line\">MAINTAINER dockers_user &lt;docker_user@email.com&gt;</span><br><span class=\"line\"># 容器运行的用户 </span><br><span class=\"line\">USER root</span><br><span class=\"line\"># 暴露端口</span><br><span class=\"line\">EXPOSE 80 443</span><br><span class=\"line\"># 工作目录</span><br><span class=\"line\">WORKDIR /home/ws</span><br><span class=\"line\"># 增加文件 src 可以是URL 如果是tar文件直接被解压缩</span><br><span class=\"line\">ADD &lt;src&gt; &lt;desc&gt;</span><br><span class=\"line\">COPY &lt;src&gt; &lt;desc&gt; # 推荐</span><br><span class=\"line\"># 运行命令</span><br><span class=\"line\">RUN &lt;command&gt;</span><br><span class=\"line\">RUN echo &quot;hello world&quot; &gt;&gt; /tmp/a.txt</span><br><span class=\"line\">RUN yum install g++ &amp;&amp; echo &quot;Hello&quot; &amp;&amp; echo &quot;World&quot; \\</span><br><span class=\"line\">&amp;&amp; echo &quot;.&quot;</span><br><span class=\"line\"># 入口命令</span><br><span class=\"line\">ENTRYPOINT command param1 ... </span><br><span class=\"line\"># 镜像内使用的参数 </span><br><span class=\"line\">ARG &lt;name&gt;[=&lt;default value&gt;] </span><br><span class=\"line\"># 增加onbuild会使以此镜像为基础的镜像构建时运行这里边的命令</span><br><span class=\"line\">ONBUILD RUN echo &quot;Hello&quot;</span><br><span class=\"line\">STOPSIGNAL signal</span><br><span class=\"line\"># 禁止健康检查</span><br><span class=\"line\">HEALTHCHECK NONE</span><br><span class=\"line\">SHELL [&quot;/bin/sh&quot;,&quot;-c&quot;]</span><br><span class=\"line\"># 数据挂载点</span><br><span class=\"line\">VOLUME [&quot;/data&quot;]</span><br><span class=\"line\"># 运行命令</span><br><span class=\"line\">CMD /usr/sbin/nginx</span><br><span class=\"line\"># CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br></pre></td></tr></tbody></table></figure>\n<p>docker Dockerfile相关命令</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建镜像</span><br><span class=\"line\">docker build -t &lt;镜像标签&gt; &lt;Dockerfile所在路径&gt;</span><br><span class=\"line\"># 使用 .dockerignore 文件忽略文件</span><br></pre></td></tr></tbody></table></figure>\n<h2>docker 最佳实践</h2>\n<ol>\n<li>精简镜像用途</li>\n<li>选用合适的基础镜像</li>\n<li>提供足够清晰的命令注释和维护者信息</li>\n<li>正确的使用版本号</li>\n<li>减少镜像层数</li>\n<li>及时删除临时文件和缓存文件</li>\n<li>提高生产速度</li>\n<li>调整合理的指令顺序</li>\n<li>减少外部源的干扰</li>\n</ol>\n<h2>docker create 命令与容器运行模式相关的选项 常见</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create </span><br><span class=\"line\">-a # 绑定标准输入输出和错误</span><br><span class=\"line\">-d # 后台运行</span><br><span class=\"line\">-i # 指定标准输入打开</span><br><span class=\"line\">-p # 端口映射设置</span><br><span class=\"line\">-t # 分配一个伪终端 -it 一般联合使用</span><br><span class=\"line\">-v # 挂载驱动盘 宿主机:容器</span><br><span class=\"line\">-w # 默认工作目录</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["docker","基础"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【docker】【一】docker基础\ntags:\n  - docker\n  - 基础\ncategories: 技术笔记\ndate: 2018-08-18\nstatus: published\n\n---\n\n> 本文是记录常用的`docker`命令的笔记，尽量使用简单的文字介绍`docker`命令。所有操作仅在CENTOS7上测试过，但是`docker`命令是通用的，不同的是配置文件目录位置或者系统命令。\n\n<!-- more -->\n\n## docker 镜像相关\n\n```bash \n# 直接从docker hub镜像源下载镜像\ndocker pull <镜像名称>\ne. docker pull mysql:5.6.40\n# 列出镜像信息\ndocker images \n# 添加镜像标签，实际上镜像标签指向的是原镜像文件\ndocker tag <镜像名称> <tag名称>\ne. docker tag ubuntu:latest myubuntu:latest\n# 获取镜像所有信息\ndocker inspect <镜像名称>\n# 查看镜像历史\ndocker history <镜像名称>\n# 搜所镜像\ndocker search <搜索名称>\ne. docker search -s 3 nginx # 星级3以上的镜像\n# 删除镜像\ndocker rmi <镜像标签或者ID>\ne. docker rmi myubuntu:latest # 不会删除 ubuntu:latest 原始镜像\ne. docker rmi -f myubuntu:latest # 强行删除\n# 创建镜像\ndocker commit <容器标签或者ID>\ne.docker commit -a \"作者\" -m \"这是一个, 提交消息\" <容器ID> <新的镜像名以及标签>\n# 操作系统模板导入，可以直接从OPENVZ模板导入。\n# http://open-vz.org/Download/templates/precreated\ndocker import <文件名>\ne. cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04\n# 存出和导入镜像\ndocker save -o <存出文件名> <镜像名称>\ne. docker save -o ubuntu_14.04.tar ubuntu:14.04\ndocker load --input <导入文件名>\ndocker load < <导入文件名>\ne. docker load --input ubuntu_14.04.tar\ne. docker load < ubuntu_14.04.tar\n# 上传镜像\ndocker push <镜像标签或者ID>\n```\n\n## docker 容器相关\n\n```bash   \n# 创建一个容器，容器创建后处于停止状态\ndocker create -it <镜像名称>\n# 启动容器\ndocker start <容器名称或者ID>\n# 新建并启动容器\ndocker run -it ubuntu /bin/bash # 交互\ndocker run -d ubuntu /bin/echo 'Hello World' # 后台运行\n# 终止运行\ndocker stop <容器名称或者ID>\ndocker kill <容器名称或者ID> # 强行终止\n# 重启容器\ndocker restart <容器名称或者ID>\n# 进入容器\ndocker attach <容器名称或者ID> # 这样进入容器，多个终端时候会同步显示\ndocker exec -it <容器名称或者ID> /bin/bash # 推荐使用的方式\n# 使用nsenter进入容器\nnsenter --target <pid> --mount --uts --ipc --net --pid\n# 删除容器\ndocker rm <容器名称或者ID>\ne. docker rm -f abc # 强制删除\ne. docker rm -l abc # 删除容器链接，但是保留容器\ne. docker rm -v abc # 删除容器挂载的容器卷\n# 导入导出容器\ndocker export -o <导出文件> <导出容容器名称或者ID>\ndocker import <导入文件> - test/ubuntu:v1.0\n```\n\n## docker 私有仓库相关\n\n```bash  \n# 搭建本地私有仓库，默认会把仓库文件存放在 `/tmp/registry` 可以通过-v挂载，把文件存储在本地\ndocker run -d -p 5000:5000 registry\ndocker run -d -p 5000:5000 -v /path/to/local/reg:/tmp/registry registry\n# 上传镜像，先标记在提交\ndocker tag ubuntu:14.04 <HOST_IP>:5000/test\ndocker push <HOST_IP>:5000/test\n\n# 默认情况下远程必须使用https连接才能进行推送，或者配置ssl或者按照如下任意一种方式，屏蔽即可。\n# 一、 配置 docker daemon 启动参数以新人远程仓库\n# DOCKER_OPTS=\"--insecure-registry <HOST_IP>:5000\"\n# 二、 编辑 /usr/lib/systemd/system/docker.service \n# ExecStart=/usr/bin/dockerd\nExecStart=/usr/bin/dockerd --insecure-registry <HOST_IP>:5000\n\n# 重启docker\nsystemctl daemon-reload\nsystemctl restart docker\n\n# 下载镜像\ndocker pull <HOST_IP>:5000/test\n```\n\n## docker 数据管理相关\n\n```bash\n# 挂载数据卷\ndocker run -d -P --name web -v /path:/opt/webapp <镜像标签或者是ID>\n# 挂载只读数据卷\ndocker run -d -P --name web -v /path:/opt/webapp:ro <镜像标签或者是ID>\n# 创建一个数据卷容器\ndocker run -it -v /dbdata --name dbdata ubuntu\n# 在其他容器使用数据卷容器\ndocker run -it --volumns-from dbdata --name db1 ubuntu\n# 删除数据卷容器，需要在最后一个还挂载着数据卷的容器上使用，指定删除数据卷才行\ndocker rm -v <数据卷容器ID>\n# 数据卷容器备份\ndocker run --volumns-from dbdata -v $(PWD):/backup --name worker ubuntu tar -cvf /backup/backup.tar /dbdata \n# 数据卷容器恢复\ndocker run -v /dbdata --name dbdata2 ubuntu /bin/bash\ndocker run --volumns-from dbdata2 -v $(PWD):/backup busybox tar -xvf /backup/backup.tar\n```\n\n## docker 容器通信\n\n```bash\n# 容器互联，避免占用多余的端口 \ndocker run -d --name db training/postgres # 创建数据库容器\ndocker run -d -P --name web --link db:db training/webapp python app.py # 链接数据库容器 --link 容器名称:别名\n```\n\n## docker Dockerfile\n\n以下是一个Dockerfile的样例：\n```Dockerfile\n# This Dockerfile uses the ubuntu image\n# VERSION 2 - EDITION 1\n# Author: docker_user\n# 使用的基础镜像\nFROM <image>\n# 环境变量\nENV HOST_IP 127.0.0.1\n# 镜像元数据标签信息\nLABEL version=1.0\n# 维护者\nMAINTAINER dockers_user <docker_user@email.com>\n# 容器运行的用户 \nUSER root\n# 暴露端口\nEXPOSE 80 443\n# 工作目录\nWORKDIR /home/ws\n# 增加文件 src 可以是URL 如果是tar文件直接被解压缩\nADD <src> <desc>\nCOPY <src> <desc> # 推荐\n# 运行命令\nRUN <command>\nRUN echo \"hello world\" >> /tmp/a.txt\nRUN yum install g++ && echo \"Hello\" && echo \"World\" \\\n&& echo \".\"\n# 入口命令\nENTRYPOINT command param1 ... \n# 镜像内使用的参数 \nARG <name>[=<default value>] \n# 增加onbuild会使以此镜像为基础的镜像构建时运行这里边的命令\nONBUILD RUN echo \"Hello\"\nSTOPSIGNAL signal\n# 禁止健康检查\nHEALTHCHECK NONE\nSHELL [\"/bin/sh\",\"-c\"]\n# 数据挂载点\nVOLUME [\"/data\"]\n# 运行命令\nCMD /usr/sbin/nginx\n# CMD [\"nginx\",\"-g\",\"daemon off;\"]\n```\n\ndocker Dockerfile相关命令\n\n```bash\n# 创建镜像\ndocker build -t <镜像标签> <Dockerfile所在路径>\n# 使用 .dockerignore 文件忽略文件\n```\n\n## docker 最佳实践\n\n1. 精简镜像用途\n2. 选用合适的基础镜像\n3. 提供足够清晰的命令注释和维护者信息\n4. 正确的使用版本号\n5. 减少镜像层数\n6. 及时删除临时文件和缓存文件\n7. 提高生产速度\n8. 调整合理的指令顺序\n9. 减少外部源的干扰\n\n\n## docker create 命令与容器运行模式相关的选项 常见\n\n```bash\ndocker create \n-a # 绑定标准输入输出和错误\n-d # 后台运行\n-i # 指定标准输入打开\n-p # 端口映射设置\n-t # 分配一个伪终端 -it 一般联合使用\n-v # 挂载驱动盘 宿主机:容器\n-w # 默认工作目录\n```\n"},{"title":"【爱情】傲慢与偏见","excerpt":"<p>爱情走进婚姻的方式有很多种，甚至半途而废都屡见不鲜。</p>\n","url":"/2018/07/30/随笔/【爱情】傲慢与偏见","fromDate":"2018-07-30","category":"随笔","text":"<p>爱情走进婚姻的方式有很多种，甚至半途而废都屡见不鲜。</p>\n<!-- more -->\n<p>上周末，老婆的闺蜜们组团来看望她和我们将近一周岁的儿子。老婆一开始和我说的时候我其实挺忐忑的，结婚的女人对自己生活的不满，积累起来是一个很大的安全隐患。何况有两个婚后，情况多少雷同的人呢？我想可能我会是那个被‘唾弃’的对象。</p>\n<p>周五将要回家了，知道她们车次的时候，我还主动找了火车票。已经将近一年了，每周回家总是自己一个人，我是很想和她们一起回去的，路上我也可以探探口风，有没有开我的批斗会的意思。但确实没有火车票了，最终也只好分开走。庆幸火车仅仅晚了十分钟，下了火车就急忙打车回家了，一周不见，我很想和家人团聚。路上我就在想，怎么睡呢？家里有两个卧室一个客厅，妈不在，我和老婆睡一个屋子，她们两个睡一个屋子应该是很正常的吧。。。</p>\n<p>回到家我才知道，自己哪里有决定的权利，已经被分配到次卧一个人呆着了，给她们加了一个床，我就‘早早的’睡了，还是到凌晨4点左右才睡着。</p>\n<p>在我看来，那么长时间没见，应该是要促膝长谈的，没想到女人们的想法却是出去玩，看看化妆品，首饰，吃吃饭。聊天的时间反而没有那么多。到了晚上才稍微静下来聊聊天。</p>\n<p>也正是这次聊天，我才重新认识了我老婆的闺蜜，原来真的可以像是剧本里写的一样过日子。具体细节我想还是略过吧，但是可以参考一部电影，“傲慢与偏见”。只不过主角的年龄还要更小而已，只不过需要稍稍修改一下剧情：</p>\n<p>女主和乔治伟克翰相恋八年，而最终的归宿也并不是达西。也许是Mr.Collins 。对更多人来说，结局并不圆满，甚至有一些悲剧。</p>\n<p>但是爱情婚姻，并不仅仅是圆满这一个归宿，也许残缺会更加千古流芳，或者换个形容，会更加幸福。这些年和老婆在一起，我始终觉得爱情总会破碎的，关键在于你，使用仇恨填满破碎的间隙，还是用亲情修补这份残缺的爱情。庆幸的是，我们之间已经‘破镜重圆，缺一不可’了。</p>\n<p>也许和你相恋八年的那份刻骨铭心，会让你始终不能释怀。它在最美好的时候开始，结局虽然不好，但那是你最珍贵的爱情。铭记，一份最珍贵的爱情是很普通的事情。但是乔治始终是个渣男，你不可能把自己托付给它。Mr.Collins 是爱你的，他能容忍你前一段感情，能够给你慰藉，能够在你发脾气的时候开导你，和你一起生活，给你适当的自由，能够认识你身边的朋友，并且融入你的生活。我相信三五年之后，你想的不仅仅是你丢失了爱情，还有你已经沉浸了的亲情。生活也许会让你很不满意，甚至偶尔发脾气，但那时你已经害怕失去这样的生活了。你会感到幸福，甚至惊喜。</p>\n<p>爱情走进婚姻的方式有很多种，甚至半途而废都屡见不鲜。婚姻也并不仅仅是一双证书，破镜重圆也时有发生。不用预测将来的爱情，珍惜现在的每一刻。和爱你的人说一声，我也爱你，虽然我曾对你‘拳打脚踢’。</p>\n","hasMore":true,"tags":["傲慢与偏见"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【爱情】傲慢与偏见\ntags:\n  - 傲慢与偏见\ncategories: 随笔\ndate: 2018-07-30\nstatus: published\n\n---\n\n爱情走进婚姻的方式有很多种，甚至半途而废都屡见不鲜。\n\n<!-- more -->\n\n上周末，老婆的闺蜜们组团来看望她和我们将近一周岁的儿子。老婆一开始和我说的时候我其实挺忐忑的，结婚的女人对自己生活的不满，积累起来是一个很大的安全隐患。何况有两个婚后，情况多少雷同的人呢？我想可能我会是那个被‘唾弃’的对象。\n\n周五将要回家了，知道她们车次的时候，我还主动找了火车票。已经将近一年了，每周回家总是自己一个人，我是很想和她们一起回去的，路上我也可以探探口风，有没有开我的批斗会的意思。但确实没有火车票了，最终也只好分开走。庆幸火车仅仅晚了十分钟，下了火车就急忙打车回家了，一周不见，我很想和家人团聚。路上我就在想，怎么睡呢？家里有两个卧室一个客厅，妈不在，我和老婆睡一个屋子，她们两个睡一个屋子应该是很正常的吧。。。\n\n回到家我才知道，自己哪里有决定的权利，已经被分配到次卧一个人呆着了，给她们加了一个床，我就‘早早的’睡了，还是到凌晨4点左右才睡着。\n\n在我看来，那么长时间没见，应该是要促膝长谈的，没想到女人们的想法却是出去玩，看看化妆品，首饰，吃吃饭。聊天的时间反而没有那么多。到了晚上才稍微静下来聊聊天。\n\n也正是这次聊天，我才重新认识了我老婆的闺蜜，原来真的可以像是剧本里写的一样过日子。具体细节我想还是略过吧，但是可以参考一部电影，“傲慢与偏见”。只不过主角的年龄还要更小而已，只不过需要稍稍修改一下剧情：\n\n女主和乔治伟克翰相恋八年，而最终的归宿也并不是达西。也许是Mr.Collins 。对更多人来说，结局并不圆满，甚至有一些悲剧。\n\n但是爱情婚姻，并不仅仅是圆满这一个归宿，也许残缺会更加千古流芳，或者换个形容，会更加幸福。这些年和老婆在一起，我始终觉得爱情总会破碎的，关键在于你，使用仇恨填满破碎的间隙，还是用亲情修补这份残缺的爱情。庆幸的是，我们之间已经‘破镜重圆，缺一不可’了。\n\n也许和你相恋八年的那份刻骨铭心，会让你始终不能释怀。它在最美好的时候开始，结局虽然不好，但那是你最珍贵的爱情。铭记，一份最珍贵的爱情是很普通的事情。但是乔治始终是个渣男，你不可能把自己托付给它。Mr.Collins 是爱你的，他能容忍你前一段感情，能够给你慰藉，能够在你发脾气的时候开导你，和你一起生活，给你适当的自由，能够认识你身边的朋友，并且融入你的生活。我相信三五年之后，你想的不仅仅是你丢失了爱情，还有你已经沉浸了的亲情。生活也许会让你很不满意，甚至偶尔发脾气，但那时你已经害怕失去这样的生活了。你会感到幸福，甚至惊喜。\n\n爱情走进婚姻的方式有很多种，甚至半途而废都屡见不鲜。婚姻也并不仅仅是一双证书，破镜重圆也时有发生。不用预测将来的爱情，珍惜现在的每一刻。和爱你的人说一声，我也爱你，虽然我曾对你‘拳打脚踢’。\n"},{"title":"【JFINAL】 JFinal升级Jetty9","excerpt":"<blockquote>\n<p>[2019-03-11更新] 新版已经更新到了9所以这篇文章就多余了。</p>\n</blockquote>\n<p>原因就不记录了，就简单的记录一下修改的地方。\n注意： 一切修改基于JFinal-3.4-SNAPSHOT源码，仅供参考</p>\n","url":"/2018/07/16/技术笔记/【JFINAL】 JFinal升级Jetty9","fromDate":"2018-07-16","category":"技术笔记","text":"<blockquote>\n<p>[2019-03-11更新] 新版已经更新到了9所以这篇文章就多余了。</p>\n</blockquote>\n<p>原因就不记录了，就简单的记录一下修改的地方。\n注意： 一切修改基于JFinal-3.4-SNAPSHOT源码，仅供参考</p>\n<!-- more -->\n<h2>pom修改依赖</h2>\n<p>更换关于jetty的版本信息</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;9.3.23.v20180228&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;9.3.23.v20180228&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt; </span><br><span class=\"line\">&lt;!-- jsp support by jetty --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jetty-jsp&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;9.2.24.v20180105&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>\n<h2>增加服务类 （此类网络收集，未测试所有环境）</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 直接放到Jfinal同名包里即可</span><br><span class=\"line\">package com.jfinal.server;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.net.DatagramSocket;</span><br><span class=\"line\">import java.net.ServerSocket;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.eclipse.jetty.server.HttpConfiguration;</span><br><span class=\"line\">import org.eclipse.jetty.server.HttpConnectionFactory;</span><br><span class=\"line\">import org.eclipse.jetty.server.Server;</span><br><span class=\"line\">import org.eclipse.jetty.server.ServerConnector;</span><br><span class=\"line\">import org.eclipse.jetty.server.SessionManager;</span><br><span class=\"line\">import org.eclipse.jetty.server.session.HashSessionManager;</span><br><span class=\"line\">import org.eclipse.jetty.server.session.SessionHandler;</span><br><span class=\"line\">import org.eclipse.jetty.webapp.WebAppContext;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.jfinal.core.Const;</span><br><span class=\"line\">import com.jfinal.kit.FileKit;</span><br><span class=\"line\">import com.jfinal.kit.LogKit;</span><br><span class=\"line\">import com.jfinal.kit.PathKit;</span><br><span class=\"line\">import com.jfinal.kit.StrKit;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Jetty9Server implements IServer{</span><br><span class=\"line\">  </span><br><span class=\"line\">    public static void main(String[] args) {</span><br><span class=\"line\">        new Jetty9Server(&quot;src/main/webapp&quot;,8080,&quot;/&quot;).start();</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    private String webAppDir;</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\">    private String context;</span><br><span class=\"line\">    private boolean running = false;</span><br><span class=\"line\">    private Server server;</span><br><span class=\"line\">    private WebAppContext webApp;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public Jetty9Server(String webAppDir, int port, String context) {</span><br><span class=\"line\">        if (webAppDir == null) {</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Invalid webAppDir of web server: &quot; + webAppDir);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        if (port &lt; 0 || port &gt; 65535) {</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Invalid port of web server: &quot; + port);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        if (StrKit.isBlank(context)) {</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Invalid context of web server: &quot; + context);</span><br><span class=\"line\">        }</span><br><span class=\"line\"> </span><br><span class=\"line\">        this.webAppDir = webAppDir;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">        this.context = context;</span><br><span class=\"line\">        // this.scanIntervalSeconds = scanIntervalSeconds;</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    public void start() {</span><br><span class=\"line\">        if (!running) {</span><br><span class=\"line\">            try {</span><br><span class=\"line\">                running = true;</span><br><span class=\"line\">                doStart();</span><br><span class=\"line\">            } catch (Exception e) {</span><br><span class=\"line\">                System.err.println(e.getMessage());</span><br><span class=\"line\">                LogKit.error(e.getMessage(), e);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    public void stop() {</span><br><span class=\"line\">        if (running) {</span><br><span class=\"line\">            try {server.stop();} catch (Exception e) {LogKit.error(e.getMessage(), e);}</span><br><span class=\"line\">            running = false;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    private void doStart() {</span><br><span class=\"line\">        if (!available(port)) {</span><br><span class=\"line\">            throw new IllegalStateException(&quot;port: &quot; + port + &quot; already in use!&quot;);</span><br><span class=\"line\">        }</span><br><span class=\"line\"> </span><br><span class=\"line\">        deleteSessionData();</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(&quot;Starting JFinal &quot; + Const.JFINAL_VERSION);</span><br><span class=\"line\">        server = new Server();</span><br><span class=\"line\">        HttpConfiguration http_config = new HttpConfiguration();</span><br><span class=\"line\">        ServerConnector connector = new ServerConnector(server,new HttpConnectionFactory(http_config));</span><br><span class=\"line\">        connector.setReuseAddress(true);</span><br><span class=\"line\">        connector.setIdleTimeout(30000);</span><br><span class=\"line\">        connector.setPort(port);</span><br><span class=\"line\">        server.addConnector(connector);</span><br><span class=\"line\"> </span><br><span class=\"line\">        webApp = new WebAppContext();</span><br><span class=\"line\">        // 在启动过程中允许抛出异常终止启动并退出 JVM</span><br><span class=\"line\">        webApp.setThrowUnavailableOnStartupException(true);    </span><br><span class=\"line\">        webApp.setContextPath(context);</span><br><span class=\"line\">        // webApp.setWar(webAppDir);</span><br><span class=\"line\">        webApp.setResourceBase(webAppDir); </span><br><span class=\"line\">        webApp.setContextPath(context);</span><br><span class=\"line\">        webApp.setMaxFormContentSize(81920000);</span><br><span class=\"line\">        webApp.getInitParams().put(&quot;org.eclipse.jetty.servlet.Default.dirAllowed&quot;, &quot;false&quot;);</span><br><span class=\"line\">        webApp.getInitParams().put(&quot;org.eclipse.jetty.servlet.Default.useFileMappedBuffer&quot;, &quot;true&quot;);</span><br><span class=\"line\">        webApp.getInitParams().put(&quot;org.eclipse.jetty.server.Request.maxFormContentSize&quot;, &quot;-1&quot;);</span><br><span class=\"line\">        persistSession(webApp);</span><br><span class=\"line\"> </span><br><span class=\"line\">        server.setHandler(webApp);</span><br><span class=\"line\">        try {</span><br><span class=\"line\">            System.out.println(&quot;Starting web server on port: &quot; + port);</span><br><span class=\"line\">            server.start();</span><br><span class=\"line\">            System.out.println(&quot;Starting Complete. Welcome To The JFinal World :)&quot;);</span><br><span class=\"line\">            server.join();</span><br><span class=\"line\">        } catch (Exception e) {</span><br><span class=\"line\">            LogKit.error(e.getMessage(), e);</span><br><span class=\"line\">            System.exit(100);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    private void deleteSessionData() {</span><br><span class=\"line\">        try {</span><br><span class=\"line\">            FileKit.delete(new File(getStoreDir()));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        catch (Exception e) {</span><br><span class=\"line\">            LogKit.logNothing(e);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    private String getStoreDir() {</span><br><span class=\"line\">        String storeDir = PathKit.getWebRootPath() + &quot;/../../session_data&quot; + context;</span><br><span class=\"line\">        if (&quot;\\\\&quot;.equals(File.separator)) {</span><br><span class=\"line\">            storeDir = storeDir.replaceAll(&quot;/&quot;, &quot;\\\\\\\\&quot;);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        return storeDir;</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    private void persistSession(WebAppContext webApp) {</span><br><span class=\"line\">        String storeDir = getStoreDir();</span><br><span class=\"line\">        SessionManager sm = webApp.getSessionHandler().getSessionManager();</span><br><span class=\"line\">        if (sm instanceof HashSessionManager) {</span><br><span class=\"line\">            try {</span><br><span class=\"line\">                ((HashSessionManager)sm).setStoreDirectory(new File(storeDir));</span><br><span class=\"line\">            } catch (IOException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            return ;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        HashSessionManager hsm = new HashSessionManager();</span><br><span class=\"line\">        try {</span><br><span class=\"line\">            hsm.setStoreDirectory(new File(storeDir));</span><br><span class=\"line\">        } catch (IOException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        SessionHandler sh = new SessionHandler();</span><br><span class=\"line\">        sh.setSessionManager(hsm);</span><br><span class=\"line\">        webApp.setSessionHandler(sh);</span><br><span class=\"line\">    }</span><br><span class=\"line\"> </span><br><span class=\"line\">    private static boolean available(int port) {</span><br><span class=\"line\">        if (port &lt;= 0) {</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Invalid start port: &quot; + port);</span><br><span class=\"line\">        }</span><br><span class=\"line\"> </span><br><span class=\"line\">        ServerSocket ss = null;</span><br><span class=\"line\">        DatagramSocket ds = null;</span><br><span class=\"line\">        try {</span><br><span class=\"line\">            ss = new ServerSocket(port);</span><br><span class=\"line\">            ss.setReuseAddress(true);</span><br><span class=\"line\">            ds = new DatagramSocket(port);</span><br><span class=\"line\">            ds.setReuseAddress(true);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        } catch (IOException e) {</span><br><span class=\"line\">            LogKit.logNothing(e);</span><br><span class=\"line\">        } finally {</span><br><span class=\"line\">            if (ds != null) {</span><br><span class=\"line\">                ds.close();</span><br><span class=\"line\">            }</span><br><span class=\"line\"> </span><br><span class=\"line\">            if (ss != null) {</span><br><span class=\"line\">                try {</span><br><span class=\"line\">                    ss.close();</span><br><span class=\"line\">                } catch (IOException e) {</span><br><span class=\"line\">                    // should not be thrown, just detect port available.</span><br><span class=\"line\">                    LogKit.logNothing(e);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["JFinal","Jetty9"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【JFINAL】 JFinal升级Jetty9\ntags:\n  - JFinal\n  - Jetty9\ncategories: 技术笔记\ndate: 2018-07-16\nstatus: published\n\n---\n\n> [2019-03-11更新] 新版已经更新到了9所以这篇文章就多余了。\n\n原因就不记录了，就简单的记录一下修改的地方。\n注意： 一切修改基于JFinal-3.4-SNAPSHOT源码，仅供参考\n\n<!-- more -->\n\n## pom修改依赖\n\n更换关于jetty的版本信息\n\n```xml\n<dependency>\n    <groupId>org.eclipse.jetty</groupId>\n    <artifactId>jetty-server</artifactId>\n    <version>9.3.23.v20180228</version>\n    <scope>provided</scope>\n</dependency>\n<dependency>\n    <groupId>org.eclipse.jetty</groupId>\n    <artifactId>jetty-webapp</artifactId>\n    <version>9.3.23.v20180228</version>\n    <scope>provided</scope>\n</dependency> \n<!-- jsp support by jetty -->\n<dependency>\n    <groupId>org.eclipse.jetty</groupId>\n    <artifactId>jetty-jsp</artifactId>\n    <version>9.2.24.v20180105</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n## 增加服务类 （此类网络收集，未测试所有环境）\n\n```java\n// 直接放到Jfinal同名包里即可\npackage com.jfinal.server;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.DatagramSocket;\nimport java.net.ServerSocket;\n\nimport org.eclipse.jetty.server.HttpConfiguration;\nimport org.eclipse.jetty.server.HttpConnectionFactory;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.SessionManager;\nimport org.eclipse.jetty.server.session.HashSessionManager;\nimport org.eclipse.jetty.server.session.SessionHandler;\nimport org.eclipse.jetty.webapp.WebAppContext;\n\nimport com.jfinal.core.Const;\nimport com.jfinal.kit.FileKit;\nimport com.jfinal.kit.LogKit;\nimport com.jfinal.kit.PathKit;\nimport com.jfinal.kit.StrKit;\n\npublic class Jetty9Server implements IServer{\n  \n    public static void main(String[] args) {\n        new Jetty9Server(\"src/main/webapp\",8080,\"/\").start();\n    }\n \n    private String webAppDir;\n    private int port;\n    private String context;\n    private boolean running = false;\n    private Server server;\n    private WebAppContext webApp;\n \n    public Jetty9Server(String webAppDir, int port, String context) {\n        if (webAppDir == null) {\n            throw new IllegalStateException(\"Invalid webAppDir of web server: \" + webAppDir);\n        }\n        if (port < 0 || port > 65535) {\n            throw new IllegalArgumentException(\"Invalid port of web server: \" + port);\n        }\n        if (StrKit.isBlank(context)) {\n            throw new IllegalStateException(\"Invalid context of web server: \" + context);\n        }\n \n        this.webAppDir = webAppDir;\n        this.port = port;\n        this.context = context;\n        // this.scanIntervalSeconds = scanIntervalSeconds;\n    }\n \n    public void start() {\n        if (!running) {\n            try {\n                running = true;\n                doStart();\n            } catch (Exception e) {\n                System.err.println(e.getMessage());\n                LogKit.error(e.getMessage(), e);\n            }\n        }\n    }\n \n    public void stop() {\n        if (running) {\n            try {server.stop();} catch (Exception e) {LogKit.error(e.getMessage(), e);}\n            running = false;\n        }\n    }\n \n    private void doStart() {\n        if (!available(port)) {\n            throw new IllegalStateException(\"port: \" + port + \" already in use!\");\n        }\n \n        deleteSessionData();\n \n        System.out.println(\"Starting JFinal \" + Const.JFINAL_VERSION);\n        server = new Server();\n        HttpConfiguration http_config = new HttpConfiguration();\n        ServerConnector connector = new ServerConnector(server,new HttpConnectionFactory(http_config));\n        connector.setReuseAddress(true);\n        connector.setIdleTimeout(30000);\n        connector.setPort(port);\n        server.addConnector(connector);\n \n        webApp = new WebAppContext();\n        // 在启动过程中允许抛出异常终止启动并退出 JVM\n        webApp.setThrowUnavailableOnStartupException(true);    \n        webApp.setContextPath(context);\n        // webApp.setWar(webAppDir);\n        webApp.setResourceBase(webAppDir); \n        webApp.setContextPath(context);\n        webApp.setMaxFormContentSize(81920000);\n        webApp.getInitParams().put(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n        webApp.getInitParams().put(\"org.eclipse.jetty.servlet.Default.useFileMappedBuffer\", \"true\");\n        webApp.getInitParams().put(\"org.eclipse.jetty.server.Request.maxFormContentSize\", \"-1\");\n        persistSession(webApp);\n \n        server.setHandler(webApp);\n        try {\n            System.out.println(\"Starting web server on port: \" + port);\n            server.start();\n            System.out.println(\"Starting Complete. Welcome To The JFinal World :)\");\n            server.join();\n        } catch (Exception e) {\n            LogKit.error(e.getMessage(), e);\n            System.exit(100);\n        }\n        return;\n    }\n \n    private void deleteSessionData() {\n        try {\n            FileKit.delete(new File(getStoreDir()));\n        }\n        catch (Exception e) {\n            LogKit.logNothing(e);\n        }\n    }\n \n    private String getStoreDir() {\n        String storeDir = PathKit.getWebRootPath() + \"/../../session_data\" + context;\n        if (\"\\\\\".equals(File.separator)) {\n            storeDir = storeDir.replaceAll(\"/\", \"\\\\\\\\\");\n        }\n        return storeDir;\n    }\n \n    private void persistSession(WebAppContext webApp) {\n        String storeDir = getStoreDir();\n        SessionManager sm = webApp.getSessionHandler().getSessionManager();\n        if (sm instanceof HashSessionManager) {\n            try {\n                ((HashSessionManager)sm).setStoreDirectory(new File(storeDir));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return ;\n        }\n        HashSessionManager hsm = new HashSessionManager();\n        try {\n            hsm.setStoreDirectory(new File(storeDir));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        SessionHandler sh = new SessionHandler();\n        sh.setSessionManager(hsm);\n        webApp.setSessionHandler(sh);\n    }\n \n    private static boolean available(int port) {\n        if (port <= 0) {\n            throw new IllegalArgumentException(\"Invalid start port: \" + port);\n        }\n \n        ServerSocket ss = null;\n        DatagramSocket ds = null;\n        try {\n            ss = new ServerSocket(port);\n            ss.setReuseAddress(true);\n            ds = new DatagramSocket(port);\n            ds.setReuseAddress(true);\n            return true;\n        } catch (IOException e) {\n            LogKit.logNothing(e);\n        } finally {\n            if (ds != null) {\n                ds.close();\n            }\n \n            if (ss != null) {\n                try {\n                    ss.close();\n                } catch (IOException e) {\n                    // should not be thrown, just detect port available.\n                    LogKit.logNothing(e);\n                }\n            }\n        }\n        return false;\n    }\n}\n\n```\n"},{"title":"【第三方评论】构建基于码云的第三方评论体系","excerpt":"<blockquote>\n<p>2020-01-06 更新：不再使用这种方式接入评论，采用自建服务的方式进行。</p>\n</blockquote>\n<p>我这个博客有一个缺点就是不支持评论，主题本身并不支持第三方评论。对于博客来说，少了评论就少了很多乐趣。于是在网上搜索相关内容，一篇文章吸引了我，主要内容是通过 <code>github issue</code> 进行评论的存储，而且好处显而易见，评论的人群首先集中于开发人员，另外就是非侵入式并不需要本地的后台支持。</p>\n","url":"/2018/05/12/技术笔记/【第三方评论】构建基于码云的第三方评论体系","fromDate":"2018-05-12","category":"技术笔记","text":"<blockquote>\n<p>2020-01-06 更新：不再使用这种方式接入评论，采用自建服务的方式进行。</p>\n</blockquote>\n<p>我这个博客有一个缺点就是不支持评论，主题本身并不支持第三方评论。对于博客来说，少了评论就少了很多乐趣。于是在网上搜索相关内容，一篇文章吸引了我，主要内容是通过 <code>github issue</code> 进行评论的存储，而且好处显而易见，评论的人群首先集中于开发人员，另外就是非侵入式并不需要本地的后台支持。</p>\n<!-- more -->\n<p>当然已经有人使用<code>github</code>实现了一个版本的第三方评论体系，我觉得非常不错。但是唯一的问题就是<code>github</code>访问速度，有时候某些网段访问还是比较慢，登陆都比较费劲，我还是想寻求一些替代品。最终我决定使用自己使用了很长时间码云平台代替<code>github</code>实现第三方评论体系。说干就干，下面是具体方法：</p>\n<h2>实现步骤</h2>\n<h3>申请第三方登陆需要的id和secret</h3>\n<p>通过码云登陆后 -&gt; 设置 -&gt; 数据管理 -&gt; 第三方应用 -&gt; 创建应用 -&gt; 选择 user_info 和 notes 权限即可 -&gt; 最终得到 Client ID 和 Client Secret</p>\n<p><img src=\"/attaches/9121572814FDB2E89627A2133B5F028B.png\" alt=\"设置图片\" class=\"img-responsive\" /></p>\n<p>注意：测试的时候，可以使用本地的回掉地址。我在应用回掉地址中就填写的 <code>http://127.0.0.1:8080</code>，在使用的时候回掉地址必须是这个被填写的回掉地址。（虽然在gitee中有回掉地址参数，但是并没有什么作用，仅仅是验证是不是同样的回掉地址而已）</p>\n<h3>在配置文件中引入需要的内容</h3>\n<p>在hexo工程的 <code>_config.yml</code> 配置文件中，引入配置脚本，除了申请第三方应用之外，还需要创建一个仓库，用于存储评论的内容。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments: </span><br><span class=\"line\">  clientId: &lt;your client id&gt;</span><br><span class=\"line\">  clientSecret: &lt;your client secret&gt;</span><br><span class=\"line\">  user: &lt;your user id&gt;</span><br><span class=\"line\">  repo: &lt;you repo id&gt;</span><br></pre></td></tr></tbody></table></figure>\n<h3>在模板配置中添加相应的参数</h3>\n<p>配置都在外部开启了，仅仅需要在模板中开启评论功能就行了。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments: </span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></tbody></table></figure>\n<h3>增加js全局变量</h3>\n<p>可以在引用js的时候加入变量，而我是使用js全局变量的形式引用的。类似这样：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 模板是否开启评论</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> COMMENTS_ENABLE = &lt;%- theme.comments.enable %&gt;; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 引入参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> COMMENTS_CLIENT_ID = &quot;&lt;%- config.comments.clientId %&gt;&quot;; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> COMMENTS_CLIENT_SECRET = &quot;&lt;%- config.comments.clientSecret %&gt;&quot;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> COMMENTS_USER = &quot;&lt;%- config.comments.user %&gt;&quot;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> COMMENTS_REPO = &quot;&lt;%- config.comments.repo %&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 文章是否开启评论</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> POST_ISSUE = POST_ISSUE || <span class=\"keyword\">false</span>;</span><br></pre></td></tr></tbody></table></figure>\n<h3>引入js文件</h3>\n<p>我自己封装了相关内容，可以直接引用或者是参考，中间的链接是使用<code>nginx</code>代理的。配置如下：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /gitee/ {</span><br><span class=\"line\">    proxy_pass http://gitee.com/;</span><br><span class=\"line\">    proxy_set_header Host 'git.oschina.net';</span><br><span class=\"line\">    proxy_set_header X-Real-IP $remote\\_addr;</span><br><span class=\"line\">    proxy\\_set\\_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    proxy_set_header User-Agent 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36';</span><br><span class=\"line\">    client_max_body_size 1024m;</span><br><span class=\"line\">    client_body_buffer_size 1024m;</span><br><span class=\"line\">    proxy_connect_timeout 30;</span><br><span class=\"line\">    proxy_send_timeout 30;</span><br><span class=\"line\">    proxy_read_timeout 60;</span><br><span class=\"line\">    proxy_buffer_size 256k;</span><br><span class=\"line\">    proxy_buffers 4 512k;</span><br><span class=\"line\">    proxy_busy_buffers_size 512k;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>js引用地址：<code>&lt;script src=&quot;http://www.zhoyq.com/js/comments.js&quot;&gt;&lt;/script&gt;</code> 。目前仅实现了基础功能：登陆、评论、退出。（当然这个只是一个针对本站的实现，如果你想使用，我建议你基于这个文件修改一下）</p>\n<h3>在页面确定的位置上增加评论内容</h3>\n<p>也就是在页面上文章需要评论的位置，增加一层div。当然样式什么的就只能自己完成了。或者参考本站。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if ( post.issue &amp;&amp; theme.comments.enable){ %&gt;</span><br><span class=\"line\">    &lt;section id=&quot;comments&quot;&gt;</span><br><span class=\"line\">        &lt;div id=&quot;gitee_comments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">&lt;% } %&gt; </span><br></pre></td></tr></tbody></table></figure>\n<h3>修改js配置参数</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在文章页面增加参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> POST_ISSUE = &quot;&lt;%- post.issue %&gt;&quot;;</span><br><span class=\"line\"><span class=\"comment\">// 在全局增加初始化</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(POST_ISSUE &amp;&amp; COMMENTS_ENABLE){</span><br><span class=\"line\">    L.init(COMMENTS_CLIENT_ID,COMMENTS_CLIENT_SECRET,COMMENTS_USER,COMMENTS_REPO,POST_ISSUE,&quot;gitee_comments&quot;);</span><br><span class=\"line\">} </span><br></pre></td></tr></tbody></table></figure>\n<h2>使用</h2>\n<p>在写文章的时候直接增加相应配置 <code>issue</code> 即可，需要自己在repo中增加对应issue。</p>\n<p>也许会在将来增加相关内容：回复评论功能、删除评论功能、修改评论功能、时间显示优化、评论增加多媒体内容、可以使用md评论等。</p>\n","hasMore":true,"tags":["第三方评论","码云"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【第三方评论】构建基于码云的第三方评论体系\ntags:\n  - 第三方评论\n  - 码云\ncategories: 技术笔记\ndate: 2018-05-12\nstatus: published\n\n---\n\n> 2020-01-06 更新：不再使用这种方式接入评论，采用自建服务的方式进行。\n\n我这个博客有一个缺点就是不支持评论，主题本身并不支持第三方评论。对于博客来说，少了评论就少了很多乐趣。于是在网上搜索相关内容，一篇文章吸引了我，主要内容是通过 `github issue` 进行评论的存储，而且好处显而易见，评论的人群首先集中于开发人员，另外就是非侵入式并不需要本地的后台支持。\n\n<!-- more -->\n\n当然已经有人使用`github`实现了一个版本的第三方评论体系，我觉得非常不错。但是唯一的问题就是`github`访问速度，有时候某些网段访问还是比较慢，登陆都比较费劲，我还是想寻求一些替代品。最终我决定使用自己使用了很长时间码云平台代替`github`实现第三方评论体系。说干就干，下面是具体方法：\n\n## 实现步骤\n\n### 申请第三方登陆需要的id和secret\n\n通过码云登陆后 -> 设置 -> 数据管理 -> 第三方应用 -> 创建应用 -> 选择 user_info 和 notes 权限即可 -> 最终得到 Client ID 和 Client Secret \n\n![设置图片](../../DATA/setting.png)\n\n注意：测试的时候，可以使用本地的回掉地址。我在应用回掉地址中就填写的 `http://127.0.0.1:8080`，在使用的时候回掉地址必须是这个被填写的回掉地址。（虽然在gitee中有回掉地址参数，但是并没有什么作用，仅仅是验证是不是同样的回掉地址而已）\n\n### 在配置文件中引入需要的内容\n\n在hexo工程的 `_config.yml` 配置文件中，引入配置脚本，除了申请第三方应用之外，还需要创建一个仓库，用于存储评论的内容。\n\n```yml\ncomments: \n  clientId: <your client id>\n  clientSecret: <your client secret>\n  user: <your user id>\n  repo: <you repo id>\n```\n\n### 在模板配置中添加相应的参数\n\n配置都在外部开启了，仅仅需要在模板中开启评论功能就行了。\n\n```yml\ncomments: \n  enable: true\n```\n\n### 增加js全局变量\n\n可以在引用js的时候加入变量，而我是使用js全局变量的形式引用的。类似这样：\n\n```javascript\n  // 模板是否开启评论\n  var COMMENTS_ENABLE = <%- theme.comments.enable %>; \n\n  // 引入参数\n  var COMMENTS_CLIENT_ID = \"<%- config.comments.clientId %>\"; \n  var COMMENTS_CLIENT_SECRET = \"<%- config.comments.clientSecret %>\";\n  var COMMENTS_USER = \"<%- config.comments.user %>\";\n  var COMMENTS_REPO = \"<%- config.comments.repo %>\";\n\n  // 文章是否开启评论\n  var POST_ISSUE = POST_ISSUE || false;\n```\n\n### 引入js文件\n\n我自己封装了相关内容，可以直接引用或者是参考，中间的链接是使用`nginx`代理的。配置如下：\n\n```conf\nlocation /gitee/ {\n    proxy_pass http://gitee.com/;\n    proxy_set_header Host 'git.oschina.net';\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header User-Agent 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36';\n    client_max_body_size 1024m;\n    client_body_buffer_size 1024m;\n    proxy_connect_timeout 30;\n    proxy_send_timeout 30;\n    proxy_read_timeout 60;\n    proxy_buffer_size 256k;\n    proxy_buffers 4 512k;\n    proxy_busy_buffers_size 512k;\n}\n\n```\njs引用地址：`<script src=\"http://www.zhoyq.com/js/comments.js\"></script>` 。目前仅实现了基础功能：登陆、评论、退出。（当然这个只是一个针对本站的实现，如果你想使用，我建议你基于这个文件修改一下）\n\n### 在页面确定的位置上增加评论内容\n\n也就是在页面上文章需要评论的位置，增加一层div。当然样式什么的就只能自己完成了。或者参考本站。\n```html \n<% if ( post.issue && theme.comments.enable){ %>\n    <section id=\"comments\">\n        <div id=\"gitee_comments\"></div>\n    </section>\n<% } %> \n```\n \n### 修改js配置参数 \n\n```javascript\n// 在文章页面增加参数\nvar POST_ISSUE = \"<%- post.issue %>\";\n// 在全局增加初始化\nif(POST_ISSUE && COMMENTS_ENABLE){\n    L.init(COMMENTS_CLIENT_ID,COMMENTS_CLIENT_SECRET,COMMENTS_USER,COMMENTS_REPO,POST_ISSUE,\"gitee_comments\");\n} \n```\n\n## 使用\n\n在写文章的时候直接增加相应配置 `issue` 即可，需要自己在repo中增加对应issue。\n\n也许会在将来增加相关内容：回复评论功能、删除评论功能、修改评论功能、时间显示优化、评论增加多媒体内容、可以使用md评论等。\n"},{"title":"【MYSQL】MySQL语句记录","url":"/2018/04/17/技术笔记/【MYSQL】MySQL语句记录","fromDate":"2018-04-17","category":"技术笔记","text":"<!-- more -->\n<h2>限制ip访问</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVALEGES ON *.* TO 'root'@'127.0.0.1' IDENTIFIED BY '&lt;密码&gt;';</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></tbody></table></figure>\n<h2>限制用户最大连接数</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all on customer.* TO '数据库名'@'localhost' with MAX_USER_CONNECTIONS 4 MAX_CONNECTIONS_PER_HOUR 1000;</span><br></pre></td></tr></tbody></table></figure>\n<h2>查看所有链接客户端</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select substring_index(host, ':', 1) as host_name , state , count(*) from infomation_schema.processlist group by state,host_name;</span><br></pre></td></tr></tbody></table></figure>\n<p>持续更新...</p>\n","hasMore":true,"tags":["MYSQL"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【MYSQL】MySQL语句记录\ntags:\n  - MYSQL\ncategories: 技术笔记\ndate: 2018-04-17\nstatus: published\n\n---\n\n<!-- more -->\n\n## 限制ip访问\n\n```sql\nGRANT ALL PRIVALEGES ON *.* TO 'root'@'127.0.0.1' IDENTIFIED BY '<密码>';\nflush privileges;\n```\n\n## 限制用户最大连接数\n\n```sql\ngrant all on customer.* TO '数据库名'@'localhost' with MAX_USER_CONNECTIONS 4 MAX_CONNECTIONS_PER_HOUR 1000;\n```\n\n## 查看所有链接客户端\n\n```sql\nselect substring_index(host, ':', 1) as host_name , state , count(*) from infomation_schema.processlist group by state,host_name;\n```\n\n持续更新...\n"},{"title":"【MYSQL】部署mysql5.6并管理用户","excerpt":"<h2>检查</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql status</span><br><span class=\"line\">lsof -i:3306</span><br></pre></td></tr></tbody></table></figure>","url":"/2018/04/17/技术笔记/【MYSQL】部署mysql5.6并管理用户","fromDate":"2018-04-17","category":"技术笔记","text":"<h2>检查</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql status</span><br><span class=\"line\">lsof -i:3306</span><br></pre></td></tr></tbody></table></figure>\n<!-- more -->\n<h2>安装</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装源</span><br><span class=\"line\"></span><br><span class=\"line\"># wget https://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\"># yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\"># or</span><br><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否安装成功</span><br><span class=\"line\">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改安装的mysql版本 5.7 -&gt; 5.6 将5.6下的enable设置成1 5.7下的enable设置成0即可</span><br><span class=\"line\">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class=\"line\"># or </span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\">yum-config-manager --enable mysql56-community</span><br><span class=\"line\">yum-config-manager --disable mysql57-community</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">yum install mysql-community-server</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start mysqld</span><br><span class=\"line\"># 查看启动状态</span><br><span class=\"line\">systemctl status mysqld</span><br><span class=\"line\"># 开机启动</span><br><span class=\"line\">systemctl enable mysqld</span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure>\n<h2>配置</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># mysql安全设置</span><br><span class=\"line\">mysql_secure_installation;</span><br><span class=\"line\"># 正常情况下root是没有密码的，直接回车就可以进入。</span><br><span class=\"line\"># 如果登陆不成功，可以使用配置里的修改密码部分重置密码。</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; create user 'sa'@'%' identified by 'password'; # 普通用户</span><br><span class=\"line\">mysql&gt; create user 'admin'@'%' identified by 'password'; # 管理员用户</span><br><span class=\"line\"># 如果出错 有可能数据库已经存在了这个用户 这时候直接修改密码就好了 使用update语句</span><br><span class=\"line\"></span><br><span class=\"line\"># 授予权限</span><br><span class=\"line\">mysql&gt; grant select,insert,update,delete on *.* to 'sa'@'%';</span><br><span class=\"line\">mysql&gt; grant all on *.* to 'admin'@'%';</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新权限</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以直接增加用户和权限</span><br><span class=\"line\"># mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' IDENTIFIED BY 'userpass' WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看编码</span><br><span class=\"line\">mysql&gt; show variables like '%character%'; # 设置见附录</span><br></pre></td></tr></tbody></table></figure>\n<h2>解决问题</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改root密码 root 默认密码是空的 可以直接本地登录</span><br><span class=\"line\"># 解决 Access denied for user 'root'@'localhost' 以及修改密码</span><br><span class=\"line\">systemctl stop mysqld</span><br><span class=\"line\">mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\">mysql -u root</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; UPDATE user SET Password=PASSWORD('newpassword') where USER='root';</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">mysql&gt; quit</span><br><span class=\"line\">mysqladmin shutdown -u root -p # 关闭安全模式</span><br><span class=\"line\">systemctl start mysqld</span><br><span class=\"line\"></span><br><span class=\"line\"># 备份</span><br><span class=\"line\"></span><br><span class=\"line\">mysqldump --socket=/home/data/mysql/mysql.sock --single-transaction=TRUE -u root -p xxx &gt; data.sql</span><br><span class=\"line\"></span><br><span class=\"line\"># 还原</span><br><span class=\"line\"></span><br><span class=\"line\">mysql --socket=/home/data/mysql/mysql.sock -u root -p xxx &lt; data.sql</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意 socket目录 在my.cnf中配置 </span><br></pre></td></tr></tbody></table></figure>\n<h2>附录</h2>\n<p>默认文件路径：</p>\n<p>配置文件：/etc/my.cnf\n日志文件：/var/log//var/log/mysqld.log\n服务启动脚本：/usr/lib/systemd/system/mysqld.service\nsocket文件：/var/run/mysqld/mysqld.pid</p>\n<p>编码：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">init_connect='SET NAMES utf8'</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf-8</span><br></pre></td></tr></tbody></table></figure>\n<p><small>注意：如果有安装相关异常，或者本文有任何问题。欢迎指正。联系方式：<a href=\"mailto:feedback@zhoyq.com\">feedback@zhoyq.com</a></small></p>\n","hasMore":true,"tags":["mysql","CentOS"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【MYSQL】部署mysql5.6并管理用户\ntags:\n  - mysql\n  - CentOS\ncategories: 技术笔记\ndate: 2018-04-17\nstatus: published\n\n---\n\n## 检查\n\n```bash\nservice mysql status\nlsof -i:3306\n```\n\n<!-- more -->\n\n## 安装\n\n```bash\n# 安装源\n\n# wget https://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm\n# yum localinstall mysql57-community-release-el7-11.noarch.rpm\n# or\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\n\n# 检查是否安装成功\nyum repolist enabled | grep \"mysql.*-community.*\"\n\n# 修改安装的mysql版本 5.7 -> 5.6 将5.6下的enable设置成1 5.7下的enable设置成0即可\nvim /etc/yum.repos.d/mysql-community.repo\n# or \nyum repolist all | grep mysql\nyum-config-manager --enable mysql56-community\nyum-config-manager --disable mysql57-community\n\n# 安装\nyum install mysql-community-server\n\n# 启动\nsystemctl start mysqld\n# 查看启动状态\nsystemctl status mysqld\n# 开机启动\nsystemctl enable mysqld\nsystemctl daemon-reload\n\n```\n\n## 配置\n\n```bash\n\n# mysql安全设置\nmysql_secure_installation;\n# 正常情况下root是没有密码的，直接回车就可以进入。\n# 如果登陆不成功，可以使用配置里的修改密码部分重置密码。\n\n# 创建用户\nmysql\nmysql> create user 'sa'@'%' identified by 'password'; # 普通用户\nmysql> create user 'admin'@'%' identified by 'password'; # 管理员用户\n# 如果出错 有可能数据库已经存在了这个用户 这时候直接修改密码就好了 使用update语句\n\n# 授予权限\nmysql> grant select,insert,update,delete on *.* to 'sa'@'%';\nmysql> grant all on *.* to 'admin'@'%';\n\n# 刷新权限\nmysql> flush privileges;\n\n# 可以直接增加用户和权限\n# mysql> GRANT ALL PRIVILEGES ON *.* TO 'username'@'%' IDENTIFIED BY 'userpass' WITH GRANT OPTION;\n\n# 查看编码\nmysql> show variables like '%character%'; # 设置见附录\n\n```\n\n## 解决问题\n\n```bash\n# 修改root密码 root 默认密码是空的 可以直接本地登录\n# 解决 Access denied for user 'root'@'localhost' 以及修改密码\nsystemctl stop mysqld\nmysqld_safe --user=mysql --skip-grant-tables --skip-networking &\nmysql -u root\nmysql> use mysql;\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';\nmysql> FLUSH PRIVILEGES;\nmysql> quit\nmysqladmin shutdown -u root -p # 关闭安全模式\nsystemctl start mysqld\n\n# 备份\n\nmysqldump --socket=/home/data/mysql/mysql.sock --single-transaction=TRUE -u root -p xxx > data.sql\n\n# 还原\n\nmysql --socket=/home/data/mysql/mysql.sock -u root -p xxx < data.sql\n\n# 注意 socket目录 在my.cnf中配置 \n\n```\n\n## 附录\n\n默认文件路径：\n\n配置文件：/etc/my.cnf\n日志文件：/var/log//var/log/mysqld.log\n服务启动脚本：/usr/lib/systemd/system/mysqld.service\nsocket文件：/var/run/mysqld/mysqld.pid\n\n编码：\n\n```bash\n# 修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n[mysql]\ndefault-character-set=utf-8\n```\n\n<small>注意：如果有安装相关异常，或者本文有任何问题。欢迎指正。联系方式：<feedback@zhoyq.com></small>\n\n"},{"title":"【经济学人】Leaders the next frontier","excerpt":"<p>Brain-computer interfaces may change what it means to be human.\nTechnologies are often <strong>billed as</strong><sup>[1]</sup> transformative.\nFor William Kochevar, <strong>the term is justified</strong><sup>[2]</sup>.\nMr Kochevar is <strong>paralysed</strong><sup>[3]</sup> below the shoulders after a cycling accident, yet has managed to feed himself by his own hand.\nThis remarkable feat is partly thanks to <strong>electrodes</strong><sup>[4]</sup>, implanted in his right arm, which stimulate muscles.\nBut the real magic lies higher up.</p>\n","url":"/2018/04/16/转载/【经济学人】Leaders the next frontier","fromDate":"2018-04-16","category":"转载","text":"<p>Brain-computer interfaces may change what it means to be human.\nTechnologies are often <strong>billed as</strong><sup>[1]</sup> transformative.\nFor William Kochevar, <strong>the term is justified</strong><sup>[2]</sup>.\nMr Kochevar is <strong>paralysed</strong><sup>[3]</sup> below the shoulders after a cycling accident, yet has managed to feed himself by his own hand.\nThis remarkable feat is partly thanks to <strong>electrodes</strong><sup>[4]</sup>, implanted in his right arm, which stimulate muscles.\nBut the real magic lies higher up.</p>\n<!-- more -->\n<p>Mr Kochevar can control his arm using the power of thought.\nHis intention to move is reflected in neural activity in his <strong>motor cortex</strong><sup>[5]</sup>; these signals are detected by implants in his brain and processed into commands to activate the electrodes in his arms.\nAn ability to decode thought in this way may sound like science <strong>fiction</strong><sup>[6]</sup>.\nBut brain-computer interfaces (BCIs) like the BrainGate system used by Mr Kochevar provide evidence that mind-control can work.\nResearchers are able to tell what words and images people have heard and seen from neural activity alone.\nInformation can also be encoded and used to stimulate the brain.\nOver 300,000 people have <strong>cochlear implants</strong><sup>[7]</sup>, which help them to hear by converting sound into electrical signals and sending them into the brain.\nScientists have “injected” data into monkeys' head, instructing them to perform actions via electrical <strong>pulses</strong><sup>[8]</sup>.</p>\n<p>As our Technology Quarterly in this issue explains, the pace of research into BCIs and the scale of its ambition are increasing.\nBoth America's armed forces and Silicon Valley are starting to focus on the brain.\nFacebook dreams of thought-to-text typing.\nKernel, a startup, has $100m to spend on neurotechnology.\nElon Musk has formed a firm called Neuralink; he thinks that, if humanity is to survive the advent of artificial intelligence, it needs an upgrade.</p>\n<p><strong>Entrepreneurs envisage</strong><sup>[9]</sup> a world in which people can communicate <strong>telepathically</strong><sup>[10]</sup>, with each other and with machines, or acquire superhuman abilities, such as hearing at very high <strong>frequencies</strong><sup>[11]</sup>.\nThese powers, if they ever materialise, are decades away.\nBut well before then, BCIs could open the door to remarkable new applications.\nImagine stimulating the visual <strong>cortex</strong><sup>[12]</sup> to help the blind, forging new neural connections in stroke <strong>victims</strong><sup>[13]</sup> or monitoring the brain for signs of depression.\nBy turning the firing of neurons into a resource to be harnessed, BCIs may change the idea of what it means to be human.\n<strong>Sceptics scoff</strong><sup>[14]</sup>.\nTaking medical BCIs out of the lab into clinical practice has proved very difficult.\nThe BrainGate system used by Mr Kochevar was developed more than ten years ago, but only a handful of people have tried it out.\nTurning implants into consumer products is even harder to imagine.\nThe path to the mainstream is blocked by three formidable barriers—technological, scientific and commercial.</p>\n<small>\n[1] be billed as 被宣传为 \n[2] the term is justified 这个词恰如其分 \n[3] paralysed 瘫痪 \n[4] electrodes 电极 \n[5] motor cortex 运动皮质（层） \n[6] fiction 小说 \n[7] cochlear implants 人工耳蜗植入 \n[8] pulses 脉冲 \n[9] Entrepreneurs envisage 企业家设想 \n[10] telepathically 心灵感应 \n[11] frequencies 频率 \n[12] cortex 皮质 \n[13] victims 受害者 \n[14] Sceptics scoff（嘲笑） 怀疑论者不屑一顾\n</small> \n<small> \n内容来自 [可可英语](http://www.kekenet.com) \n<hr>\n<p><a href=\"http://www.kekenet.com/Article/201804/548917.shtml\">20180413</a>、<a href=\"http://www.kekenet.com/Article/201804/548918.shtml\">20180414</a>\n</small></p>\n","hasMore":true,"tags":["经济学人","脑机接口"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【经济学人】Leaders the next frontier\ntags:\n  - 经济学人\n  - 脑机接口\ncategories: 转载\ndate: 2018-04-16\nstatus: published\n\n---\n\nBrain-computer interfaces may change what it means to be human.\nTechnologies are often **billed as**<sup>[1]</sup> transformative.\nFor William Kochevar, **the term is justified**<sup>[2]</sup>.\nMr Kochevar is **paralysed**<sup>[3]</sup> below the shoulders after a cycling accident, yet has managed to feed himself by his own hand.\nThis remarkable feat is partly thanks to **electrodes**<sup>[4]</sup>, implanted in his right arm, which stimulate muscles.\nBut the real magic lies higher up.\n\n<!-- more -->\n \nMr Kochevar can control his arm using the power of thought.\nHis intention to move is reflected in neural activity in his **motor cortex**<sup>[5]</sup>; these signals are detected by implants in his brain and processed into commands to activate the electrodes in his arms.\nAn ability to decode thought in this way may sound like science **fiction**<sup>[6]</sup>.\nBut brain-computer interfaces (BCIs) like the BrainGate system used by Mr Kochevar provide evidence that mind-control can work.\nResearchers are able to tell what words and images people have heard and seen from neural activity alone.\nInformation can also be encoded and used to stimulate the brain.\nOver 300,000 people have **cochlear implants**<sup>[7]</sup>, which help them to hear by converting sound into electrical signals and sending them into the brain.\nScientists have “injected” data into monkeys' head, instructing them to perform actions via electrical **pulses**<sup>[8]</sup>.\n\nAs our Technology Quarterly in this issue explains, the pace of research into BCIs and the scale of its ambition are increasing.\nBoth America's armed forces and Silicon Valley are starting to focus on the brain.\nFacebook dreams of thought-to-text typing.\nKernel, a startup, has $100m to spend on neurotechnology.\nElon Musk has formed a firm called Neuralink; he thinks that, if humanity is to survive the advent of artificial intelligence, it needs an upgrade.\n \n**Entrepreneurs envisage**<sup>[9]</sup> a world in which people can communicate **telepathically**<sup>[10]</sup>, with each other and with machines, or acquire superhuman abilities, such as hearing at very high **frequencies**<sup>[11]</sup>.\nThese powers, if they ever materialise, are decades away.\nBut well before then, BCIs could open the door to remarkable new applications.\nImagine stimulating the visual **cortex**<sup>[12]</sup> to help the blind, forging new neural connections in stroke **victims**<sup>[13]</sup> or monitoring the brain for signs of depression.\nBy turning the firing of neurons into a resource to be harnessed, BCIs may change the idea of what it means to be human.\n**Sceptics scoff**<sup>[14]</sup>.\nTaking medical BCIs out of the lab into clinical practice has proved very difficult.\nThe BrainGate system used by Mr Kochevar was developed more than ten years ago, but only a handful of people have tried it out.\nTurning implants into consumer products is even harder to imagine.\nThe path to the mainstream is blocked by three formidable barriers—technological, scientific and commercial.\n\n<small>\n[1] be billed as 被宣传为 \n[2] the term is justified 这个词恰如其分 \n[3] paralysed 瘫痪 \n[4] electrodes 电极 \n[5] motor cortex 运动皮质（层） \n[6] fiction 小说 \n[7] cochlear implants 人工耳蜗植入 \n[8] pulses 脉冲 \n[9] Entrepreneurs envisage 企业家设想 \n[10] telepathically 心灵感应 \n[11] frequencies 频率 \n[12] cortex 皮质 \n[13] victims 受害者 \n[14] Sceptics scoff（嘲笑） 怀疑论者不屑一顾\n</small> \n \n<small> \n内容来自 [可可英语](http://www.kekenet.com) \n<hr>\n\n[20180413](http://www.kekenet.com/Article/201804/548917.shtml)、[20180414](http://www.kekenet.com/Article/201804/548918.shtml) \n</small>\n\n"},{"title":"【地图】【二】构建强大的Editor类（百度篇）","excerpt":"<blockquote>\n<p>文章所有涉及到的内容均可以在 https://gitee.com/zhoyq/examples/tree/master/mapExt 中获取。本文会先后以百度地图v3.0和高德地图v1.4.5为基础进行进行开发。</p>\n</blockquote>\n","url":"/2018/04/15/源码解读/【地图】【二】构建强大的Editor类（百度篇）","fromDate":"2018-04-15","category":"源码解读","text":"<blockquote>\n<p>文章所有涉及到的内容均可以在 https://gitee.com/zhoyq/examples/tree/master/mapExt 中获取。本文会先后以百度地图v3.0和高德地图v1.4.5为基础进行进行开发。</p>\n</blockquote>\n<!-- more -->\n<h2>原因</h2>\n<p>百度地图可以在对象上直接启动和关闭编辑，比较方便。由于之前写的曲线覆盖物没有在对象上挂载编辑方法所以针对曲线覆盖物写了这个编辑器类，并且适配了所有覆盖物，以简化编辑操作。</p>\n<h2>原理</h2>\n<p>使用原有覆盖物，在其基础上创建一个新的覆盖物，同步更新数据。</p>\n<h2>特性</h2>\n<p>一次编辑多个覆盖物，不区分覆盖物类型。</p>\n<h2>百度实例</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 程序里用到一些别名 自己比较熟悉的 也可以不用这一步 同时修改那部分代码即可</span></span><br><span class=\"line\">    <span class=\"comment\">// 增加一些方法名的别名</span></span><br><span class=\"line\">    BMap.Map.prototype.bind = BMap.Map.prototype.addEventListener;</span><br><span class=\"line\">    BMap.Map.prototype.unbind = BMap.Map.prototype.removeEventListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    BMap.Marker.prototype.bind = BMap.Marker.prototype.addEventListener;</span><br><span class=\"line\">    BMap.Marker.prototype.unbind = BMap.Marker.prototype.removeEventListener;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BMap.Polygon.prototype.bind = BMap.Polygon.prototype.addEventListener;</span><br><span class=\"line\">    BMap.Polygon.prototype.unbind = BMap.Polygon.prototype.removeEventListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    BMap.Circle.prototype.bind = BMap.Circle.prototype.addEventListener;</span><br><span class=\"line\">    BMap.Circle.prototype.unbind = BMap.Circle.prototype.removeEventListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    BMap.Polyline.prototype.bind = BMap.Polyline.prototype.addEventListener;</span><br><span class=\"line\">    BMap.Polyline.prototype.unbind = BMap.Polyline.prototype.removeEventListener;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 控制点对象</span></span><br><span class=\"line\">   <span class=\"comment\">// 用于存储生成的控制点信息</span></span><br><span class=\"line\">   <span class=\"comment\">// 内部使用类 一般不会在外部调用</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> ControlPoint(obj,type,map,num,count,cp,ref){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._obj = obj; <span class=\"comment\">// 所属对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._type = type; <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._map = map; <span class=\"comment\">// 所属地图对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._key = num; <span class=\"comment\">// 这个值和数组里的位置对应</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._keyNum = count;<span class=\"comment\">//总数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cp){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._entity = cp; <span class=\"comment\">// 控制点</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._entity);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._entity.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ref){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._ref = ref; <span class=\"comment\">// 参考</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._ref);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._ref.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(me._ref&amp;&amp;me._entity){</span><br><span class=\"line\">      <span class=\"keyword\">function</span> __ddd(e){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = me._ref.getPath();</span><br><span class=\"line\">        path[me._key] = me._entity.getPosition();</span><br><span class=\"line\">        me._ref.setPath(path);</span><br><span class=\"line\">      }</span><br><span class=\"line\">      me._entity.bind(<span class=\"string\">'dragstart'</span>,__ddd);</span><br><span class=\"line\">      me._entity.bind(<span class=\"string\">'dragging'</span>,__ddd);</span><br><span class=\"line\">      me._entity.bind(<span class=\"string\">'dragend'</span>,__ddd);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 圆形的控制对象</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> ControlCircle(obj,type,map,num,count,ref,center,point){ <span class=\"comment\">// center,point 是圆形控制器点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._obj = obj; <span class=\"comment\">// 所属对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._type = type; <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._map = map; <span class=\"comment\">// 所属地图对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._key = num; <span class=\"comment\">// 这个值和数组里的位置对应</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._keyNum = count;<span class=\"comment\">//总数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ref){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._ref = ref; <span class=\"comment\">// 参考</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._ref);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._ref.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(center){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._center = center;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._center);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._center.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(point){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._point = point;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._point);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._point.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(center&amp;&amp;point&amp;&amp;ref){</span><br><span class=\"line\">      <span class=\"keyword\">function</span> __cdd(e){</span><br><span class=\"line\">        <span class=\"comment\">// 移动中心 获取中心位置 获取两点距离 重设圆心半径</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> buf = me._center.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dis = BMapLib.GeoUtils.getDistance(me._center.getPosition(),me._point.getPosition());</span><br><span class=\"line\">        me._ref.setCenter(buf);</span><br><span class=\"line\">        me._ref.setRadius(dis);</span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"keyword\">function</span> __pdd(e){</span><br><span class=\"line\">        <span class=\"comment\">// 移动边界 获取距离 重设半径即可</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> dis = BMapLib.GeoUtils.getDistance(me._center.getPosition(),me._point.getPosition());</span><br><span class=\"line\">        me._ref.setRadius(dis);</span><br><span class=\"line\">      }</span><br><span class=\"line\">      me._center.bind(<span class=\"string\">'dragstart'</span>,__cdd);</span><br><span class=\"line\">      me._center.bind(<span class=\"string\">'dragging'</span>,__cdd);</span><br><span class=\"line\">      me._center.bind(<span class=\"string\">'dragend'</span>,__cdd);</span><br><span class=\"line\">      me._point.bind(<span class=\"string\">'dragstart'</span>,__pdd);</span><br><span class=\"line\">      me._point.bind(<span class=\"string\">'dragging'</span>,__pdd);</span><br><span class=\"line\">      me._point.bind(<span class=\"string\">'dragend'</span>,__pdd);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 曲线的控制对象</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> ControlCurve(obj,type,map,num,count,ref,mainPoint,cp1,cp2){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._obj = obj; <span class=\"comment\">// 所属对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._type = type; <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._map = map; <span class=\"comment\">// 所属地图对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._key = num; <span class=\"comment\">// 这个值和数组里的位置对应</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._keyNum = count;<span class=\"comment\">//总数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._lineOpt = {</span><br><span class=\"line\">      strokeColor:<span class=\"string\">'#f00'</span>,</span><br><span class=\"line\">      strokeWeight:2,</span><br><span class=\"line\">      strokeOpacity:0.6,</span><br><span class=\"line\">      strokeStyle:<span class=\"string\">'dashed'</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ref){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._ref = ref; <span class=\"comment\">// 参考</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._ref);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._ref.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mainPoint){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._mp = mainPoint;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._mp);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._mp.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cp1){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp1 = cp1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp1_mp = <span class=\"keyword\">new</span> BMap.Polyline([<span class=\"keyword\">this</span>._mp.getPosition(),<span class=\"keyword\">this</span>._cp1.getPosition()],<span class=\"keyword\">this</span>._lineOpt);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._cp1);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._cp1_mp);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp1_mp.hide();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp1.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cp2){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp2 = cp2;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp2_mp = <span class=\"keyword\">new</span> BMap.Polyline([<span class=\"keyword\">this</span>._mp.getPosition(),<span class=\"keyword\">this</span>._cp2.getPosition()],<span class=\"keyword\">this</span>._lineOpt);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._cp2);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._map.addOverlay(<span class=\"keyword\">this</span>._cp2_mp);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp2_mp.hide();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp2.hide();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preMP = me._mp.getPosition();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preCP1,preCP2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(me._mp){</span><br><span class=\"line\">       <span class=\"comment\">// 前一个位置和下一个位置</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(me._cp1) preCP1 = me._cp1.getPosition();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(me._cp2) preCP2 = me._cp2.getPosition();</span><br><span class=\"line\">      <span class=\"keyword\">function</span> __mds(e){</span><br><span class=\"line\">        <span class=\"comment\">// 获取到点所在的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> posi = me._mp.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> offsetx = posi.lng - preMP.lng;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> offsety = posi.lat - preMP.lat;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有cp1 重置cp1的位置 （和点mp联动） 设置cp1_mp的path 设置曲线的path</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(me._cp1) {</span><br><span class=\"line\">          me._cp1.setPosition(<span class=\"keyword\">new</span> BMap.Point(preCP1.lng+offsetx,preCP1.lat+offsety));</span><br><span class=\"line\">          me._cp1_mp.setPath([me._mp.getPosition(),me._cp1.getPosition()]);</span><br><span class=\"line\">          preCP1 = me._cp1.getPosition();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">// cp2 同理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(me._cp2) {</span><br><span class=\"line\">          me._cp2.setPosition(<span class=\"keyword\">new</span> BMap.Point(preCP2.lng+offsetx,preCP2.lat+offsety));</span><br><span class=\"line\">          me._cp2_mp.setPath([me._mp.getPosition(),me._cp2.getPosition()]);</span><br><span class=\"line\">          preCP2 = me._cp2.getPosition();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cl = me._obj.getCommandList();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cl[me._key]._c==<span class=\"string\">'M'</span>) cl[me._key]._params[0] = me._mp.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cl[me._key]._c==<span class=\"string\">'C'</span>) cl[me._key]._params[2] = me._mp.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(me._cp1) cl[me._key]._params[1] = me._cp1.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(me._cp2) cl[me._key+1]._params[0] = me._cp2.getPosition();</span><br><span class=\"line\">        me._ref.setCommandList(cl);</span><br><span class=\"line\">        preMP = me._mp.getPosition();</span><br><span class=\"line\">      }</span><br><span class=\"line\">      me._mp.bind(<span class=\"string\">'dragstart'</span>,__mds);</span><br><span class=\"line\">      me._mp.bind(<span class=\"string\">'dragging'</span>,__mds);</span><br><span class=\"line\">      me._mp.bind(<span class=\"string\">'dragend'</span>,__mds);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(me._cp1){</span><br><span class=\"line\">      <span class=\"keyword\">function</span> __cds1(e){</span><br><span class=\"line\">        <span class=\"comment\">// 获取点的位置 获取命令列表 修改变动部分</span></span><br><span class=\"line\">        me._cp1_mp.setPath([me._mp.getPosition(),me._cp1.getPosition()]);</span><br><span class=\"line\">        preCP1 = me._cp1.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cl = me._obj.getCommandList();</span><br><span class=\"line\">        cl[me._key]._params[1] = me._cp1.getPosition();</span><br><span class=\"line\">        me._ref.setCommandList(cl);</span><br><span class=\"line\">      }</span><br><span class=\"line\">      me._cp1.bind(<span class=\"string\">'dragstart'</span>,__cds1);</span><br><span class=\"line\">      me._cp1.bind(<span class=\"string\">'dragging'</span>,__cds1);</span><br><span class=\"line\">      me._cp1.bind(<span class=\"string\">'dragend'</span>,__cds1);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(me._cp2){</span><br><span class=\"line\">      <span class=\"keyword\">function</span> __cds2(e){</span><br><span class=\"line\">        me._cp2_mp.setPath([me._mp.getPosition(),me._cp2.getPosition()]);</span><br><span class=\"line\">        preCP2 = me._cp2.getPosition();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cl = me._obj.getCommandList();</span><br><span class=\"line\">        cl[me._key+1]._params[0] = me._cp2.getPosition();</span><br><span class=\"line\">        me._ref.setCommandList(cl);</span><br><span class=\"line\">      }</span><br><span class=\"line\">      me._cp2.bind(<span class=\"string\">'dragstart'</span>,__cds2);</span><br><span class=\"line\">      me._cp2.bind(<span class=\"string\">'dragging'</span>,__cds2);</span><br><span class=\"line\">      me._cp2.bind(<span class=\"string\">'dragend'</span>,__cds2);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 编辑器类</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> Editor(){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._cp =  <span class=\"keyword\">new</span> Array();<span class=\"comment\">// 控制点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._defaultIcon = <span class=\"keyword\">new</span> BMap.Icon(<span class=\"string\">'mousetool_point.png'</span>,<span class=\"keyword\">new</span> BMap.Size(10,10));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._blankIcon = <span class=\"keyword\">new</span> BMap.Icon(<span class=\"string\">'blank.gif'</span>,<span class=\"keyword\">new</span> BMap.Size(1,1));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._markerOpt = {</span><br><span class=\"line\">      icon:<span class=\"keyword\">this</span>._defaultIcon,</span><br><span class=\"line\">      enableDragging:<span class=\"keyword\">true</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._lineOpt = {</span><br><span class=\"line\">      strokeColor:<span class=\"string\">'#f00'</span>,</span><br><span class=\"line\">      strokeWeight:2,</span><br><span class=\"line\">      strokeOpacity:0.8,</span><br><span class=\"line\">      strokeStyle:<span class=\"string\">'solid'</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._circleflag = 0; <span class=\"comment\">//圆形的编辑模式 默认是圆形</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 添加需要编辑的图形</span></span><br><span class=\"line\">  Editor.prototype.edit = <span class=\"keyword\">function</span>(obj){</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> BMap.Marker){</span><br><span class=\"line\">      <span class=\"keyword\">var</span> type = &quot;Marker&quot;;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> map = obj.getMap();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> num = 0; <span class=\"comment\">// 因为是一个点所以只有一个点</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> count = 1;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">var</span> controlPoint = <span class=\"keyword\">new</span> BMap.Marker(obj.getPosition(),<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">      controlPoint.setShadow(<span class=\"keyword\">this</span>._blankIcon);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> ControlPoint(obj,type,map,num,count,controlPoint);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cp.push(cp);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> BMap.Polyline){</span><br><span class=\"line\">      <span class=\"keyword\">var</span> type = &quot;Polyline&quot;;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> map = obj.getMap();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> path = obj.getPath();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> count = path.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> num = 0;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ref = <span class=\"keyword\">new</span> BMap.Polyline(path,<span class=\"keyword\">this</span>._lineOpt);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( ; num&lt;count ; num++ ){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> controlPoint = <span class=\"keyword\">new</span> BMap.Marker(path[num],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">        controlPoint.setShadow(<span class=\"keyword\">this</span>._blankIcon);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> ControlPoint(obj,type,map,num,count,controlPoint,ref);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._cp.push(cp);</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> BMap.Polygon &amp;&amp;　!(obj <span class=\"keyword\">instanceof</span> BMap.Circle)){</span><br><span class=\"line\">      <span class=\"keyword\">var</span> type = &quot;Polygon&quot;;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> map = obj.getMap();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> path = obj.getPath();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> count = path.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> num = 0;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ref = <span class=\"keyword\">new</span> BMap.Polygon(path,<span class=\"keyword\">this</span>._lineOpt);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( ; num&lt;count ; num++ ){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> controlPoint = <span class=\"keyword\">new</span> BMap.Marker(path[num],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">        controlPoint.setShadow(<span class=\"keyword\">this</span>._blankIcon);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> ControlPoint(obj,type,map,num,count,controlPoint,ref);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._cp.push(cp);</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> BMap.Circle){</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._circleflag==0){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = &quot;Circle&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> map = obj.getMap();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> point = obj.getPath()[30];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> center = obj.getCenter();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> radius = obj.getRadius();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ref = <span class=\"keyword\">new</span> BMap.Circle(center,radius,<span class=\"keyword\">this</span>._lineOpt);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = 0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = 0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cp1 = <span class=\"keyword\">new</span> BMap.Marker(center,<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cp2 = <span class=\"keyword\">new</span> BMap.Marker(point,<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> ControlCircle(obj,type,map,num,count,ref,cp1,cp2);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._cp.push(cp);</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._circleflag==1){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = &quot;Polygon&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> map = obj.getMap();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = obj.getPath();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = path.length;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num = 0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ref = <span class=\"keyword\">new</span> BMap.Polygon(path,<span class=\"keyword\">this</span>._lineOpt);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( ; num&lt;count ; num++ ){</span><br><span class=\"line\">          <span class=\"keyword\">var</span> controlPoint = <span class=\"keyword\">new</span> BMap.Marker(path[num],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">          controlPoint.setShadow(<span class=\"keyword\">this</span>._blankIcon);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> ControlPoint(obj,type,map,num,count,controlPoint,ref);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._cp.push(cp);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> BMap.Curve){</span><br><span class=\"line\">      <span class=\"keyword\">var</span> type = &quot;Curve&quot;;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> map = obj.getMap();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cl = obj.getCommandList(); <span class=\"comment\">// 命令点</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> num = 0;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> count = cl.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ref = <span class=\"keyword\">new</span> BMap.Curve(cl,{</span><br><span class=\"line\">        &quot;stroke-width&quot;:2,</span><br><span class=\"line\">        &quot;cursor&quot;:&quot;pointer&quot;,</span><br><span class=\"line\">        &quot;stroke&quot;:&quot;#f00&quot;,</span><br><span class=\"line\">        &quot;stroke-opacity&quot;:1</span><br><span class=\"line\">      });</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(;num&lt;count;num++){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = cl[num]; <span class=\"comment\">//控制点 </span></span><br><span class=\"line\">        <span class=\"comment\">// 判断命令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c._c==<span class=\"string\">'M'</span>){</span><br><span class=\"line\">          <span class=\"keyword\">var</span> mp = <span class=\"keyword\">new</span> BMap.Marker(c._params[0],<span class=\"keyword\">this</span>._markerOpt);<span class=\"comment\">// 主要点</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"keyword\">if</span>(num+1&lt;count&amp;&amp;cl[num+1]._c==<span class=\"string\">'C'</span>){ <span class=\"comment\">// 下一个是C的时候</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cp2 = <span class=\"keyword\">new</span> BMap.Marker(cl[num+1]._params[0],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cc = <span class=\"keyword\">new</span> ControlCurve(obj,type,map,num,count,ref,mp,undefined,cp2);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._cp.push(cc);</span><br><span class=\"line\">          }<span class=\"keyword\">else</span>{ <span class=\"comment\">// 下一个不是C的时候 目前只支持M C</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cc = <span class=\"keyword\">new</span> ControlCurve(obj,type,map,num,count,ref,mp);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._cp.push(cc);</span><br><span class=\"line\">          }</span><br><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c._c==<span class=\"string\">'C'</span>){</span><br><span class=\"line\">          <span class=\"keyword\">var</span> mp = <span class=\"keyword\">new</span> BMap.Marker(c._params[2],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> cp1 = <span class=\"keyword\">new</span> BMap.Marker(c._params[1],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(num+1&lt;count&amp;&amp;cl[num+1]._c==<span class=\"string\">'C'</span>){ <span class=\"comment\">// 有下一个并且是C的时候</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cp2 = <span class=\"keyword\">new</span> BMap.Marker(cl[num+1]._params[0],<span class=\"keyword\">this</span>._markerOpt);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cc = <span class=\"keyword\">new</span> ControlCurve(obj,type,map,num,count,ref,mp,cp1,cp2);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._cp.push(cc);</span><br><span class=\"line\">          }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cc = <span class=\"keyword\">new</span> ControlCurve(obj,type,map,num,count,ref,mp,cp1);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._cp.push(cc);</span><br><span class=\"line\">          }</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"comment\">// 隐藏元图形 以编辑模式显示新的图形</span></span><br><span class=\"line\">  Editor.prototype.open = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=0;i&lt;<span class=\"keyword\">this</span>._cp.length;i++){</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cp = <span class=\"keyword\">this</span>._cp[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Marker'</span>){</span><br><span class=\"line\">        <span class=\"comment\">// 隐藏图形</span></span><br><span class=\"line\">        cp._obj.hide();</span><br><span class=\"line\">        <span class=\"comment\">//添加控制图形</span></span><br><span class=\"line\">        cp._entity.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Polyline'</span>){</span><br><span class=\"line\">        cp._obj.hide();</span><br><span class=\"line\">        cp._entity.show();</span><br><span class=\"line\">        cp._ref.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Polygon'</span>){</span><br><span class=\"line\">        cp._obj.hide();</span><br><span class=\"line\">        cp._entity.show();</span><br><span class=\"line\">        cp._ref.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Circle'</span>){</span><br><span class=\"line\">        cp._obj.hide();</span><br><span class=\"line\">        cp._center.show();</span><br><span class=\"line\">        cp._point.show();</span><br><span class=\"line\">        cp._ref.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Curve'</span>){</span><br><span class=\"line\">        cp._obj.hide();</span><br><span class=\"line\">        cp._mp.show();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cp._cp1){</span><br><span class=\"line\">          cp._cp1.show();</span><br><span class=\"line\">          cp._cp1_mp.show();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cp._cp2){</span><br><span class=\"line\">          cp._cp2.show();</span><br><span class=\"line\">          cp._cp2_mp.show();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        cp._ref.show();</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"comment\">// 将编辑好的图形 赋值并重新显示</span></span><br><span class=\"line\">  Editor.prototype.close = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=0;i&lt;<span class=\"keyword\">this</span>._cp.length;i++){</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cp = <span class=\"keyword\">this</span>._cp[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Marker'</span>){</span><br><span class=\"line\">        cp._obj.setPosition(cp._entity.getPosition());</span><br><span class=\"line\">        cp._entity.hide();</span><br><span class=\"line\">        cp._obj.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Polyline'</span>){</span><br><span class=\"line\">        cp._obj.setPath(cp._ref.getPath());</span><br><span class=\"line\">        cp._entity.hide();</span><br><span class=\"line\">        cp._ref.hide();</span><br><span class=\"line\">        cp._obj.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Polygon'</span>){</span><br><span class=\"line\">        cp._obj.setPath(cp._ref.getPath());</span><br><span class=\"line\">        cp._entity.hide();</span><br><span class=\"line\">        cp._ref.hide();</span><br><span class=\"line\">        cp._obj.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Circle'</span>){</span><br><span class=\"line\">        cp._obj.setPath(cp._ref.getPath());</span><br><span class=\"line\">        cp._center.hide();</span><br><span class=\"line\">        cp._point.hide();</span><br><span class=\"line\">        cp._ref.hide();</span><br><span class=\"line\">        cp._obj.show();</span><br><span class=\"line\">      }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cp._type == <span class=\"string\">'Curve'</span>){</span><br><span class=\"line\">        cp._obj.setCommandList(cp._ref.getCommandList());</span><br><span class=\"line\">        cp._mp.hide();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cp._cp1){</span><br><span class=\"line\">          cp._cp1.hide();</span><br><span class=\"line\">          cp._cp1_mp.hide();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cp._cp2){</span><br><span class=\"line\">          cp._cp2.hide();</span><br><span class=\"line\">          cp._cp2_mp.hide();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        cp._ref.hide();</span><br><span class=\"line\">        cp._obj.show();</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">  Editor.prototype.circleEditStyle = <span class=\"keyword\">function</span>(flag){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._circleflag = flag;</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"comment\">// 需要在编辑之前设置</span></span><br><span class=\"line\">  BMap.BMap_EDITOR_CIRCLE_EDIT_TYPE_1 = 0;</span><br><span class=\"line\">  BMap.BMap_EDITOR_CIRCLE_EDIT_TYPE_2 = 1;</span><br><span class=\"line\">  BMap.Editor = Editor;</span><br></pre></td></tr></tbody></table></figure>\n<p><a href=\"http://zhoyq.gitee.io/examples/mapExt/Editor.js\">源码</a> <a href=\"http://zhoyq.gitee.io/examples/mapExt/Editor.html\">实例</a></p>\n<ol>\n<li>同样需要注意解决坐标漂移的bug</li>\n<li>需要引用 <code>&lt;script src=&quot;http://api.map.baidu.com/library/GeoUtils/1.2/src/GeoUtils.js&quot;&gt;&lt;/script&gt;</code> 获取坐标几何计算能力</li>\n</ol>\n<h2>总结</h2>\n<p>通过增加Editor类，可以不用考虑图形类型，可以方便的直接编辑。如果有什么意见或者建议可以<a href=\"http://www.zhoyq.com/about/\">直接发邮件</a>联系我。谢谢。</p>\n<p><script src=\"https://gitee.com/zhoyq/examples/widget_preview\"></script></p>\n<style>/*use*/\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n</style>","hasMore":true,"tags":["百度地图","覆盖物","编辑"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【地图】【二】构建强大的Editor类（百度篇）\ntags:\n  - 百度地图\n  - 覆盖物\n  - 编辑\ncategories: 源码解读\ndate: 2018-04-15\nstatus: published\n\n---\n\n> 文章所有涉及到的内容均可以在 https://gitee.com/zhoyq/examples/tree/master/mapExt 中获取。本文会先后以百度地图v3.0和高德地图v1.4.5为基础进行进行开发。\n\n<!-- more -->\n\n## 原因\n\n百度地图可以在对象上直接启动和关闭编辑，比较方便。由于之前写的曲线覆盖物没有在对象上挂载编辑方法所以针对曲线覆盖物写了这个编辑器类，并且适配了所有覆盖物，以简化编辑操作。\n\n## 原理\n\n使用原有覆盖物，在其基础上创建一个新的覆盖物，同步更新数据。\n\n## 特性\n\n一次编辑多个覆盖物，不区分覆盖物类型。\n\n## 百度实例 \n\n```javascript\n    // 程序里用到一些别名 自己比较熟悉的 也可以不用这一步 同时修改那部分代码即可\n    // 增加一些方法名的别名\n    BMap.Map.prototype.bind = BMap.Map.prototype.addEventListener;\n    BMap.Map.prototype.unbind = BMap.Map.prototype.removeEventListener;\n\n    BMap.Marker.prototype.bind = BMap.Marker.prototype.addEventListener;\n    BMap.Marker.prototype.unbind = BMap.Marker.prototype.removeEventListener;\n    \n    BMap.Polygon.prototype.bind = BMap.Polygon.prototype.addEventListener;\n    BMap.Polygon.prototype.unbind = BMap.Polygon.prototype.removeEventListener;\n\n    BMap.Circle.prototype.bind = BMap.Circle.prototype.addEventListener;\n    BMap.Circle.prototype.unbind = BMap.Circle.prototype.removeEventListener;\n\n    BMap.Polyline.prototype.bind = BMap.Polyline.prototype.addEventListener;\n    BMap.Polyline.prototype.unbind = BMap.Polyline.prototype.removeEventListener;\n\n   // 控制点对象\n   // 用于存储生成的控制点信息\n   // 内部使用类 一般不会在外部调用\n   function ControlPoint(obj,type,map,num,count,cp,ref){\n    this._obj = obj; // 所属对象\n    this._type = type; // 类型\n    this._map = map; // 所属地图对象\n    this._key = num; // 这个值和数组里的位置对应\n    this._keyNum = count;//总数\n    if(cp){\n      this._entity = cp; // 控制点\n      this._map.addOverlay(this._entity);\n      this._entity.hide();\n    }\n    if(ref){\n      this._ref = ref; // 参考\n      this._map.addOverlay(this._ref);\n      this._ref.hide();\n    }\n    var me = this;\n    if(me._ref&&me._entity){\n      function __ddd(e){\n        var path = me._ref.getPath();\n        path[me._key] = me._entity.getPosition();\n        me._ref.setPath(path);\n      }\n      me._entity.bind('dragstart',__ddd);\n      me._entity.bind('dragging',__ddd);\n      me._entity.bind('dragend',__ddd);\n    }\n  }\n\n  // 圆形的控制对象\n  function ControlCircle(obj,type,map,num,count,ref,center,point){ // center,point 是圆形控制器点\n    this._obj = obj; // 所属对象\n    this._type = type; // 类型\n    this._map = map; // 所属地图对象\n    this._key = num; // 这个值和数组里的位置对应\n    this._keyNum = count;//总数\n    if(ref){\n      this._ref = ref; // 参考\n      this._map.addOverlay(this._ref);\n      this._ref.hide();\n    }\n    if(center){\n      this._center = center;\n      this._map.addOverlay(this._center);\n      this._center.hide();\n    }\n    if(point){\n      this._point = point;\n      this._map.addOverlay(this._point);\n      this._point.hide();\n    }\n    var me = this;\n    if(center&&point&&ref){\n      function __cdd(e){\n        // 移动中心 获取中心位置 获取两点距离 重设圆心半径\n        var buf = me._center.getPosition();\n        var dis = BMapLib.GeoUtils.getDistance(me._center.getPosition(),me._point.getPosition());\n        me._ref.setCenter(buf);\n        me._ref.setRadius(dis);\n      }\n      function __pdd(e){\n        // 移动边界 获取距离 重设半径即可\n        var dis = BMapLib.GeoUtils.getDistance(me._center.getPosition(),me._point.getPosition());\n        me._ref.setRadius(dis);\n      }\n      me._center.bind('dragstart',__cdd);\n      me._center.bind('dragging',__cdd);\n      me._center.bind('dragend',__cdd);\n      me._point.bind('dragstart',__pdd);\n      me._point.bind('dragging',__pdd);\n      me._point.bind('dragend',__pdd);\n    }\n  }\n\n  // 曲线的控制对象\n  function ControlCurve(obj,type,map,num,count,ref,mainPoint,cp1,cp2){\n    this._obj = obj; // 所属对象\n    this._type = type; // 类型\n    this._map = map; // 所属地图对象\n    this._key = num; // 这个值和数组里的位置对应\n    this._keyNum = count;//总数\n    this._lineOpt = {\n      strokeColor:'#f00',\n      strokeWeight:2,\n      strokeOpacity:0.6,\n      strokeStyle:'dashed'\n    };\n    if(ref){\n      this._ref = ref; // 参考\n      this._map.addOverlay(this._ref);\n      this._ref.hide();\n    }\n    if(mainPoint){\n      this._mp = mainPoint;\n      this._map.addOverlay(this._mp);\n      this._mp.hide();\n    }\n    if(cp1){\n      this._cp1 = cp1;\n      this._cp1_mp = new BMap.Polyline([this._mp.getPosition(),this._cp1.getPosition()],this._lineOpt);\n      this._map.addOverlay(this._cp1);\n      this._map.addOverlay(this._cp1_mp);\n      this._cp1_mp.hide();\n      this._cp1.hide();\n    }\n    if(cp2){\n      this._cp2 = cp2;\n      this._cp2_mp = new BMap.Polyline([this._mp.getPosition(),this._cp2.getPosition()],this._lineOpt);\n      this._map.addOverlay(this._cp2);\n      this._map.addOverlay(this._cp2_mp);\n      this._cp2_mp.hide();\n      this._cp2.hide();\n    }\n    var me = this;\n    var preMP = me._mp.getPosition();\n    var preCP1,preCP2;\n    if(me._mp){\n       // 前一个位置和下一个位置\n      if(me._cp1) preCP1 = me._cp1.getPosition();\n      if(me._cp2) preCP2 = me._cp2.getPosition();\n      function __mds(e){\n        // 获取到点所在的位置 \n        var posi = me._mp.getPosition();\n        var offsetx = posi.lng - preMP.lng;\n        var offsety = posi.lat - preMP.lat;\n        // 如果有cp1 重置cp1的位置 （和点mp联动） 设置cp1_mp的path 设置曲线的path\n        if(me._cp1) {\n          me._cp1.setPosition(new BMap.Point(preCP1.lng+offsetx,preCP1.lat+offsety));\n          me._cp1_mp.setPath([me._mp.getPosition(),me._cp1.getPosition()]);\n          preCP1 = me._cp1.getPosition();\n        }\n        // cp2 同理\n        if(me._cp2) {\n          me._cp2.setPosition(new BMap.Point(preCP2.lng+offsetx,preCP2.lat+offsety));\n          me._cp2_mp.setPath([me._mp.getPosition(),me._cp2.getPosition()]);\n          preCP2 = me._cp2.getPosition();\n        }\n        var cl = me._obj.getCommandList();\n        if(cl[me._key]._c=='M') cl[me._key]._params[0] = me._mp.getPosition();\n        if(cl[me._key]._c=='C') cl[me._key]._params[2] = me._mp.getPosition();\n        if(me._cp1) cl[me._key]._params[1] = me._cp1.getPosition();\n        if(me._cp2) cl[me._key+1]._params[0] = me._cp2.getPosition();\n        me._ref.setCommandList(cl);\n        preMP = me._mp.getPosition();\n      }\n      me._mp.bind('dragstart',__mds);\n      me._mp.bind('dragging',__mds);\n      me._mp.bind('dragend',__mds);\n    }\n    if(me._cp1){\n      function __cds1(e){\n        // 获取点的位置 获取命令列表 修改变动部分\n        me._cp1_mp.setPath([me._mp.getPosition(),me._cp1.getPosition()]);\n        preCP1 = me._cp1.getPosition();\n        var cl = me._obj.getCommandList();\n        cl[me._key]._params[1] = me._cp1.getPosition();\n        me._ref.setCommandList(cl);\n      }\n      me._cp1.bind('dragstart',__cds1);\n      me._cp1.bind('dragging',__cds1);\n      me._cp1.bind('dragend',__cds1);\n    }\n    if(me._cp2){\n      function __cds2(e){\n        me._cp2_mp.setPath([me._mp.getPosition(),me._cp2.getPosition()]);\n        preCP2 = me._cp2.getPosition();\n        var cl = me._obj.getCommandList();\n        cl[me._key+1]._params[0] = me._cp2.getPosition();\n        me._ref.setCommandList(cl);\n      }\n      me._cp2.bind('dragstart',__cds2);\n      me._cp2.bind('dragging',__cds2);\n      me._cp2.bind('dragend',__cds2);\n    }\n    \n  }\n  // 编辑器类\n  function Editor(){\n    this._cp =  new Array();// 控制点\n    this._defaultIcon = new BMap.Icon('mousetool_point.png',new BMap.Size(10,10));\n    this._blankIcon = new BMap.Icon('blank.gif',new BMap.Size(1,1));\n    this._markerOpt = {\n      icon:this._defaultIcon,\n      enableDragging:true\n    };\n    this._lineOpt = {\n      strokeColor:'#f00',\n      strokeWeight:2,\n      strokeOpacity:0.8,\n      strokeStyle:'solid'\n    };\n    this._circleflag = 0; //圆形的编辑模式 默认是圆形\n  }\n  // 添加需要编辑的图形\n  Editor.prototype.edit = function(obj){\n    if(obj instanceof BMap.Marker){\n      var type = \"Marker\";\n      var map = obj.getMap();\n      if(map==null) return ;\n      var num = 0; // 因为是一个点所以只有一个点\n      var count = 1;\n      \n      var controlPoint = new BMap.Marker(obj.getPosition(),this._markerOpt);\n      controlPoint.setShadow(this._blankIcon);\n      var cp = new ControlPoint(obj,type,map,num,count,controlPoint);\n      this._cp.push(cp);\n    }else if(obj instanceof BMap.Polyline){\n      var type = \"Polyline\";\n      var map = obj.getMap();\n      if(map==null) return ;\n      var path = obj.getPath();\n      var count = path.length;\n      var num = 0;\n      var ref = new BMap.Polyline(path,this._lineOpt);\n      for( ; num<count ; num++ ){\n        var controlPoint = new BMap.Marker(path[num],this._markerOpt);\n        controlPoint.setShadow(this._blankIcon);\n        var cp = new ControlPoint(obj,type,map,num,count,controlPoint,ref);\n        this._cp.push(cp);\n      }\n    }else if(obj instanceof BMap.Polygon &&　!(obj instanceof BMap.Circle)){\n      var type = \"Polygon\";\n      var map = obj.getMap();\n      if(map==null) return ;\n      var path = obj.getPath();\n      var count = path.length;\n      var num = 0;\n      var ref = new BMap.Polygon(path,this._lineOpt);\n      for( ; num<count ; num++ ){\n        var controlPoint = new BMap.Marker(path[num],this._markerOpt);\n        controlPoint.setShadow(this._blankIcon);\n        var cp = new ControlPoint(obj,type,map,num,count,controlPoint,ref);\n        this._cp.push(cp);\n      }\n    }else if(obj instanceof BMap.Circle){\n      if(this._circleflag==0){\n        var type = \"Circle\";\n        var map = obj.getMap();\n        if(map==null) return ;\n        var point = obj.getPath()[30];\n        var center = obj.getCenter();\n        var radius = obj.getRadius();\n        var ref = new BMap.Circle(center,radius,this._lineOpt);\n        var count = 0;\n        var num = 0;\n        var cp1 = new BMap.Marker(center,this._markerOpt);\n        var cp2 = new BMap.Marker(point,this._markerOpt);\n        var cp = new ControlCircle(obj,type,map,num,count,ref,cp1,cp2);\n        this._cp.push(cp);\n      }else if(this._circleflag==1){\n        var type = \"Polygon\";\n        var map = obj.getMap();\n        if(map==null) return ;\n        var path = obj.getPath();\n        var count = path.length;\n        var num = 0;\n        var ref = new BMap.Polygon(path,this._lineOpt);\n        for( ; num<count ; num++ ){\n          var controlPoint = new BMap.Marker(path[num],this._markerOpt);\n          controlPoint.setShadow(this._blankIcon);\n          var cp = new ControlPoint(obj,type,map,num,count,controlPoint,ref);\n          this._cp.push(cp);\n        }\n      }\n    }else if(obj instanceof BMap.Curve){\n      var type = \"Curve\";\n      var map = obj.getMap();\n      if(map==null) return ;\n      var cl = obj.getCommandList(); // 命令点\n      var num = 0;\n      var count = cl.length;\n      var ref = new BMap.Curve(cl,{\n        \"stroke-width\":2,\n        \"cursor\":\"pointer\",\n        \"stroke\":\"#f00\",\n        \"stroke-opacity\":1\n      });\n      for(;num<count;num++){\n        var c = cl[num]; //控制点 \n        // 判断命令\n        if(c._c=='M'){\n          var mp = new BMap.Marker(c._params[0],this._markerOpt);// 主要点\n          \n          if(num+1<count&&cl[num+1]._c=='C'){ // 下一个是C的时候\n            var cp2 = new BMap.Marker(cl[num+1]._params[0],this._markerOpt);\n            var cc = new ControlCurve(obj,type,map,num,count,ref,mp,undefined,cp2);\n            this._cp.push(cc);\n          }else{ // 下一个不是C的时候 目前只支持M C\n            var cc = new ControlCurve(obj,type,map,num,count,ref,mp);\n            this._cp.push(cc);\n          }\n        }else if(c._c=='C'){\n          var mp = new BMap.Marker(c._params[2],this._markerOpt);\n          var cp1 = new BMap.Marker(c._params[1],this._markerOpt);\n          if(num+1<count&&cl[num+1]._c=='C'){ // 有下一个并且是C的时候\n            var cp2 = new BMap.Marker(cl[num+1]._params[0],this._markerOpt);\n            var cc = new ControlCurve(obj,type,map,num,count,ref,mp,cp1,cp2);\n            this._cp.push(cc);\n          }else{\n            var cc = new ControlCurve(obj,type,map,num,count,ref,mp,cp1);\n            this._cp.push(cc);\n          }\n        }\n      }\n    }\n  };\n  // 隐藏元图形 以编辑模式显示新的图形\n  Editor.prototype.open = function(){\n    for(var i=0;i<this._cp.length;i++){\n      var cp = this._cp[i];\n      if(cp._type == 'Marker'){\n        // 隐藏图形\n        cp._obj.hide();\n        //添加控制图形\n        cp._entity.show();\n      }else if(cp._type == 'Polyline'){\n        cp._obj.hide();\n        cp._entity.show();\n        cp._ref.show();\n      }else if(cp._type == 'Polygon'){\n        cp._obj.hide();\n        cp._entity.show();\n        cp._ref.show();\n      }else if(cp._type == 'Circle'){\n        cp._obj.hide();\n        cp._center.show();\n        cp._point.show();\n        cp._ref.show();\n      }else if(cp._type == 'Curve'){\n        cp._obj.hide();\n        cp._mp.show();\n        if(cp._cp1){\n          cp._cp1.show();\n          cp._cp1_mp.show();\n        }\n        if(cp._cp2){\n          cp._cp2.show();\n          cp._cp2_mp.show();\n        }\n        cp._ref.show();\n      }\n    }\n  };\n  // 将编辑好的图形 赋值并重新显示\n  Editor.prototype.close = function(){\n    for(var i=0;i<this._cp.length;i++){\n      var cp = this._cp[i];\n      if(cp._type == 'Marker'){\n        cp._obj.setPosition(cp._entity.getPosition());\n        cp._entity.hide();\n        cp._obj.show();\n      }else if(cp._type == 'Polyline'){\n        cp._obj.setPath(cp._ref.getPath());\n        cp._entity.hide();\n        cp._ref.hide();\n        cp._obj.show();\n      }else if(cp._type == 'Polygon'){\n        cp._obj.setPath(cp._ref.getPath());\n        cp._entity.hide();\n        cp._ref.hide();\n        cp._obj.show();\n      }else if(cp._type == 'Circle'){\n        cp._obj.setPath(cp._ref.getPath());\n        cp._center.hide();\n        cp._point.hide();\n        cp._ref.hide();\n        cp._obj.show();\n      }else if(cp._type == 'Curve'){\n        cp._obj.setCommandList(cp._ref.getCommandList());\n        cp._mp.hide();\n        if(cp._cp1){\n          cp._cp1.hide();\n          cp._cp1_mp.hide();\n        }\n        if(cp._cp2){\n          cp._cp2.hide();\n          cp._cp2_mp.hide();\n        }\n        cp._ref.hide();\n        cp._obj.show();\n      }\n    }\n  };\n  Editor.prototype.circleEditStyle = function(flag){\n    this._circleflag = flag;\n  };\n  // 需要在编辑之前设置\n  BMap.BMap_EDITOR_CIRCLE_EDIT_TYPE_1 = 0;\n  BMap.BMap_EDITOR_CIRCLE_EDIT_TYPE_2 = 1;\n  BMap.Editor = Editor;\n```\n[源码](http://zhoyq.gitee.io/examples/mapExt/Editor.js) [实例](http://zhoyq.gitee.io/examples/mapExt/Editor.html) \n\n1. 同样需要注意解决坐标漂移的bug\n2. 需要引用 `<script src=\"http://api.map.baidu.com/library/GeoUtils/1.2/src/GeoUtils.js\"></script>` 获取坐标几何计算能力\n\n## 总结\n\n通过增加Editor类，可以不用考虑图形类型，可以方便的直接编辑。如果有什么意见或者建议可以[直接发邮件](http://www.zhoyq.com/about/)联系我。谢谢。\n\n[引入JS占位符](script:https://gitee.com/zhoyq/examples/widget_preview)\n\n```css\n/*use*/\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n```\n"},{"title":"【地图】【一】曲线覆盖物","excerpt":"<blockquote>\n<p>文章所有涉及到的内容均可以在 https://gitee.com/zhoyq/examples/tree/master/mapExt 中获取。本文会先后以百度地图v3.0和高德地图v1.4.5为基础进行进行开发。</p>\n</blockquote>\n","url":"/2018/03/26/源码解读/【地图】【一】曲线覆盖物","fromDate":"2018-03-26","category":"源码解读","text":"<blockquote>\n<p>文章所有涉及到的内容均可以在 https://gitee.com/zhoyq/examples/tree/master/mapExt 中获取。本文会先后以百度地图v3.0和高德地图v1.4.5为基础进行进行开发。</p>\n</blockquote>\n<!-- more -->\n<h2>起因</h2>\n<p>因为之前一直使用地图方面的API开发网站，有时候会看到地图API画出来的圆形有棱角，感觉像是折线扩展，经过翻查百度地图以及高德地图的源代码，才发现真的是使用折线实现的。有时候需要几率很准确的曲线甚至有曲率等数据，所以萌生了开发曲线覆盖物的想法。</p>\n<h2>原理</h2>\n<p>地图上的图形都是缩放不改变精度的，所以还是使用SVG开发比较好，为了尽可能好的完成项目，避开问题，使用了一个SVG控制的库<code>RaphaelJs</code>,通过地图中的自定义图层挂载SVG图层，完成绘制以及缩放等功能。</p>\n<h2>特性</h2>\n<p>实现了SVG PATH中的C和M命令，可以绘制简单的曲线（可以在此基础上实现更多命令）；</p>\n<h2>实例开发</h2>\n<h3>百度地图</h3>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 挂载SVG控制库到百度地图对象上</span></span><br><span class=\"line\">    BMap.Raphael = BMap.Raphael || Raphael;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 创建曲线绘制命令对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 SVGPATH 命令进行曲线绘制</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> CurveCommand(c,params){</span><br><span class=\"line\">        <span class=\"comment\">// 命令参数 目前支持M和C</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._c = c;</span><br><span class=\"line\">        <span class=\"comment\">// 命令具体参数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._params = params;  </span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// 挂载曲线命令对象到百度地图对象上</span></span><br><span class=\"line\">    BMap.CurveCommand = CurveCommand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建曲线类</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> Curve(commandList,opts){</span><br><span class=\"line\">        <span class=\"comment\">// 命令列表</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._cl = commandList; </span><br><span class=\"line\">        <span class=\"comment\">// 样式</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._opts = opts; </span><br><span class=\"line\">        <span class=\"comment\">// 显示标识</span></span><br><span class=\"line\">        <span class=\"comment\">// this._show = false; </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> removeEvent(){</span><br><span class=\"line\">            me._map = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.removeEventListener(<span class=\"string\">'remove'</span>,removeEvent)</span><br><span class=\"line\">        } </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'remove'</span>,removeEvent);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// 将曲线对象挂载到百度地图覆盖物上</span></span><br><span class=\"line\">    Curve.prototype = <span class=\"keyword\">new</span> BMap.Overlay();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过命令列表获得真正的用于绘制的SVGPATH命令</span></span><br><span class=\"line\">    Curve.prototype.__getSvgPath = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buf = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = 0;i&lt;<span class=\"keyword\">this</span>._cl.length;i++){</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cc = <span class=\"keyword\">this</span>._cl[i];</span><br><span class=\"line\">            buf += cc._c;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=0;j&lt;cc._params.length;j++){</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pbuf = <span class=\"keyword\">this</span>._map.pointToOverlayPixel(cc._params[j]);</span><br><span class=\"line\">                buf += pbuf.x+&quot; &quot;+pbuf.y;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j!=cc._params.length-1){</span><br><span class=\"line\">                    buf += &quot; &quot;;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据百度覆盖物实现对应方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化覆盖物</span></span><br><span class=\"line\">    Curve.prototype.initialize = <span class=\"keyword\">function</span>(map){</span><br><span class=\"line\">        <span class=\"comment\">// 地图引用</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._map = map; </span><br><span class=\"line\">        <span class=\"keyword\">var</span> svgP = <span class=\"keyword\">this</span>.__getSvgPath();</span><br><span class=\"line\">        <span class=\"comment\">// 设置图层</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> div = <span class=\"keyword\">this</span>.container = document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        div.style.cssText = <span class=\"string\">'position:absolute;top:0px;left:0px;z-index:199;'</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._paper = BMap.Raphael(div,1800,1600);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._paper.setViewBox(-500,-500,1800,1600);</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = <span class=\"keyword\">this</span>._paper.path(svgP);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._opts){</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.obj.attr(<span class=\"keyword\">this</span>._opts);</span><br><span class=\"line\">        }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.obj.attr({</span><br><span class=\"line\">                &quot;stroke-width&quot;:4,</span><br><span class=\"line\">                &quot;cursor&quot;:&quot;pointer&quot;,</span><br><span class=\"line\">                &quot;stroke&quot;:&quot;#3a6bdb&quot;,</span><br><span class=\"line\">                &quot;stroke-opacity&quot;:0.7</span><br><span class=\"line\">            });</span><br><span class=\"line\">        } </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._map.getPanes().markerPane.appendChild(div);</span><br><span class=\"line\">        div.firstChild.style.cssText=<span class=\"string\">'position:absolute;top:-500px;left:-500px;width:1800px;height:1600px;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绘制曲线覆盖物</span></span><br><span class=\"line\">    Curve.prototype.draw = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> map   = <span class=\"keyword\">this</span>._map,</span><br><span class=\"line\">            point = map.pixelToPoint(<span class=\"keyword\">new</span> BMap.Pixel(0, 0)),</span><br><span class=\"line\">            pixel = map.pointToOverlayPixel(point);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.container.firstChild.style.left = (pixel.x-500) + &quot;px&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.container.firstChild.style.top  = (pixel.y-500) + &quot;px&quot;; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._paper.setViewBox(pixel.x-500,pixel.y-500,1800,1600);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> svgPath = <span class=\"keyword\">this</span>.__getSvgPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj.attr({</span><br><span class=\"line\">            path:svgPath</span><br><span class=\"line\">        });</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取地图对象</span></span><br><span class=\"line\">    Curve.prototype.getMap = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._map;</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取命令列表</span></span><br><span class=\"line\">    Curve.prototype.getCommandList = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cl;</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置命令列表</span></span><br><span class=\"line\">    Curve.prototype.setCommandList = <span class=\"keyword\">function</span>(cl){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._cl = cl;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> svgPath = <span class=\"keyword\">this</span>.__getSvgPath();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.obj[0].setAttribute(<span class=\"string\">'d'</span>,svgPath);</span><br><span class=\"line\">    };</span><br><span class=\"line\">    <span class=\"comment\">// 挂载曲线覆盖物到爆肚地图对象上</span></span><br><span class=\"line\">    BMap.Curve = Curve;</span><br></pre></td></tr></tbody></table></figure>\n<p><a href=\"http://zhoyq.gitee.io/examples/mapExt/Curve.js\">源码</a> <a href=\"http://zhoyq.gitee.io/examples/mapExt/Curve.html\">实例</a></p>\n<p>注意：百度地图直接使用这段代码时，使用缩放会出现中心点漂移的现象，主要原因是中心点计算出现的问题，需要在源代码的基础上添加一行代码解决这个bug <code>new BMap.Polyline([new BMap.Point(116.404, 39.905),new BMap.Point(116.414, 39.905)]).hide();</code> 。</p>\n<h3>高德地图</h3>\n<p>最近看了1.4.5版本的地图API，高德居然自己实现了贝塞尔曲线，值得点赞。那就可以使用原生API了，这里就不再另外实现。也不要说希望百度跟上脚步，发展还是要看需求，也许百度用户对曲线的要求并不高。</p>\n<h2>总结</h2>\n<p>总结来看，高德还是与时俱进的，更新稳定而高效。相比之下百度地图API却迟迟变化不大。但是实际使用的时候，我更喜欢百度API这种对二次开发友好的接口设计，暴露一些底层类提供实现，这样我们自己就能定义自己的组件库了，并不是说高德的插件模式不好，见仁见智吧。我自己还是喜欢对象继承这种扩展模式，在javascript里增加类体系本身就让我觉得高兴。</p>\n<p>PS. 我看了一下高德地图的API更新，2017年11月29号更新的贝塞尔曲线，我自己心里还是很欣慰的。因为那个时候的需求如今终于被官方实现了。</p>\n<p><script src=\"https://gitee.com/zhoyq/examples/widget_preview\"></script></p>\n<style>/*use*/\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n</style>","hasMore":true,"tags":["百度地图","高德地图","曲线覆盖物"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【地图】【一】曲线覆盖物\ntags:\n  - 百度地图\n  - 高德地图\n  - 曲线覆盖物\ncategories: 源码解读\ndate: 2018-03-26\nstatus: published\n\n---\n\n> 文章所有涉及到的内容均可以在 https://gitee.com/zhoyq/examples/tree/master/mapExt 中获取。本文会先后以百度地图v3.0和高德地图v1.4.5为基础进行进行开发。\n\n<!-- more -->\n\n## 起因\n\n因为之前一直使用地图方面的API开发网站，有时候会看到地图API画出来的圆形有棱角，感觉像是折线扩展，经过翻查百度地图以及高德地图的源代码，才发现真的是使用折线实现的。有时候需要几率很准确的曲线甚至有曲率等数据，所以萌生了开发曲线覆盖物的想法。\n\n## 原理\n\n地图上的图形都是缩放不改变精度的，所以还是使用SVG开发比较好，为了尽可能好的完成项目，避开问题，使用了一个SVG控制的库`RaphaelJs`,通过地图中的自定义图层挂载SVG图层，完成绘制以及缩放等功能。\n\n## 特性\n\n实现了SVG PATH中的C和M命令，可以绘制简单的曲线（可以在此基础上实现更多命令）；\n\n## 实例开发\n\n### 百度地图\n\n```javascript\n    // 挂载SVG控制库到百度地图对象上\n    BMap.Raphael = BMap.Raphael || Raphael;\n \n    // 创建曲线绘制命令对象\n    // 使用 SVGPATH 命令进行曲线绘制\n    function CurveCommand(c,params){\n        // 命令参数 目前支持M和C\n        this._c = c;\n        // 命令具体参数\n        this._params = params;  \n    }\n    // 挂载曲线命令对象到百度地图对象上\n    BMap.CurveCommand = CurveCommand;\n\n    // 创建曲线类\n    function Curve(commandList,opts){\n        // 命令列表\n        this._cl = commandList; \n        // 样式\n        this._opts = opts; \n        // 显示标识\n        // this._show = false; \n        var me = this;\n        // 移除事件\n        function removeEvent(){\n            me._map = null;\n            this.removeEventListener('remove',removeEvent)\n        } \n        this.addEventListener('remove',removeEvent);\n    }\n    // 将曲线对象挂载到百度地图覆盖物上\n    Curve.prototype = new BMap.Overlay();\n\n    // 通过命令列表获得真正的用于绘制的SVGPATH命令\n    Curve.prototype.__getSvgPath = function(){\n        var buf = '';\n        for(var i = 0;i<this._cl.length;i++){\n            var cc = this._cl[i];\n            buf += cc._c;\n            for(var j=0;j<cc._params.length;j++){\n                var pbuf = this._map.pointToOverlayPixel(cc._params[j]);\n                buf += pbuf.x+\" \"+pbuf.y;\n                if(j!=cc._params.length-1){\n                    buf += \" \";\n                }\n            }\n        }\n        return buf;\n    };\n\n    // 根据百度覆盖物实现对应方法\n    // 初始化覆盖物\n    Curve.prototype.initialize = function(map){\n        // 地图引用\n        this._map = map; \n        var svgP = this.__getSvgPath();\n        // 设置图层\n        var div = this.container = document.createElement('div');\n        div.style.cssText = 'position:absolute;top:0px;left:0px;z-index:199;';\n      \n        this._paper = BMap.Raphael(div,1800,1600);\n        this._paper.setViewBox(-500,-500,1800,1600);\n      \n        this.obj = this._paper.path(svgP);\n        if(this._opts){\n            this.obj.attr(this._opts);\n        }else{\n            this.obj.attr({\n                \"stroke-width\":4,\n                \"cursor\":\"pointer\",\n                \"stroke\":\"#3a6bdb\",\n                \"stroke-opacity\":0.7\n            });\n        } \n        this._map.getPanes().markerPane.appendChild(div);\n        div.firstChild.style.cssText='position:absolute;top:-500px;left:-500px;width:1800px;height:1600px;';\n        return div;\n    };\n\n    // 绘制曲线覆盖物\n    Curve.prototype.draw = function(){\n        var map   = this._map,\n            point = map.pixelToPoint(new BMap.Pixel(0, 0)),\n            pixel = map.pointToOverlayPixel(point);\n        this.container.firstChild.style.left = (pixel.x-500) + \"px\";\n        this.container.firstChild.style.top  = (pixel.y-500) + \"px\"; \n        this._paper.setViewBox(pixel.x-500,pixel.y-500,1800,1600);\n        var svgPath = this.__getSvgPath();\n        this.obj.attr({\n            path:svgPath\n        });\n    };\n\n    // 获取地图对象\n    Curve.prototype.getMap = function(){\n        return this._map;\n    };\n\n    // 获取命令列表\n    Curve.prototype.getCommandList = function(){\n      return this._cl;\n    };\n\n    // 设置命令列表\n    Curve.prototype.setCommandList = function(cl){\n      this._cl = cl;\n      var svgPath = this.__getSvgPath();\n      this.obj[0].setAttribute('d',svgPath);\n    };\n    // 挂载曲线覆盖物到爆肚地图对象上\n    BMap.Curve = Curve;\n```\n\n[源码](http://zhoyq.gitee.io/examples/mapExt/Curve.js) [实例](http://zhoyq.gitee.io/examples/mapExt/Curve.html) \n\n注意：百度地图直接使用这段代码时，使用缩放会出现中心点漂移的现象，主要原因是中心点计算出现的问题，需要在源代码的基础上添加一行代码解决这个bug `new BMap.Polyline([new BMap.Point(116.404, 39.905),new BMap.Point(116.414, 39.905)]).hide();` 。\n\n### 高德地图\n\n最近看了1.4.5版本的地图API，高德居然自己实现了贝塞尔曲线，值得点赞。那就可以使用原生API了，这里就不再另外实现。也不要说希望百度跟上脚步，发展还是要看需求，也许百度用户对曲线的要求并不高。\n\n\n## 总结\n\n总结来看，高德还是与时俱进的，更新稳定而高效。相比之下百度地图API却迟迟变化不大。但是实际使用的时候，我更喜欢百度API这种对二次开发友好的接口设计，暴露一些底层类提供实现，这样我们自己就能定义自己的组件库了，并不是说高德的插件模式不好，见仁见智吧。我自己还是喜欢对象继承这种扩展模式，在javascript里增加类体系本身就让我觉得高兴。\n\nPS. 我看了一下高德地图的API更新，2017年11月29号更新的贝塞尔曲线，我自己心里还是很欣慰的。因为那个时候的需求如今终于被官方实现了。\n\n\n[引入JS占位符](script:https://gitee.com/zhoyq/examples/widget_preview)\n\n```css\n/*use*/\n.pro_name a{color: #4183c4;}\n.osc_git_title{background-color: #fff;}\n.osc_git_box{background-color: #fff;}\n.osc_git_box{border-color: #E3E9ED;}\n.osc_git_info{color: #666;}\n.osc_git_main a{color: #9B9B9B;}\n```\n"},{"title":"【看板】部署自己的看板应用","excerpt":"<p>有时候有些工作记录的需要，wekan这个看板应用刚刚好。所以决定自己安装以下，考虑了一下为了不影响服务器原始应用正常运行，还是决定使用docker进行安装。</p>\n","url":"/2018/03/14/技术笔记/【看板】部署自己的看板应用","fromDate":"2018-03-14","category":"技术笔记","text":"<p>有时候有些工作记录的需要，wekan这个看板应用刚刚好。所以决定自己安装以下，考虑了一下为了不影响服务器原始应用正常运行，还是决定使用docker进行安装。</p>\n<!-- more -->\n<h2>安装docker</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取yum-config-manager命令 需要使用yum-config-manager命令更新依赖</span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># docker 最新版还是去官网获取比较好 另外在增加一个源 版本不是最新的</span><br><span class=\"line\"># https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">     --add-repo \\</span><br><span class=\"line\">     https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新目录</span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新软件</span><br><span class=\"line\">yum update</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有版本</span><br><span class=\"line\">yum list docker-ce.x86_64  --showduplicates |sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装特定版本的docker</span><br><span class=\"line\"># yum -y install docker-ce-&lt;VERSION_STRING&gt;</span><br><span class=\"line\"># 直接安装最新版本的docker</span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 移除docker</span><br><span class=\"line\"># yum -y remove docker-ce</span><br><span class=\"line\"># rm -rf /var/lib/docker</span><br><span class=\"line\"></span><br><span class=\"line\">#　更新镜像源 这个源地址可以通过阿里云获取</span><br><span class=\"line\">mkdir -p /etc/docker</span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">{</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://xxxxxx.mirror.aliyuncs.com&quot;] </span><br><span class=\"line\">}</span><br><span class=\"line\"># 需要重新加载镜像源的时候</span><br><span class=\"line\"># sudo systemctl daemon-reload</span><br><span class=\"line\"># 需要重启的时候</span><br><span class=\"line\"># sudo systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动docker</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试安装 会显示Hello World</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装docker-compose</span><br><span class=\"line\"># https://github.com/docker/compose/releases</span><br><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.20.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">#检查安装</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></tbody></table></figure>\n<h2>使用docker compose安装mongo 以及 wekan</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/docker</span><br><span class=\"line\">cd /home/docker</span><br><span class=\"line\"># git文件的域名需要更改为部署服务器的域名</span><br><span class=\"line\">git clone https://gitee.com/liu-lu/wekan-mongodb.git </span><br><span class=\"line\">cd wekan-mongodb</span><br><span class=\"line\">docker-compose up</span><br></pre></td></tr></tbody></table></figure>\n<p>修改nginx的配置文件，指向10001的代理.</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server {</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name xxx.xx;</span><br><span class=\"line\">  access_log xxx.log combined;</span><br><span class=\"line\"></span><br><span class=\"line\">  location ~ {</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:10001;</span><br><span class=\"line\">    proxy_connect_timeout 300s;</span><br><span class=\"line\">    proxy_send_timeout 900;</span><br><span class=\"line\">    proxy_read_timeout 900;</span><br><span class=\"line\">    proxy_buffer_size 32k;</span><br><span class=\"line\">    proxy_buffers 4 64k;</span><br><span class=\"line\">    proxy_busy_buffers_size 128k;</span><br><span class=\"line\">    proxy_redirect off;</span><br><span class=\"line\">    proxy_hide_header Vary;</span><br><span class=\"line\">    proxy_set_header Accept-Encoding '';</span><br><span class=\"line\">    proxy_set_header Referer $http\\_referer;</span><br><span class=\"line\">    proxy\\_set\\_header Cookie $http_cookie;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">    proxy\\_set\\_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $proxy\\_add\\_x\\_forwarded\\_for; </span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2>备份wekan的mongo数据库</h2>\n<p>备份</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入mongo</span><br><span class=\"line\">docker exec -it wekandb bash</span><br><span class=\"line\">cd /data</span><br><span class=\"line\"># 备份文件</span><br><span class=\"line\">mongodump</span><br><span class=\"line\"># 复制到本地文件夹</span><br><span class=\"line\">docker cp wekandb:/data/dump .</span><br></pre></td></tr></tbody></table></figure>\n<p>还原</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在容器内</span><br><span class=\"line\"># 复制回去</span><br><span class=\"line\">docker cp dump wekandb:/data/</span><br><span class=\"line\">cd /data</span><br><span class=\"line\"># 还原</span><br><span class=\"line\">mongorestore --drop --db wekan dump/wekan/</span><br><span class=\"line\"># 或者还原到其他mongo的不同端口</span><br><span class=\"line\"># mongorestore --port 11235</span><br></pre></td></tr></tbody></table></figure>\n<h2>更新</h2>\n<p>增加yum源两个（20180908）</p>\n<ul>\n<li><a href=\"/attaches/7B804948AA92EAA80BAFFE4635075161.repo\">CentOS-Base</a></li>\n<li><a href=\"/attaches/FF52B724AED0DBD076B60A0B5EEC2BD6.repo\">CentOS-docker</a></li>\n</ul>\n<p>如果你是 <code>windows10</code> 用户，也可以通过这个链接下载 <a href=\"https://pan.baidu.com/s/13sca5nx3pSgBjKwZU4dKiQ\">docker for windows10</a></p>\n<p><code>https://pan.baidu.com/s/13sca5nx3pSgBjKwZU4dKiQ</code></p>\n<p>但是如果你是 <code>windows10</code> 以前版本的用户，希望升级一下你的操作系统。</p>\n","hasMore":true,"tags":["看板","CentOS","docker","wekan","mongo"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【看板】部署自己的看板应用\ntags:\n  - 看板\n  - CentOS\n  - docker\n  - wekan\n  - mongo\ncategories: 技术笔记\ndate: 2018-03-14\nstatus: published\n\n---\n\n有时候有些工作记录的需要，wekan这个看板应用刚刚好。所以决定自己安装以下，考虑了一下为了不影响服务器原始应用正常运行，还是决定使用docker进行安装。\n\n<!-- more -->\n\n## 安装docker\n\n```bash \n# 获取yum-config-manager命令 需要使用yum-config-manager命令更新依赖\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\n# docker 最新版还是去官网获取比较好 另外在增加一个源 版本不是最新的\n# https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nsudo yum-config-manager \\\n     --add-repo \\\n     https://download.docker.com/linux/centos/docker-ce.repo\n\n# 更新目录\nyum makecache fast\n\n# 更新软件\nyum update\n\n# 列出所有版本\nyum list docker-ce.x86_64  --showduplicates |sort -r\n\n# 安装特定版本的docker\n# yum -y install docker-ce-<VERSION_STRING>\n# 直接安装最新版本的docker\nyum -y install docker-ce\n\n# 移除docker\n# yum -y remove docker-ce\n# rm -rf /var/lib/docker\n\n#　更新镜像源 这个源地址可以通过阿里云获取\nmkdir -p /etc/docker\nvi /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://xxxxxx.mirror.aliyuncs.com\"] \n}\n# 需要重新加载镜像源的时候\n# sudo systemctl daemon-reload\n# 需要重启的时候\n# sudo systemctl restart docker\n\n# 启动docker\nsystemctl start docker\n\n# 测试安装 会显示Hello World\ndocker run hello-world\n\n# 安装docker-compose\n# https://github.com/docker/compose/releases\ncurl -L https://github.com/docker/compose/releases/download/1.20.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n#检查安装\ndocker-compose --version\n```\n\n## 使用docker compose安装mongo 以及 wekan\n\n```bash\nmkdir /home/docker\ncd /home/docker\n# git文件的域名需要更改为部署服务器的域名\ngit clone https://gitee.com/liu-lu/wekan-mongodb.git \ncd wekan-mongodb\ndocker-compose up\n```\n\n修改nginx的配置文件，指向10001的代理.\n\n```bash\nserver {\n  listen 80;\n  server_name xxx.xx;\n  access_log xxx.log combined;\n\n  location ~ {\n    proxy_pass http://127.0.0.1:10001;\n    proxy_connect_timeout 300s;\n    proxy_send_timeout 900;\n    proxy_read_timeout 900;\n    proxy_buffer_size 32k;\n    proxy_buffers 4 64k;\n    proxy_busy_buffers_size 128k;\n    proxy_redirect off;\n    proxy_hide_header Vary;\n    proxy_set_header Accept-Encoding '';\n    proxy_set_header Referer $http_referer;\n    proxy_set_header Cookie $http_cookie;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \n  }\n}\n```\n\n## 备份wekan的mongo数据库\n\n备份\n\n```bash\n# 进入mongo\ndocker exec -it wekandb bash\ncd /data\n# 备份文件\nmongodump\n# 复制到本地文件夹\ndocker cp wekandb:/data/dump .\n```\n\n还原\n\n```bash\n# 在容器内\n# 复制回去\ndocker cp dump wekandb:/data/\ncd /data\n# 还原\nmongorestore --drop --db wekan dump/wekan/\n# 或者还原到其他mongo的不同端口\n# mongorestore --port 11235\n```\n\n## 更新\n\n增加yum源两个（20180908）\n\n* [CentOS-Base](../../DATA/CentOS-Base.repo)\n* [CentOS-docker](../../DATA/CentOS-docker.repo)\n\n如果你是 `windows10` 用户，也可以通过这个链接下载 [docker for windows10](https://pan.baidu.com/s/13sca5nx3pSgBjKwZU4dKiQ)\n\n`https://pan.baidu.com/s/13sca5nx3pSgBjKwZU4dKiQ`\n\n但是如果你是 `windows10` 以前版本的用户，希望升级一下你的操作系统。\n"},{"title":"【ES6】ES6特性笔记","excerpt":"<blockquote>\n<p>ES6已经出现很长时间了，现在系统一下知识点，查漏补缺。</p>\n</blockquote>\n","url":"/2018/03/11/技术笔记/【ES6】ES6特性笔记","fromDate":"2018-03-11","category":"技术笔记","text":"<blockquote>\n<p>ES6已经出现很长时间了，现在系统一下知识点，查漏补缺。</p>\n</blockquote>\n<!-- more -->\n<h2>变量</h2>\n<p><code>let</code></p>\n<ul>\n<li><code>let</code> 声明的变量只在其所在的代码块中起作用。</li>\n<li>使用 <code>let</code> 声明变量之前。该变量是不可用的 - 暂时性死区</li>\n<li><code>let</code> 不允许在同一个作用域内重复声明同一个变量。</li>\n<li>在块级作用域内函数声明类似于 <code>let</code>，在块级作用域之外不可引用。</li>\n</ul>\n<p><code>const</code></p>\n<ul>\n<li><code>const</code> 声明一个只读变量，一旦声明常量不可变。</li>\n<li><code>const</code> 实际上保证的是变量指向的那个内存地址不得改动，引用类内部属性还是可变的。</li>\n</ul>\n<p>获取顶层对象</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getGlobal(){</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span> ) { <span class=\"keyword\">return</span> self; }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> window !== <span class=\"string\">'undefined'</span> ) { <span class=\"keyword\">return</span> window; }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span> ) { <span class=\"keyword\">return</span> global; }</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(&quot;unable to locate global object !!! &quot;);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>结构赋值 - 按照一定的模式从数组或者对象中提取值，然后对变量进行赋值。</p>\n</blockquote>\n<h2>字符串</h2>\n<p>Unicode(utf-8/utf-16)字符表示方法：<code>\\u{0061}</code> <code>\\u{20BB7}</code></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = &quot;𠮷a&quot;;</span><br><span class=\"line\"><span class=\"comment\">// codePointAt() 能够正确处理 utf-16 字符。</span></span><br><span class=\"line\">buf.codePointAt(0).toString(16); <span class=\"comment\">// 20bb7</span></span><br><span class=\"line\">buf.codePointAt(1).toString(16); <span class=\"comment\">// 61</span></span><br><span class=\"line\"><span class=\"comment\">// fromCodePoint() 通过码点获取正确 utf-16 字符。</span></span><br><span class=\"line\">String.fromCodePoint(0x20bb7); <span class=\"comment\">// 𠮷</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串遍历器 for...of 有效识别 utf-16</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c of buf){</span><br><span class=\"line\">    console.log(c); <span class=\"comment\">// 𠮷 、 a</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// at() 返回给定位置的字符</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.at(0); <span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// normalize() 正规化 - 针对某些语言的合成词 </span></span><br><span class=\"line\"><span class=\"comment\">// includes() 是否包含</span></span><br><span class=\"line\"><span class=\"comment\">// startsWith() 是否开头 </span></span><br><span class=\"line\"><span class=\"comment\">// endsWith() 是否结尾</span></span><br><span class=\"line\"><span class=\"comment\">// repeat() 重复</span></span><br><span class=\"line\"><span class=\"comment\">// padStart() 在开始补全</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(5, <span class=\"string\">'yz'</span>); <span class=\"comment\">// yzyzx</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(4, <span class=\"string\">'yz'</span>); <span class=\"comment\">// yzyx</span></span><br><span class=\"line\"><span class=\"comment\">// padEnd() 在结尾补全</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(5, <span class=\"string\">'yz'</span>); <span class=\"comment\">// xyzyz</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(4, <span class=\"string\">'yz'</span>); <span class=\"comment\">// xyzy</span></span><br><span class=\"line\"><span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = `<span class=\"keyword\">this</span> is an template String ${buf}`;</span><br><span class=\"line\"><span class=\"comment\">// 模板编译函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> compile(template){</span><br><span class=\"line\">    <span class=\"keyword\">let</span> evalExpr = /&lt;%=(.+?)%&gt;/g;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> expr = /&lt;%=([\\\\s\\\\S]+?)%&gt;/g;</span><br><span class=\"line\">    template = template</span><br><span class=\"line\">        .replace(evalExpr, <span class=\"string\">'`); \\\\n echo( $1 ); \\n echo(`'</span>)</span><br><span class=\"line\">        .replace(expr, <span class=\"string\">'`); \\n $1 \\\\n echo(`'</span>);</span><br><span class=\"line\">    template = <span class=\"string\">'echo(`'</span>+ template +<span class=\"string\">'`);'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = </span><br><span class=\"line\">    `(<span class=\"keyword\">function</span> parse(data){</span><br><span class=\"line\">        <span class=\"keyword\">let</span> output = &quot;&quot;;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> echo(html){</span><br><span class=\"line\">            output += html;</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        ${ template }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">    })`;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> script;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 使用模板编译</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> parse = <span class=\"keyword\">eval</span>(compile(template));</span><br><span class=\"line\"><span class=\"keyword\">let</span> html = parse(data); </span><br><span class=\"line\"><span class=\"comment\">// raw() 模板字符串处理函数 用于转义模板字符串中的内容</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>正则</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建方式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> RegExp(<span class=\"string\">'xyz'</span>,<span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> RegExp(/xyz/i);</span><br><span class=\"line\">/xyz/i;</span><br><span class=\"line\"><span class=\"keyword\">new</span> RegExp(/xyz/ig,&quot;i&quot;); <span class=\"comment\">// ig 会被 i 覆盖 仅支持es6</span></span><br><span class=\"line\"><span class=\"comment\">// match()</span></span><br><span class=\"line\"><span class=\"comment\">// replace()</span></span><br><span class=\"line\"><span class=\"comment\">// search()</span></span><br><span class=\"line\"><span class=\"comment\">// split()</span></span><br><span class=\"line\"><span class=\"comment\">// u 修饰符 处理 utf-16</span></span><br><span class=\"line\"><span class=\"comment\">// y 修饰符 下一次匹配必须在开始位置</span></span><br><span class=\"line\"><span class=\"comment\">// 正则的 sticky 属性 与y修饰符相匹配</span></span><br><span class=\"line\"><span class=\"comment\">// 正则的 flags 属性 返回正则的修饰符</span></span><br><span class=\"line\"><span class=\"comment\">// s 修饰符 .号不匹配行终止符 需要加此修饰符进行匹配 dotAll模式</span></span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>先行断言：x只有在y前面才能匹配 <code>/x(?=y)/</code></li>\n<li>先行否定断言： x只有不在y前面才能匹配 <code>/x(?!y)/</code></li>\n<li>后行断言：x只有在y后边才能匹配 <code>/(?&lt;=y)x/</code></li>\n<li>后行否定断言：x只有不在y后面才能匹配 <code>/(?&lt;!y)x/</code></li>\n</ul>\n<p>匹配Unicode <code>\\p{...}</code> 或者 <code>\\P{...}</code></p>\n<p>具名组匹配 <code>?&lt;name&gt;</code></p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/;</span><br><span class=\"line\"><span class=\"keyword\">const</span> matchObj = RE_DATE.exec(<span class=\"string\">'1999-12-31'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> year = matchObj.groups.year;</span><br></pre></td></tr></tbody></table></figure>\n<h2>数值</h2>\n<p>二进制前缀   <code>0b</code>\n八进制前缀   <code>0o</code>\n十六进制前缀 <code>0x</code></p>\n<p><code>Number</code> 对象</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isFinite() <span class=\"comment\">// 检查数值是否是有限的</span></span><br><span class=\"line\">Number.isNaN() <span class=\"comment\">// 检查数值是否为 NaN</span></span><br><span class=\"line\">Number.parseInt() <span class=\"comment\">// 转换 int</span></span><br><span class=\"line\">Number.parseFloat() <span class=\"comment\">// 转换 float</span></span><br><span class=\"line\">Number.isInteger() <span class=\"comment\">// 判断是否为整数</span></span><br><span class=\"line\">Number.EPSILON <span class=\"comment\">// 极小的常量 浮点的误差范围</span></span><br><span class=\"line\">Number.isSafeInteger() <span class=\"comment\">// 整数是否在安全范围内</span></span><br></pre></td></tr></tbody></table></figure>\n<p><code>Math</code> 对象</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.trunc() <span class=\"comment\">// 去除小数部分</span></span><br><span class=\"line\">Math.sign() <span class=\"comment\">// 判断是正数 负数 还是 零 返回：1、-1、0、-0、NaN</span></span><br><span class=\"line\">Math.cbrt() <span class=\"comment\">// 计算一个数的立方根</span></span><br><span class=\"line\">Math.clz32() <span class=\"comment\">// 返回一个数的32位无符号整数形式有多少个前导0</span></span><br><span class=\"line\">Math.imul() <span class=\"comment\">// 返回两个数的乘积 保证溢出后的低位精度</span></span><br><span class=\"line\">Math.fround() <span class=\"comment\">// 返回单精度浮点数</span></span><br><span class=\"line\">Math.hypot() <span class=\"comment\">// 返回所有参数的平方和的平方根</span></span><br><span class=\"line\"><span class=\"comment\">// 对数</span></span><br><span class=\"line\">Math.expm1() <span class=\"comment\">// 返回 e^x - 1 即 Math.exp(x) - 1</span></span><br><span class=\"line\">Math.log1p() <span class=\"comment\">// 返回 ln(1 + x) 即 Math.log(1 + x)  如果x小于-1返回NaN </span></span><br><span class=\"line\">Math.log10() <span class=\"comment\">// 返回以10为底的x的对数 如果x&lt;0则返回NaN</span></span><br><span class=\"line\">Math.log2() <span class=\"comment\">// 返回以2为底的x的对数 如果x&lt;0则返回NaN</span></span><br><span class=\"line\"><span class=\"comment\">// 双曲函数</span></span><br><span class=\"line\">Math.sinh() <span class=\"comment\">// 双曲正弦</span></span><br><span class=\"line\">Math.cosh() <span class=\"comment\">// 双曲余弦</span></span><br><span class=\"line\">Math.tanh() <span class=\"comment\">// 双曲正切</span></span><br><span class=\"line\">Math.asinh() <span class=\"comment\">// 反双曲正选</span></span><br><span class=\"line\">Math.acosh() <span class=\"comment\">// 反双曲余弦</span></span><br><span class=\"line\">Math.atanh() <span class=\"comment\">// 反双曲正切</span></span><br><span class=\"line\"></span><br><span class=\"line\">Math.signbit() <span class=\"comment\">// 符号位是否已经设置</span></span><br><span class=\"line\"><span class=\"comment\">// 指数运算符 **</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Integer数值类型需要以n结尾</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>函数</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> log(x,y=<span class=\"string\">'World'</span>){</span><br><span class=\"line\">    console.log(x,y);</span><br><span class=\"line\">}  </span><br><span class=\"line\"><span class=\"keyword\">function</span> log({x = <span class=\"string\">'Hello'</span>,y = <span class=\"string\">'World'</span>}={}){</span><br><span class=\"line\">    console.log(x,y);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">function</span> log({x,y} = {x:<span class=\"string\">'Hello'</span>,y:<span class=\"string\">'World'</span>}){</span><br><span class=\"line\">    console.log(x,y);</span><br><span class=\"line\">} </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数的length属性，代表返回参数个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数不存在就抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> throwMissing(param){</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(&quot;Missing parameter &quot; + param );</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">function</span> log(x = throwMissing(<span class=\"string\">'x'</span>),y=<span class=\"string\">'World'</span>){</span><br><span class=\"line\">    console.log(x,y);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符 ...y 必须在末尾</span></span><br><span class=\"line\"><span class=\"comment\">// 数组与参数的逆运算</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> log(x, ...y){}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数 =&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = (x, y) =&gt; x + y ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数绑定运算符 :: 左边的对象绑定到右边的函数上,使函数中this指向左边的对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾调用优化</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> f(x){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 蹦床函数 尾递归优化 将递归转化为循环</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> tco(f){</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> active = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> accumulated = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> accumulator(){</span><br><span class=\"line\">        accumulated.push(<span class=\"keyword\">arguments</span>)l</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!active){</span><br><span class=\"line\">            active = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(accumulated.length){</span><br><span class=\"line\">                value = f.apply(<span class=\"keyword\">this</span>, accumulated.shift());</span><br><span class=\"line\">            }</span><br><span class=\"line\">            active = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = tco(<span class=\"keyword\">function</span>(x,y){</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y&gt;0){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum(x + 1,y - 1);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">sum(1,100000); <span class=\"comment\">// 100001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾逗号</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> abc(a,b,c,){</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2>数组</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 扩展运算符 ...</span></span><br><span class=\"line\"><span class=\"comment\">// 合并数组 </span></span><br><span class=\"line\">arr = [1]</span><br><span class=\"line\">arr2 = [2,3]</span><br><span class=\"line\">arr3 = [4,5]</span><br><span class=\"line\">[...arr, ...arr2, ...arr3] <span class=\"comment\">// [1,2,3,4,5]</span></span><br><span class=\"line\">[first, ...rest] = [1,2,3,4,5] <span class=\"comment\">// first = 1 ;rest = [2,3,4,5]</span></span><br><span class=\"line\">Array.from() <span class=\"comment\">// 转化为真正数组</span></span><br><span class=\"line\">Array.of() <span class=\"comment\">// 将一组值 转化为数组</span></span><br><span class=\"line\">arr.copyWithin() <span class=\"comment\">// 当前数组内的指定位置复制到其他位置</span></span><br><span class=\"line\">arr.find() <span class=\"comment\">// 返回符合条件的数组</span></span><br><span class=\"line\">arr.findIndex() <span class=\"comment\">// 返回符合条件的数组成员的位置</span></span><br><span class=\"line\">arr.fill() <span class=\"comment\">// 使用给定的值填充一个数组</span></span><br><span class=\"line\">arr.entries() <span class=\"comment\">// 键值对遍历用 for...of</span></span><br><span class=\"line\">arr.keys() <span class=\"comment\">// 键遍历用 for...of</span></span><br><span class=\"line\">arr.values() <span class=\"comment\">// 值遍历用 for...of</span></span><br><span class=\"line\">arr.includes() <span class=\"comment\">// 包含</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组空位 会明确的作为undefined处理</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>对象</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.is() <span class=\"comment\">// 判断两个值相等</span></span><br><span class=\"line\">Object.assign(target, ...sources) <span class=\"comment\">// 将源对象的可枚举属性复制到目标对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> clone(origin){</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originProto = Object.getPrototypeOf(origin);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Object.assign(Object.create(originProto),origin);</span><br><span class=\"line\">}</span><br><span class=\"line\">Object.getOwnPropertyDescriptor(); <span class=\"comment\">// 属性描述</span></span><br><span class=\"line\"><span class=\"comment\">// for ... in/Object.keys/JSON.stringify/Object.assign 会忽略枚举属性为false的值</span></span><br></pre></td></tr></tbody></table></figure>\n<p>对象遍历</p>\n<ol>\n<li>for...in 遍历自身和继承的可枚举属性（不含Symbol属性）</li>\n<li>Object.keys(obj) 遍历自身（不含继承）的可枚举属性（不含Symbol属性）</li>\n<li>Object.getOwnPropertyNames(obj) 遍历自身的所有属性（不含Symbol属性）</li>\n<li>Object.getOwnPropertySymbols(obj) 遍历自身所有Symbol属性</li>\n<li>Reflect.ownKeys(obj) 遍历自身所有属性</li>\n</ol>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// __proto__ 属性 - 内部属性，不建议使用</span></span><br><span class=\"line\">Object.setPrototypeOf(object， prototype) <span class=\"comment\">// 写操作</span></span><br><span class=\"line\">Object.getPrototypeOf() <span class=\"comment\">// 读操作</span></span><br><span class=\"line\">Object.keys(object) <span class=\"comment\">// 遍历自身（不含继承）的可枚举属性（不含Symbol属性）</span></span><br><span class=\"line\">Object.values(object) <span class=\"comment\">// 参数对象自身的（不含继承的）所有可遍历属性的键值 </span></span><br><span class=\"line\">Object.entries(object) <span class=\"comment\">// 参数对象自身的（不含继承的）所有可遍历属性的键值数组 </span></span><br><span class=\"line\">Object.getOwnPropertyDescriptor(object, <span class=\"string\">'propName'</span>) <span class=\"comment\">// 返回某个对象属性的描述对象</span></span><br><span class=\"line\">Object.getOwnPropertyDescriptors(object) <span class=\"comment\">// 同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Null传导运算符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b?.c?.d?.e;</span><br><span class=\"line\"><span class=\"comment\">// b c d 有一个是 undefined 或者 null 都会直接返回</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>Symbol 独一无二的值</h2>\n<p>七种数据类型：<code>Undefined</code>、<code>Null</code>、 <code>Boolean</code>、 <code>String</code>、 <code>Number</code>、 <code>Object</code>、 <code>Symbol</code></p>\n<p>使用方式：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = Symbol();</span><br><span class=\"line\"><span class=\"comment\">// 接受参数作为描述 在控制台显示区分</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = Symbol(<span class=\"string\">'abc'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 如果参数是一个对象 就会调用对象的toString方法</span></span><br><span class=\"line\"><span class=\"comment\">// 每次生成的Symbol都不相等</span></span><br></pre></td></tr></tbody></table></figure>\n<p><code>Symbol</code> 作为属性名，可以用于构建枚举量或者内部方法。</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Symbol.<span class=\"keyword\">for</span>() <span class=\"comment\">// 检索已经存在的量 不存在则新建</span></span><br><span class=\"line\">Symbol.keyFor() <span class=\"comment\">// 返回Symbol的key值</span></span><br></pre></td></tr></tbody></table></figure>\n<p>对象的11个内置<code>Symbol</code>值</p>\n<ol>\n<li>Symbol.hasInstance</li>\n<li>Symbol.isConcatSpreadable</li>\n<li>Symbol.species</li>\n<li>Symbol.match</li>\n<li>Symbol.replace</li>\n<li>Symbol.search</li>\n<li>Symbol.split</li>\n<li>Symbol.iterator</li>\n<li>Symbol.toPrimitive</li>\n<li>Symbol.toStringTag</li>\n<li>Symbol.unscopables</li>\n</ol>\n<p>实例</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// #1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyClass{</span><br><span class=\"line\">    [Symbol.hasInstance] (p) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p <span class=\"keyword\">instanceof</span> Array;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">[1, 2, 3] <span class=\"keyword\">instanceof</span> <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #2 </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = {length:2, 0:<span class=\"string\">'c'</span>, 1:<span class=\"string\">'d'</span>};</span><br><span class=\"line\">[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>].concat(obj,<span class=\"string\">'e'</span>); <span class=\"comment\">// a b obj e</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj[Symbol.isConcatSpreadable] = <span class=\"keyword\">true</span>; <span class=\"comment\">// 需要手动设置</span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>].concat(obj,<span class=\"string\">'e'</span>); <span class=\"comment\">// a b c d e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #3</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>Set Map</h2>\n<ul>\n<li>Set - add delete has clear size</li>\n<li>WeakSet - 成员只能是对象</li>\n<li>Map - size set get has delete clear</li>\n<li>WeakMap - 仅接受对象作为键名 没有size属性</li>\n<li>WeakMap 很适合实现listener 和 部署私有属性</li>\n</ul>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Map转对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> strMapToObj(strMap){</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = Object.create(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [k,v] of strMap){</span><br><span class=\"line\">        obj[k] = v;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 对象转Map</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> objToStrMap(obj){</span><br><span class=\"line\">    <span class=\"keyword\">let</span> strMap = <span class=\"keyword\">new</span> Map();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> k of Object.keys(objs)){</span><br><span class=\"line\">        strMap.set(k,obj[k]);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strMap;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// Map转JSON</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> strMapToJson(strMap){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JSON.stringify(strMapToObj(strMap));</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">function</span> mapToArrayJson(strMap){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JSON.stringify([...strMap]);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// JSON转Map</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> jsonToStrMap(jsonStr){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> objToStrMap(JSON.parse(jsonStr));</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">function</span> jsonToMap(sonStr){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Map(JSON.parse(jsonStr));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2>Proxy 修改某些操作的默认行为</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">get()</span><br><span class=\"line\">set()</span><br><span class=\"line\">apply()</span><br><span class=\"line\">has()</span><br><span class=\"line\">construct()</span><br><span class=\"line\">deleteProperty()</span><br><span class=\"line\">defineProperty()</span><br><span class=\"line\">getOwnPropertyDescriptor()</span><br><span class=\"line\">getPrototypeOf()</span><br><span class=\"line\">isExtensible()</span><br><span class=\"line\">ownKeys()</span><br><span class=\"line\">preventExtensions()</span><br><span class=\"line\">setPrototypeOf()</span><br><span class=\"line\">Proxy.revocable()</span><br></pre></td></tr></tbody></table></figure>\n<h2>Reflect 类似 Proxy</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 13个静态方法</span></span><br><span class=\"line\">Reflect.apply</span><br><span class=\"line\">Reflect.construct</span><br><span class=\"line\">Reflect.get</span><br><span class=\"line\">Reflect.set</span><br><span class=\"line\">Reflect.defineProperty</span><br><span class=\"line\">Reflect.deleteProperty</span><br><span class=\"line\">Reflect.has</span><br><span class=\"line\">Reflect.ownKeys</span><br><span class=\"line\">Reflect.isExtensible</span><br><span class=\"line\">Reflect.preventExtensions</span><br><span class=\"line\">Reflect.getOwnPropertyDescriptor</span><br><span class=\"line\">Reflect.getPrototypeOf</span><br><span class=\"line\">Reflect.setPrototypeOf </span><br></pre></td></tr></tbody></table></figure>\n<h2>Promise</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> Promise(<span class=\"keyword\">function</span>(resolve,reject){</span><br><span class=\"line\">    <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/*异步操作成功*/</span>){</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br><span class=\"line\">promise.then(<span class=\"keyword\">function</span>(value){</span><br><span class=\"line\">    <span class=\"comment\">// 成功</span></span><br><span class=\"line\">},<span class=\"keyword\">function</span>(error){</span><br><span class=\"line\">    <span class=\"comment\">// 失败</span></span><br><span class=\"line\">}).<span class=\"keyword\">catch</span>(console.error);</span><br><span class=\"line\"><span class=\"comment\">// 推迟执行</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> timeout(ms){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise((resolve,reject) =&gt; {</span><br><span class=\"line\">        setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br><span class=\"line\">timeout(100).then((value) =&gt; console.log(value));</span><br><span class=\"line\"><span class=\"comment\">// 异步加载图片</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> loadImageAsync(url){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise((res,rej)=&gt;{</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        image.onload = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">            res(image);</span><br><span class=\"line\">        };</span><br><span class=\"line\">        image.onerror = <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">            rej(<span class=\"keyword\">new</span> Error(&quot;Could not load image at &quot; + url));</span><br><span class=\"line\">        };</span><br><span class=\"line\">        image.src = url ;</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// Promise 实现 ajax</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getJSon(url){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise((res, rej)=&gt;{</span><br><span class=\"line\">        <span class=\"keyword\">let</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        client.open(&quot;GET&quot;,url);</span><br><span class=\"line\">        client.onreadystatechange = handler;</span><br><span class=\"line\">        client.responseType = &quot;json&quot;;</span><br><span class=\"line\">        client.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">        <span class=\"keyword\">function</span> handler(){</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState !== 4){</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status === 200){</span><br><span class=\"line\">                res(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">            }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">                rej(<span class=\"keyword\">new</span> Error(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// Promise.all 全部状态改变才改变</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = Promise.all([<span class=\"keyword\">new</span> Promise(),<span class=\"keyword\">new</span> Peomise()]);</span><br><span class=\"line\"><span class=\"comment\">// Promise.race() 有一个改变就返回</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = Promise.race([<span class=\"keyword\">new</span> Promise(),<span class=\"keyword\">new</span> Peomise()]);</span><br><span class=\"line\"><span class=\"comment\">// Promise.resolve() 将普通方法转换为Promise方法</span></span><br><span class=\"line\"><span class=\"comment\">// Promise.reject() </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// done()</span></span><br><span class=\"line\">Promise.prototype.done = <span class=\"keyword\">function</span>(onFulfilled, onRejected){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then(onFulfilled, onRejected).<span class=\"keyword\">catch</span>(<span class=\"keyword\">function</span>(reason){</span><br><span class=\"line\">        setTimeout(<span class=\"keyword\">function</span>(){<span class=\"keyword\">throw</span> reason;},0);</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// finally()</span></span><br><span class=\"line\">Promise.prototype.<span class=\"keyword\">finally</span> = <span class=\"keyword\">function</span>(callback){</span><br><span class=\"line\">    <span class=\"keyword\">let</span> P = <span class=\"keyword\">this</span>.constructor;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">        value =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class=\"line\">        reason =&gt; P.resolve(callback()).then(() =&gt; { <span class=\"keyword\">throw</span> reason})</span><br><span class=\"line\">    );</span><br><span class=\"line\">} </span><br><span class=\"line\"><span class=\"comment\">// Promise.try() catch 方法仅捕捉异步错误 所以需要try捕捉更多问题</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>Iterator 和 for ... of</h2>\n<h2>Genertor函数 异步编程解决方案</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* gen(){</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> &quot;hello&quot;;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> &quot;world&quot;;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> &quot;ending&quot;;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next(); <span class=\"comment\">// { value : &quot;hello&quot;, done: false}</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// ... </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generator.prototype.return()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* clock(){</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>){</span><br><span class=\"line\">        console.log(&quot;tick!&quot;);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">        console.log(&quot;tock!&quot;);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 协程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thunk函数 自动执行Gen函数</span></span><br><span class=\"line\"><span class=\"comment\">//es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Thunk = <span class=\"keyword\">function</span>(fn){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = Array.prototype.slice.call(<span class=\"keyword\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (callback){</span><br><span class=\"line\">            args.push(callback);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">        };</span><br><span class=\"line\">    };</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Thunk = <span class=\"keyword\">function</span>(fn){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(...args){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(callback){</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, ...args,callback);</span><br><span class=\"line\">        };</span><br><span class=\"line\">    };</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thunkify 模块（建议生产环境用这个）</span></span><br><span class=\"line\"><span class=\"comment\">// co 模块 自动执行gen程序 ***</span></span><br></pre></td></tr></tbody></table></figure>\n<h2>async 改进 gen函数</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例</span></span><br><span class=\"line\">async <span class=\"keyword\">function</span> funcName(){</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f1 = await readFile();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">}</span><br><span class=\"line\">funName();</span><br></pre></td></tr></tbody></table></figure>\n<h2>Class</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Point{</span><br><span class=\"line\">    constructor(x,y){</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.__a = 123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'point run'</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    set prop(str){</span><br><span class=\"line\">        console.log(str);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    get prop(){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &quot;123&quot;;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    toString (){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &quot;hello&quot;;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">static</span> say(){</span><br><span class=\"line\">        console.log(<span class=\"keyword\">this</span>.__a);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">Point.prop = 1;<span class=\"comment\">// 静态属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> ColorPoint <span class=\"keyword\">extends</span> Point{</span><br><span class=\"line\">    constructor(){</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(1,1);</span><br><span class=\"line\">        console.log(<span class=\"string\">'color point run'</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2>修饰器</h2>\n<h2>Module语法</h2>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> {stat, exist, readFile} from <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = 1;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = 2;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A = 1; <span class=\"comment\">// 输出常量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> {a as c, b};</span><br></pre></td></tr></tbody></table></figure>","hasMore":true,"tags":["ES6特性"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【ES6】ES6特性笔记\ntags:\n  - ES6特性\ncategories: 技术笔记\ndate: 2018-03-11\nstatus: published\n\n---\n\n> ES6已经出现很长时间了，现在系统一下知识点，查漏补缺。\n\n<!-- more -->\n\n## 变量\n\n`let`\n\n* `let` 声明的变量只在其所在的代码块中起作用。\n* 使用 `let` 声明变量之前。该变量是不可用的 - 暂时性死区\n* `let` 不允许在同一个作用域内重复声明同一个变量。\n* 在块级作用域内函数声明类似于 `let`，在块级作用域之外不可引用。\n\n`const`\n\n* `const` 声明一个只读变量，一旦声明常量不可变。\n* `const` 实际上保证的是变量指向的那个内存地址不得改动，引用类内部属性还是可变的。\n\n获取顶层对象\n\n```javascript\nfunction getGlobal(){\n    if ( typeof self !== 'undefined' ) { return self; }\n    if ( typeof window !== 'undefined' ) { return window; }\n    if ( typeof global !== 'undefined' ) { return global; }\n    throw new Error(\"unable to locate global object !!! \");\n}\n```\n\n> 结构赋值 - 按照一定的模式从数组或者对象中提取值，然后对变量进行赋值。\n\n## 字符串\n\nUnicode(utf-8/utf-16)字符表示方法：`\\u{0061}` `\\u{20BB7}`\n\n```javascript\nvar buf = \"𠮷a\";\n// codePointAt() 能够正确处理 utf-16 字符。\nbuf.codePointAt(0).toString(16); // 20bb7\nbuf.codePointAt(1).toString(16); // 61\n// fromCodePoint() 通过码点获取正确 utf-16 字符。\nString.fromCodePoint(0x20bb7); // 𠮷\n// 字符串遍历器 for...of 有效识别 utf-16\nfor(let c of buf){\n    console.log(c); // 𠮷 、 a\n}\n// at() 返回给定位置的字符\n'abc'.at(0); // a\n// normalize() 正规化 - 针对某些语言的合成词 \n// includes() 是否包含\n// startsWith() 是否开头 \n// endsWith() 是否结尾\n// repeat() 重复\n// padStart() 在开始补全\n'x'.padStart(5, 'yz'); // yzyzx\n'x'.padStart(4, 'yz'); // yzyx\n// padEnd() 在结尾补全\n'x'.padEnd(5, 'yz'); // xyzyz\n'x'.padEnd(4, 'yz'); // xyzy\n// 模板字符串\nvar template = `this is an template String ${buf}`;\n// 模板编译函数\nfunction compile(template){\n    let evalExpr = /<%=(.+?)%>/g;\n    let expr = /<%=([\\s\\S]+?)%>/g;\n    template = template\n        .replace(evalExpr, '`); \\n echo( $1 ); \\n echo(`')\n        .replace(expr, '`); \\n $1 \\n echo(`');\n    template = 'echo(`'+ template +'`);';\n    var script = \n    `(function parse(data){\n        let output = \"\";\n        function echo(html){\n            output += html;\n        }\n\n        ${ template }\n\n        return output;\n    })`;\n    return script;\n}\n// 使用模板编译\nlet parse = eval(compile(template));\nlet html = parse(data); \n// raw() 模板字符串处理函数 用于转义模板字符串中的内容\n```\n\n## 正则\n\n```javascript\n// 创建方式\nnew RegExp('xyz','i');\nnew RegExp(/xyz/i);\n/xyz/i;\nnew RegExp(/xyz/ig,\"i\"); // ig 会被 i 覆盖 仅支持es6\n// match()\n// replace()\n// search()\n// split()\n// u 修饰符 处理 utf-16\n// y 修饰符 下一次匹配必须在开始位置\n// 正则的 sticky 属性 与y修饰符相匹配\n// 正则的 flags 属性 返回正则的修饰符\n// s 修饰符 .号不匹配行终止符 需要加此修饰符进行匹配 dotAll模式\n```\n\n* 先行断言：x只有在y前面才能匹配 `/x(?=y)/` \n* 先行否定断言： x只有不在y前面才能匹配 `/x(?!y)/`  \n* 后行断言：x只有在y后边才能匹配 `/(?<=y)x/`  \n* 后行否定断言：x只有不在y后面才能匹配 `/(?<!y)x/`  \n\n匹配Unicode `\\p{...}` 或者 `\\P{...}`\n\n具名组匹配 `?<name>`\n\n```javascript\nconst RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj.groups.year;\n```\n\n## 数值\n\n二进制前缀   `0b`\n八进制前缀   `0o`\n十六进制前缀 `0x`\n\n`Number` 对象\n\n```javascript\nNumber.isFinite() // 检查数值是否是有限的\nNumber.isNaN() // 检查数值是否为 NaN\nNumber.parseInt() // 转换 int\nNumber.parseFloat() // 转换 float\nNumber.isInteger() // 判断是否为整数\nNumber.EPSILON // 极小的常量 浮点的误差范围\nNumber.isSafeInteger() // 整数是否在安全范围内\n```\n\n`Math` 对象\n\n```javascript\nMath.trunc() // 去除小数部分\nMath.sign() // 判断是正数 负数 还是 零 返回：1、-1、0、-0、NaN\nMath.cbrt() // 计算一个数的立方根\nMath.clz32() // 返回一个数的32位无符号整数形式有多少个前导0\nMath.imul() // 返回两个数的乘积 保证溢出后的低位精度\nMath.fround() // 返回单精度浮点数\nMath.hypot() // 返回所有参数的平方和的平方根\n// 对数\nMath.expm1() // 返回 e^x - 1 即 Math.exp(x) - 1\nMath.log1p() // 返回 ln(1 + x) 即 Math.log(1 + x)  如果x小于-1返回NaN \nMath.log10() // 返回以10为底的x的对数 如果x<0则返回NaN\nMath.log2() // 返回以2为底的x的对数 如果x<0则返回NaN\n// 双曲函数\nMath.sinh() // 双曲正弦\nMath.cosh() // 双曲余弦\nMath.tanh() // 双曲正切\nMath.asinh() // 反双曲正选\nMath.acosh() // 反双曲余弦\nMath.atanh() // 反双曲正切\n\nMath.signbit() // 符号位是否已经设置\n// 指数运算符 **\n\n// Integer数值类型需要以n结尾\n\n```\n\n## 函数\n\n```javascript\nfunction log(x,y='World'){\n    console.log(x,y);\n}  \nfunction log({x = 'Hello',y = 'World'}={}){\n    console.log(x,y);\n}\nfunction log({x,y} = {x:'Hello',y:'World'}){\n    console.log(x,y);\n} \n\n// 函数的length属性，代表返回参数个数\n\n// 参数不存在就抛出异常\nfunction throwMissing(param){\n    throw new Error(\"Missing parameter \" + param );\n}\nfunction log(x = throwMissing('x'),y='World'){\n    console.log(x,y);\n}\n\n// 扩展运算符 ...y 必须在末尾\n// 数组与参数的逆运算\nfunction log(x, ...y){}\n\n// 箭头函数 =>\nlet sum = (x, y) => x + y ;\n\n// 函数绑定运算符 :: 左边的对象绑定到右边的函数上,使函数中this指向左边的对象。\n\n// 尾调用优化\nfunction f(x){\n    return g(x);\n}\n\n// 蹦床函数 尾递归优化 将递归转化为循环\nfunction tco(f){\n    var value;\n    var active = false;\n    var accumulated = [];\n\n    return function accumulator(){\n        accumulated.push(arguments)l\n        if(!active){\n            active = true;\n            while(accumulated.length){\n                value = f.apply(this, accumulated.shift());\n            }\n            active = false;\n            return value;\n        }\n    };\n}\n\nvar sum = tco(function(x,y){\n    if(y>0){\n        return sum(x + 1,y - 1);\n    }else{\n        return x;\n    }\n});\n\nsum(1,100000); // 100001\n\n// 尾逗号\nfunction abc(a,b,c,){\n\n}\n\n```\n\n## 数组\n\n```javascript\n// 扩展运算符 ...\n// 合并数组 \narr = [1]\narr2 = [2,3]\narr3 = [4,5]\n[...arr, ...arr2, ...arr3] // [1,2,3,4,5]\n[first, ...rest] = [1,2,3,4,5] // first = 1 ;rest = [2,3,4,5]\nArray.from() // 转化为真正数组\nArray.of() // 将一组值 转化为数组\narr.copyWithin() // 当前数组内的指定位置复制到其他位置\narr.find() // 返回符合条件的数组\narr.findIndex() // 返回符合条件的数组成员的位置\narr.fill() // 使用给定的值填充一个数组\narr.entries() // 键值对遍历用 for...of\narr.keys() // 键遍历用 for...of\narr.values() // 值遍历用 for...of\narr.includes() // 包含\n\n// 数组空位 会明确的作为undefined处理\n\n```\n\n## 对象\n\n```javascript\nObject.is() // 判断两个值相等\nObject.assign(target, ...sources) // 将源对象的可枚举属性复制到目标对象\nfunction clone(origin){\n    let originProto = Object.getPrototypeOf(origin);\n    return Object.assign(Object.create(originProto),origin);\n}\nObject.getOwnPropertyDescriptor(); // 属性描述\n// for ... in/Object.keys/JSON.stringify/Object.assign 会忽略枚举属性为false的值\n```\n\n对象遍历\n\n1. for...in 遍历自身和继承的可枚举属性（不含Symbol属性）\n2. Object.keys(obj) 遍历自身（不含继承）的可枚举属性（不含Symbol属性）\n3. Object.getOwnPropertyNames(obj) 遍历自身的所有属性（不含Symbol属性）\n4. Object.getOwnPropertySymbols(obj) 遍历自身所有Symbol属性\n5. Reflect.ownKeys(obj) 遍历自身所有属性\n\n```javascript\n// __proto__ 属性 - 内部属性，不建议使用\nObject.setPrototypeOf(object， prototype) // 写操作\nObject.getPrototypeOf() // 读操作\nObject.keys(object) // 遍历自身（不含继承）的可枚举属性（不含Symbol属性）\nObject.values(object) // 参数对象自身的（不含继承的）所有可遍历属性的键值 \nObject.entries(object) // 参数对象自身的（不含继承的）所有可遍历属性的键值数组 \nObject.getOwnPropertyDescriptor(object, 'propName') // 返回某个对象属性的描述对象\nObject.getOwnPropertyDescriptors(object) // 同上\n\n// Null传导运算符\nvar a = b?.c?.d?.e;\n// b c d 有一个是 undefined 或者 null 都会直接返回\n\n```\n\n## Symbol 独一无二的值\n\n七种数据类型：`Undefined`、`Null`、 `Boolean`、 `String`、 `Number`、 `Object`、 `Symbol`\n\n使用方式：\n\n```javascript\nlet s = Symbol();\n// 接受参数作为描述 在控制台显示区分\nlet s = Symbol('abc');\n// 如果参数是一个对象 就会调用对象的toString方法\n// 每次生成的Symbol都不相等\n```\n\n`Symbol` 作为属性名，可以用于构建枚举量或者内部方法。\n\n```javascript\nSymbol.for() // 检索已经存在的量 不存在则新建\nSymbol.keyFor() // 返回Symbol的key值\n```\n\n对象的11个内置`Symbol`值\n\n1. Symbol.hasInstance \n2. Symbol.isConcatSpreadable\n3. Symbol.species\n4. Symbol.match\n5. Symbol.replace\n6. Symbol.search\n7. Symbol.split\n8. Symbol.iterator\n9. Symbol.toPrimitive\n10. Symbol.toStringTag\n11. Symbol.unscopables\n\n实例\n\n```javascript\n// #1\nclass MyClass{\n    [Symbol.hasInstance] (p) {\n        return p instanceof Array;\n    }\n}\n[1, 2, 3] instanceof new MyClass(); // true\n\n// #2 \nlet obj = {length:2, 0:'c', 1:'d'};\n['a','b'].concat(obj,'e'); // a b obj e\n\nobj[Symbol.isConcatSpreadable] = true; // 需要手动设置\n['a','b'].concat(obj,'e'); // a b c d e\n\n// #3\n\n```\n\n## Set Map\n\n* Set - add delete has clear size\n* WeakSet - 成员只能是对象\n* Map - size set get has delete clear\n* WeakMap - 仅接受对象作为键名 没有size属性\n* WeakMap 很适合实现listener 和 部署私有属性\n\n```javascript\n// Map转对象\nfunction strMapToObj(strMap){\n    let obj = Object.create(null);\n    for(let [k,v] of strMap){\n        obj[k] = v;\n    }\n    return obj;\n}\n// 对象转Map\nfunction objToStrMap(obj){\n    let strMap = new Map();\n    for(let k of Object.keys(objs)){\n        strMap.set(k,obj[k]);\n    }\n    return strMap;\n}\n// Map转JSON\nfunction strMapToJson(strMap){\n    return JSON.stringify(strMapToObj(strMap));\n}\nfunction mapToArrayJson(strMap){\n    return JSON.stringify([...strMap]);\n}\n// JSON转Map\nfunction jsonToStrMap(jsonStr){\n    return objToStrMap(JSON.parse(jsonStr));\n}\nfunction jsonToMap(sonStr){\n    return new Map(JSON.parse(jsonStr));\n}\n\n```\n\n## Proxy 修改某些操作的默认行为\n\n```javascript\n// 实例方法\nget()\nset()\napply()\nhas()\nconstruct()\ndeleteProperty()\ndefineProperty()\ngetOwnPropertyDescriptor()\ngetPrototypeOf()\nisExtensible()\nownKeys()\npreventExtensions()\nsetPrototypeOf()\nProxy.revocable()\n```\n\n## Reflect 类似 Proxy\n\n```javascript\n// 13个静态方法\nReflect.apply\nReflect.construct\nReflect.get\nReflect.set\nReflect.defineProperty\nReflect.deleteProperty\nReflect.has\nReflect.ownKeys\nReflect.isExtensible\nReflect.preventExtensions\nReflect.getOwnPropertyDescriptor\nReflect.getPrototypeOf\nReflect.setPrototypeOf \n```\n\n## Promise\n\n```javascript\n// 使用实例\nvar promise = new Promise(function(resolve,reject){\n    // ... some code\n\n    if(/*异步操作成功*/){\n        resolve(value);\n    }else{\n        reject(error);\n    }\n});\npromise.then(function(value){\n    // 成功\n},function(error){\n    // 失败\n}).catch(console.error);\n// 推迟执行\nfunction timeout(ms){\n    return new Promise((resolve,reject) => {\n        setTimeout(resolve, ms, 'done');\n    });\n}\ntimeout(100).then((value) => console.log(value));\n// 异步加载图片\nfunction loadImageAsync(url){\n    return new Promise((res,rej)=>{\n        let image = new Image();\n        image.onload = function(){\n            res(image);\n        };\n        image.onerror = function(){\n            rej(new Error(\"Could not load image at \" + url));\n        };\n        image.src = url ;\n    });\n}\n// Promise 实现 ajax\nfunction getJSon(url){\n    return new Promise((res, rej)=>{\n        let client = new XMLHttpRequest();\n        client.open(\"GET\",url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n        function handler(){\n            if(this.readyState !== 4){\n                return ;\n            }\n            if(this.status === 200){\n                res(this.response);\n            }else{\n                rej(new Error(this.statusText));\n            }\n        }\n    });\n}\n// Promise.all 全部状态改变才改变\nvar a = Promise.all([new Promise(),new Peomise()]);\n// Promise.race() 有一个改变就返回\nvar a = Promise.race([new Promise(),new Peomise()]);\n// Promise.resolve() 将普通方法转换为Promise方法\n// Promise.reject() \n\n// done()\nPromise.prototype.done = function(onFulfilled, onRejected){\n    this.then(onFulfilled, onRejected).catch(function(reason){\n        setTimeout(function(){throw reason;},0);\n    });\n}\n// finally()\nPromise.prototype.finally = function(callback){\n    let P = this.constructor;\n    return this.then(\n        value => P.resolve(callback()).then(() => value),\n        reason => P.resolve(callback()).then(() => { throw reason})\n    );\n} \n// Promise.try() catch 方法仅捕捉异步错误 所以需要try捕捉更多问题\n\n\n```\n \n## Iterator 和 for ... of\n\n## Genertor函数 异步编程解决方案\n\n```javascript\nfunction* gen(){\n    yield \"hello\";\n    yield \"world\";\n    yield \"ending\";\n}\nvar g = gen();\ng.next(); // { value : \"hello\", done: false}\ng.next(); // ... \n\n// Generator.prototype.return()\n\nfunction* clock(){\n    while(true){\n        console.log(\"tick!\");\n        yield;\n        console.log(\"tock!\");\n        yield;\n    }\n}\n// 协程\n\n// Thunk函数 自动执行Gen函数\n//es5\nvar Thunk = function(fn){\n    return function(){\n        var args = Array.prototype.slice.call(arguments);\n        return function (callback){\n            args.push(callback);\n            return fn.apply(this, args);\n        };\n    };\n};\n//es6\nconst Thunk = function(fn){\n    return function(...args){\n        return function(callback){\n            return fn.call(this, ...args,callback);\n        };\n    };\n};\n\n// Thunkify 模块（建议生产环境用这个）\n// co 模块 自动执行gen程序 ***\n\n\n```\n\n## async 改进 gen函数\n\n```javascript\n// 实例\nasync function funcName(){\n    var f1 = await readFile();\n    // ...\n}\nfunName();\n\n```\n\n## Class\n\n```javascript\nclass Point{\n    constructor(x,y){\n        this.x = x;\n        this.y = y;\n        this.__a = 123;\n        console.log('point run');\n    }\n    set prop(str){\n        console.log(str);\n    }\n    get prop(){\n        return \"123\";\n    }\n    toString (){\n        return \"hello\";\n    }\n    static say(){\n        console.log(this.__a);\n    }\n}\nPoint.prop = 1;// 静态属性\n\nclass ColorPoint extends Point{\n    constructor(){\n        super(1,1);\n        console.log('color point run');\n    }\n}\n```\n\n## 修饰器\n\n## Module语法\n\n```javascript\nimport {stat, exist, readFile} from 'fs';\nvar a = 1;\nvar b = 2;\nexport const A = 1; // 输出常量\nexport {a as c, b};\n\n```\n"},{"title":"【SCRUM】敏捷好，敏捷坏","excerpt":"<p>该文章引用自 《程序员的呐喊》， 作者：<a href=\"https://en.wikipedia.org/wiki/Steve_Yegge\">Steve Yegge</a>，译者：徐旭铭。</p>\n<p>“争球（Scrums）是橄榄球里最危险的词，因为摔倒或是动作不当可能会导致前排运动员受伤，基至可能会扭坏脖子” —— 维基百科</p>\n","url":"/2018/02/08/转载/【SCRUM】敏捷好，敏捷坏","fromDate":"2018-02-08","category":"转载","text":"<p>该文章引用自 《程序员的呐喊》， 作者：<a href=\"https://en.wikipedia.org/wiki/Steve_Yegge\">Steve Yegge</a>，译者：徐旭铭。</p>\n<p>“争球（Scrums）是橄榄球里最危险的词，因为摔倒或是动作不当可能会导致前排运动员受伤，基至可能会扭坏脖子” —— 维基百科</p>\n<!-- more -->\n<p>在我小的时候，胆固醇还是个坏东西。大家都知道。脂肪，不好。胆固醇，不好。盐，不好。所有的东西都不好。但是现在胆固醇里也分好坏，好像我们能区分它们似的。这种转变非常奇怪，就好像食品药物监督管理局突然发布声明，宣布老鼠药其实有两种：一种是好的，另一种是坏的，你应该吃很多好的老鼠药，不要吃坏的老鼠药，而且绝对不要混在一起吃。</p>\n<p>差不多在一年前，我对所谓的“敏捷”编程还只是抱着相当单一的看法，觉得这玩意儿基本上又是某种愚蠢的营销骗局，是专门忽悠那些从来没读过《没有银弹》的菜鸟程序员的科技病毒，那种会去延长保险期，会买自助教科书，相信老板真的关心他们，把他们当人看的程序员，那种专门去各种研讨会认识朋友，不知道怎么在机场躲开和挥舞小本本的狂热分子眼神接触的程序员，还有那些真的相信在小卡片上乱写一通就能瞬间简化软件开发的家伙。</p>\n<p>这些人都是傻瓜。只有这个词可以形容他们。我体内坏的那部分胆固醇告诉我，敏捷方法论就是忽悠那些傻瓜用的。</p>\n<p>不过最近我有了很多机会观察不同风格的敏捷主义，现在我觉得这种看法只有九成是对的，其实还是有好的敏捷的，只不过我花了很长时间，拨开各种对scrum等敏捷流程狂热顶礼膜拜的迷雾后，才看出这一点，现在我应该看得很清楚了。</p>\n<p>欢迎你们来参加我的研讨班，只要499.95美元，绝对低价!哈哈哈，傻瓜!</p>\n<p>好啦，开个玩笑，研讨班里只有坏的敏捷，要是将来有一天你发现我摇身一变，打着敏捷咨询师的头衔到处招摇撞骗，让无知群众来交钱听我对敏捷开发的深层思考和理念的话，你有权来戳穿我的西洋镜。要是我借口说我只是在说笑，告诉我说我告诉过你我会那么说。要是我辩解说自己其实是泰勒·德顿，命令你不得对我不利，告诉我说我肯定说过自己会说这句话，然后毫不留情地干掉我吧。</p>\n<p>现在我会告诉你好的敏捷是什么样子的，免费哦。</p>\n<p>要把好的敏捷和坏的敏捷孤立起来讲是很难的，所以可能会把它们放在一起说。不过放心，好的那种我会用一只快乐的小老鼠来标注，而标的那种则会用一只悲伤的死老鼠来标注，这样你就能分清楚啦。</p>\n<h2>坏的那种</h2>\n<p>(死老鼠)</p>\n<p>远古时代，大多数公司都会采用这样的软件开发流程：</p>\n<ul>\n<li>雇一堆工程师，然后再雇用更多的工程师。</li>\n<li>幻想一个项目出来。</li>\n<li>定一个打算发布的日期。</li>\n<li>指派一些工程师开始干活。</li>\n<li>不断催进度，要么最后项目发布，要么全体阵亡，要么干完的同时阵亡。</li>\n<li>然后或许可以搞一个廉价可怜的小聚会。这一步不是必须的。</li>\n<li>然后重新来过。</li>\n</ul>\n<p>谢天谢地，你的公司应该不是这样的吧？好险好险！</p>\n<p>有趣的是，这也是非技术公司(比如克莱斯勒)开发软件的方式，只不过他们没有雇工程师，而是临时招募了一堆软件咨询师，然后丢给他们一份为期两年的项目文档，要求他们不但要按时完成，还要在签署合同后接受客户拍脑袋想出来的各种变化和修改。结果最后做得一塌糊涂，没人愿意付钱，弄得所有人都不开心。</p>\n<p>于是有些咨询师开始琢磨：“嘿，要是这些公司坚持这么幼稚的话，那我们就应该把他们当小孩子!”他们也的确是这么做的。当甲方说“我们要一个A到Z的特性”时，咨询师就会在这些大大的索引卡片上写下“A”，然后再在第二张上写下“B”，依次类推，每张卡片上还有一个时间估算，最后把它们都贴在墙上。每当客户要加什么东西的时候，咨询师就会指指墙壁说：“没问题，伙计。你打算换掉上面哪张卡？伙计？”</p>\n<p>难道没有人质疑过为什么克莱斯勒最后取消了项目吗？（<a href=\"\">https://en.wikipedia.org/wiki/Extreme_programming#History</a>）</p>\n<p>有一天，这帮丢了大客户的咨询师们正在酒吧里消磨时间，其中一个（名叫罗恩·贺伯特）说道：“这种按代码数量收钱的办法太烂了。你们知道怎么才能赚大饯吗？自己开宗立派才是王道。”于是极限编程和科学教诞生了。</p>\n<p>很快，人们就发现所谓的极限编程完全是胡说八道。就拿结对编程来说吧，这算得上是极限编程里最夸张的一项了。敏捷大师都不喜欢谈论它，现实是：根本没人这么工作。它背后的理念是：“如果一个程序员坐在屏幕前能写出好代码，那么10个程序员肯定能做得更好，因为越多越好嘛！可惜大多数屏幕前最多就能挤两个程序员，不然坐着不舒服，所以我们就叫它结对编程吧！”</p>\n<p>这你得原谅他们。这么多年来，和他们打交道的那些公司基本上都是学龄前的智商，时间一长真的会拉低一个人的水平。</p>\n<p>可棘手的地方在于，病毒很难杀干净，特别是那种渗入基因里的东西。当所有人都接受敏捷那套东西后（因为大家都希望工作更有效率），要承认失败的代价是很大的，太丢人了。于是就出现了一些新的敏捷“方法论”，他们宣称尽管那些方法论行不通，但是他们的理论是可行的！</p>\n<p>你自己去看看他们的网站吧（<a href=\"\">http://www.controlchaos.com/</a>）<sup>[1]</sup>。告诉我这些玩意儿不是电视导购。来，试试看。光是看一眼就够丢人了。（作者注:6年了，现在看还是很丢人。）</p>\n<p>由于巴纳姆效应的存在，这帮人还是迅速按到了不少饯，就像科学教一样。这不是他们的错。有的人就是不把自己的钱当回事，更不用提什么尊严了。</p>\n<p>只要观察一下常见营销法则，我们就能明白敏捷方法论有多么不靠谱：</p>\n<ul>\n<li>任何自称“方法论”的东西基本上都是愚蠢的。</li>\n<li>任何需要“传道士”或是喜欢办研讨班的东西，都是专门骗钱的。</li>\n<li>从来不提竞争对手或是替换方案的东西很可能都是自私自利的。</li>\n<li>一般来说，缺乏数学细节的图表都是愚蠢的。</li>\n</ul>\n<p>这単所说的“愚蠢”，是指“专门针对笨蛋的那些了不起的营销手段”。</p>\n<p>无论如何，咨询师们得以继续在各种路演上挥舞光鲜亮丽的小册子。我觉得他们开始的目标只是大公司，反正只要签订灵活的合约，让他们可以不断地在“两个星期”内发布“不管什么东西”，知道客户破产就好了。不过我也觉得应该不会有那么多笨蛋客户会答应签这种合约。</p>\n<p>这就是那些咨询师开始跑来忽悠你的原因。为什么不打入公司内部，直接向开发人员推销呢？很多公司都采用了在上面提到过的那种催进度的开发流程，要是能说服中层经理和技术主管相信这种低成本的方式能救他们于水火，那肯定会有人买账的。</p>\n<p>我的朋友啊，这时开始，他们这些人就从“无害的小丑”变成了“潜在的危险”，因为在这之前，他们只不过是忽悠一下那些连自己开发软件都不会的土豪公司，而现在却可能给我们身边的经理洗脑。大多数情况下，我们对这种尴尬的状况束手无策：一个本来好好的经理现在却深受其害，挥舞着极限编程的书和索引卡，滔滔不绝地鼓吹这种新形式的官僚主义对提升团队生产力有多大帮助。</p>\n<p>我们怎么知道它没有改善生产力呢？这个问题不好答。因为要是很明显的话，它的谎言早就被揭穿了。但是软件工程师的生产力本来就很难衡量，个中原因大家都明白。要科学验证软件开发就更是天方夜谭了。你不能让同一支团队把一个项目做两遍，因为第二次的时候，很多因素都会发生变化。你也不能让两支团队去做同一个项目，因为有太多不可控的因素在里面，而且尝试的代价太高，谁也负担不起，让同一支团队接连去做两个不同项目也不能算是有效的实验。</p>\n<p>最好的办法可能是从很多团队做的很多项目里收集一些统计数据出来，然后看看能不能发现一些相似的地方，然后做一点回归测试，以期发现一些有意义的相关性。但是这些数据要从哪里来？就算公司有保留这种资料，它们也不会给你看的。况且大多数公司也不会保存，它们只会掩盖自己计划的失败，然后乐观地开始下一个项目。（作者注：很多敏捷脑残粉都试图说服我说，有人曾经证明敏捷在某个真正科学的实验里是“行之有效”的。他们在说话的时候，眼睛都是望向别处的。）</p>\n<p>既然没法进行实验和证明，那么它的科学性就值得质疑了，这就是这个问题很难回答的原因，食物肓从现象如此大行其道也是这个原因。人们从心里希望那些减肥食品真的有效，老实说，连我都这么期望。比如隔壁乔家的吃了这个玩意儿以后，成功减掉了35磅这种压根毫无统计意义的个案，会让想要减肥的人听说以后想：“反正试试看也没什么坏处啊。”</p>\n<p>每次我听到别人想要在自己的团队里尝试敏捷方法论的时候，用的也是这个理由。这可不是巧合，</p>\n<p>但是只写坏的敏捷肯定效果不好。就好像不管你怎么吐槽科学教，怎么驳斥食物盲从，谁知道对方有没有听进去呢。消灭这种文化上的东西比戒烟要难多了。我知道是因为我都经历过。想要产生正确的影响，一定要同时另指一条明路，我以前吃过亏就是因为当时没方向，表达不出来。</p>\n<p>坏的敏捷里，最大的问题之一就是它把非敏捷的开发流程武断地分成两类：瀑布式和牛仔式。大家都知道瀑布式不好，这基本上已经是公认的了。那么牛仔式编程又如何呢？敏捷大师们将之定义为“团队里的每个成员都按照自己认为的最佳方式来行事”。</p>\n<p>难道开发流程就只有这些了吗？牛仔式编程一定是不好的吗？敏捷大师们的口气听起来好像是显而易见的，但是除了默认它是“混乱的”外，又说不出具体怎么不好，为什么不好。</p>\n<p>去年我有幸同时观察到了好的敏捷和坏的敏捷，我问了这些团队以及各自的技术主管（同时采用好的和坏的敏捷）很多问题：效果如何，感觉如何，具体流程是怎么样的。我确实很好奇，一方而是因为我去年圣诞节的时候就答应说要尝试一下敏捷（“嘿，反正也没坏处”），结果因为和一个组员争论到底什么数据可以放到索引上而闹得不欢而散，最后不了了之。另一方面，其他组的朋友似乎被这种玩命似的冲进度搞得精疲力竭，这种事情在Google可不常见。</p>\n<p>所以我花了整整一年的时间去深入地观察学习。</p>\n<h2>好的那种</h2>\n<p>（快乐的小老鼠）</p>\n<p>我先来聊一聊Google的开发流程。我说的肯定不完整，但是对今天的讨论来说应该足够了。我在Google待了有一年半了，虽然当初花了点时间，不过我想我已经基本弄明白了。我还在学习。所以这里分享的都是我目前了解到的东西。</p>\n<p>从大局上来看，Google的流程在那些有着比较传统的软件公司出身的人眼里的确很混乱。新人加入的时候，首先引起注意的就是：</p>\n<ul>\n<li>经理也至少有一半时间在写代码，所以他们更像是技术主管。</li>\n<li>工程师可以在任何时候换组，或者换项目，不会有人质疑你。只要一句话，第二天就会有人来帮你把东西都搬到新的组那边去。</li>\n<li>Google的理念是不去告诉工程师要做什么，他们也是这样严格执行的。</li>\n<li>鼓励工程师花20%的时间（这里指的是周一到周五，早上8点到下午5点，不包括周末或是私人时间）去做任何想做的事情，而不是日常工作。</li>\n<li>很少开会，我估计一个工程师平均一周大概开3次会吧，这还包括了和主管的一对一沟通。</li>\n<li>安静的环境。工程师或单独，或三五一组，都非常安静地专注于自己的工作。</li>\n<li>没有甘特图，或是日期-任务-负责人的表格，或是任何看得到的项目管理工具，反正我没见过。</li>\n<li>就算真的碰到项目吃紧的时候（其实很少），大家还是会去吃午饭和晚饭，都是免费的哦，味道也很好（这点还是很出名的），除非自愿，没人会长时间拼命工作。</li>\n</ul>\n<p>当然了，这些说得还是很笼统的。资深一点的员工肯定会有不同的看法，就好像我对亚马逊的看法也不是完全客观一样，毕竟我从1998年开始就在那儿了，遥想当年还是很了不起的。不过我估计大多数Google员工还是会基本同意我的总结的。</p>\n<p>那么这样的形式怎么行得通昵？</p>\n<p>很多人都这么问过我。老实说，连我自己都这么问过自己。那么到底是什么促使工程师去解决那些麻烦的项目，去对付那些满是bug的运维噩梦的呢？要是工程师可以任意选择自己想做的事情，他们又是怎么和公司的目标保持一致的呢？最重要的那些项目是怎么招募到充足合适的人才的？为什么工程师不会肥到堵塞防火通道，逼得救火员要破墙救人？</p>\n<p>我先回答最后一个问题，然后再解释其他的。简单来说，我们有一种Noogler Fifteen的说法,这个名字取自Frosh Fifteen：就是说很多大学新生初来乍到，踏上这片压力和比萨之地后，体重都会增加15磅左右。Google的解决办法就是在防火通道里加润滑剂。</p>\n<p>至于剩下的问题，我想大多数的答案都是类似的。</p>\n<p>首先，应该也是最重要的，Google通过利益来驱动行为。通常做比较重要的项目所得到的奖励比做那些不那么重要的项目要来得高，你当然可以选择去做一个研究性质的，看起来很遥远的项目，或许永远也无法实用化，但是它本身必须是有价值的。要是最后证明你对了，其他人都错了（创业公司的梦想），你的小项目确实产生了巨大的影响，那么你肯定会得到奖励。</p>\n<p>具体的奖励和激励形式多种多样，这里是说不完的，经济上的奖励小至礼品卡和按摩券，大到巨额奖金和股票奖励，这里我不想给“巨额”下一个精确的定义，不过以Google的规模，再加上点想象力，你也能猜个大概吧。</p>\n<p>另外还有其他的奖励。其中一个就是Google以同行评审为导向的文化，赢得同事们的尊重可谓意义重大。我个人认为比其他地方都更重要。一部分原因是因为文化就是这样的，一开始是人为，后来渐渐就变成了习以为常的东西。另外，你的同事都是很聪明的人，能赢得他们的尊重可不是件容易的事。你的年终总结也是以此为依据，所以对个人收入也算有间接的影响。</p>\n<p>还有一个就是每个季度，公司都会雷打不动地集会，向大家展示每一个发布的项目，并且打上名字和头像（总是很小），大家都会鼓掌欢呼。光是想想也会让人兴奋不己。Google对产品发布非常认真，我觉得做出了不起的东西并且得到认可是这个公司里最强大的驱动力。至少对我来说是这样的。</p>\n<p>激励并不止如此，我还可以列出很多。对外人来说，各种奖励、自豪感、归属感等梦幻般的一切都太不真实，让人觉得招聘官完全是在忽悠，这个世界上怎么可能有公司对所有的员工都那么慷慨，真的是所有员工哦，甚至连清理厨房的阿姨们都会得到“Google厨房员工”的T恤和套头衫。</p>\n<p>地球上应该找不到第二家这样的公司了。在Google工作有多爽，我三天三夜也说不完。因为每周都有新花样，新福利，新变化，新的调研，来问我们怎么才能让大家在Google过得更舒服。</p>\n<p>当然我也可能是错的，每个季度在大屏幕上看到自己的名字和头像或许并不是最大的动力，驱使大家去做正确的事的动因是感激，这超过了所有的因素，基至比所有的因素加在一起还要多。你会忍不住想要做到最好，因为Google对你的照顾无微不至，让人觉得好像欠了它似的。</p>\n<p>动力这个话题就说到这儿吧。你应该了解了吧。我想，至少大致概念有了。每次有朋友（所有的朋友，不光是我之前工作的地方的朋友）问我在Google工作的感觉如何时，我的感觉就像是，你刚刚出狱，而你的狱友（假设全是幼年被判刑，没见过什么市面）写信问你“外面的世界怎么样”时的那种感觉。你会怎么说？</p>\n<p>我会说，还可以吧，马马虎虎，总的来说还不错。</p>\n<p>虽然以奖励为本的文化确实是一个很重要的因素，但它只能骧动工程师去做“正确的”事，却无法做到高效。所以下而我打算说说他们是怎么做项目的。</p>\n<h2>新生特质 vs. 鞭子</h2>\n<p>项目管理的基本理念就是要带领项目走向完成。这是一个公开显式的过程，需要全程呵护：这离不开有力的领导，组织性，纯粹的意志力，你要做到原本不可能自己发生的事情。</p>\n<p>项目管理的风格多种多样，从轻量级到重量级，但是它们都有相同的特质，那就是对团队施加外力。</p>\n<p>可Googlt却是完全相反，项目启动是因为它处在系统的基态。</p>\n<p>在继续之前，我必须承认，我要说的东西很大胆，而且并不完全属实。我们并不是没有项目经理、产品经理、人事经理、技术主管等职位，但是他们在系统上所需的精力比其他业界都要少得多。说起来，它更像是时不时地轻推一下，而不是持续不断地推动。当团队需要更大的推动力的时候，管理高层就会介入，这一点和其他地方是一样的，但是这并不是持续的推动，</p>\n<p>不过Google是一家有礼貌的公司，所以不会有人对你大喊大叫，也不会有哀嚎、咬牙切齿这种事，更不会有事态升级，相互推诿指责，或是其他公司的高层经常大吼的各种繁文缛节。霍布斯告诉我们，组织是领导人的影像，这一点大家都知道。Google的高层都是温文尔雅的人，所以大家自然也都是如此。</p>\n<p>我之所以说项目启动是Google内部生态系统自然而然所产生的状态，是因为他们花了大量的精力把人引向那个方向。我刚刚也说过，你需要的一切都已经帮你准备好了，所以你可以安下心来。全心投入那些Google喜欢的事情。</p>\n<p>所以项目启动自然也就成了系统里的新生特质。</p>\n<p>这样一来就不需要那一大堆项目管理里常见的理念和方法了：那些对付偷懒的人，夸大估算，迫使大家在设计上达成一致的方法等。开会不用像打仗一样，也不再需要进度报告。因为大家已经有动力去做正确的事，也会一起合作。</p>\n<p>Google所采用的项目管理的技术更像是润滑剂而非汽油：他们是为了让项目进行得更顺利，而不是迫使项目向前进。这里有很多会议室，很多开放空间让人们交谈。团队总是围坐在一起，所以结对编程自然会在需要的时候发生（差不多有5%的时间），而非刻意进行。</p>\n<p>Google知道就算是在安静的公司里，一天的中午是最容易被打扰的，所以很多工程师都会选择很早来上班，或是待到很晚，方便自己有时间专心编程。所以会议都安排在中午，把会议安排在上午10点之前或是下午4点半以后都是很罕见的。在这个时间段外安排会议等于占用了工程师真正干活的时间，所以没人会这么做。</p>\n<p>Google并不是唯一这样管理项门的公司。仔细想一想，其实还有两个地方也是这样的：创业公司和研究生院。Google就像是创业公司和研究生院的结合体：一方面，它好像我们要动作快，先把东西做出来，越简单越好，然后在慢慢改善的创业风格。另一方面，它又很轻松，很低调，我们面临的问题很难，从来没有人解决过，这不是百米冲刺，而是一场马拉松，需要全心全意地专注，拼命开会不顶用。两者的交汇，创业公司和研究生院都是创新的沃土。参与者对结果都负有巨大的责任感。</p>\n<p>这并非原创，但令人惊艳的是Google在那种规模下做成功了。</p>\n<p>能做到这种规模绝非偶然。Google对待这个问题非常认真，他们知道在这种规模下什么情况都有可能发生，所以他们时刻都保持着警惕。正是这种居安思危的态度，才让他们能在壮大的过程中保持生命力和生产力不至衰退（甚至有所改进）。</p>\n<p>从软件工程的角度来讲，Google是一家非常有纪律性的公司，他们对待单元测试、设计文档、代码审查的认真态度，超过我所知的任何一家公司，他们努力保持井然有序，有严格的规章制度，防止某些工程师和团队肆意妄为，如此一来，整个代码库看起来整齐划一，如出自一人之手，所以换组和代码共享也要比其他地方容易得多。</p>\n<p>工程师需要称手的工具，所以Google很自然地会聘请最好的人才来打造自己的工具，而且只要工程师有意向，就会（通过各种激励）鼓励他们去做这方面的工作。如此一来，Google的工具堪称世界级水准，而且还会越来越好。</p>\n<p>这样的例子还有很多，Google的软件工程学实在是太了不起了，我几天几夜都说不完。总之最重要的就是做到那种规模（不光是技术层面，还有组织层面）绝非偶然。只要你适应了Google的风格，一切就会变得非常简单。当然啦，这是和一般意义上大多数公司的软件开发相比。</p>\n<h2>工程表的暴政</h2>\n<p>还有一点。最后我想说的是日期。传统的软件开发几乎毫无例外都是以日期为导向的编程。</p>\n<p>创收公司受制于投资人和预算，日期一定必须有个交代。大客户则能给咨师们设置目标日期。销售和产品经理会根据对市场情况的评估来设置日期。工程师会根据过去的经验来估算日期。所有的估算都是带着过于乐观的有色眼镜进行的，好了伤疤，谁还记得痛。</p>\n<p>所有人挑日期的时候都是随便说的。“这个看起来要3个星期”“要是能在4季度开始的时候市就好了”“大家加把劲，明天之前把它赶出来吧。”</p>\n<p>我们行业里大多数人都是被日期催着走的。永远有下一个里程碑，永远有一最后期限，永远有一个限定时日的目标。</p>\n<p>我能想到的例外大概只有：</p>\n<ol>\n<li>开源软件项目。</li>\n<li>研究生院的项目。</li>\n<li>Google。</li>\n</ol>\n<p>大多数人都默认你会定下一个日期。就算是我最欣赏的软件项目管理著作《人月神话》，也都假设你要定下估算。</p>\n<p>如果你习惯了事先宣布自己的软件，那么大众通常就会想要知道个时间表，这就隐含了日期。我想这就是Google通常不事先公开自己的产品的原因吧。他们是真的明白软件开发这种事情就和烹饪、生孩子一样是急不来的。</p>\n<p>如果上面列出的3个例外不受日期所限，那么又是什么在驱使它们呢？从某种意义上来说应该是对创新和想要做东西的渴望，所有出色的工程师都有这种欲望。（我们行业里有很多人只是想要“混口饭吃”，这种人网家以后就不会再想工作的事了。开源软件得以存在，正是因为这个世界上有比这种人更有激情的人。）</p>\n<p>不过这还不是全部：光有创新的欲望足不够的，因为它的方向感和激励不一定够。(Google肯定也是受制于时间的，它也想要尽可能快地做成一件事。外面不但有很多虎视眈眈的竞争对手，同时还要满足饥渴的投资人不断增长的需求。就连我们自己，也会有一些在有生之年希望能够完成的长远计划和目标。</p>\n<p>只不过区别在于，Google不蠢，也没有自以为是到可以宣城知道一件事应该要多久可以完成。所以在公司里，我唯一知道的日期就是每个季度末，因为大家都会想要挤上那块大大的产品发布的屏幕，希望得到掌声、礼物、奖金、团队旅游等各种只要发布能对Google产生重大影响的产品就能得到的好东西。</p>\n<p>而除此之外的日子就像流水一样，所有人都在以自己的最佳状态工作，当然人跟人是不同的。每个人对工作生活的平衡点定义都不一样，Google则可以让你选择任何合理的平衡点，并作出成绩来。最优的生产力离不开培训，Google为你提供了大量的培训，每周都会有来自内部和外部的讲师做技术演讲，这些演讲都会永久存档，任何时候都可以去看。Google会提供给你任何完成工作所需要的资源，或是学习完成工作需要的知识。最优的生产力和工作用的机器环境也有关系代码的质量，工具，文档，计算平台，团队，甚至是每天的时间（有东西吃，尽量避免打扰等）。</p>\n<p>你要做的就是给工作排排序。什么？数学？我这里有大把：把软件开发映射到排队理论上去。这可不是什么八杆子打不到一起的东西。我们行业里很多人都发现公司组织的模型其实和软件模型区别不大。</p>\n<p>有了这样一个工作队列（当然这是一个优先队列），你瞬间就获得了大部分敏捷方法论所宜称的那些神奇的好处。而且说实话，这比写在一堆索引卡片要实在多了。要是你还不信，那我只好把你的索引卡片都偷偷藏起来了。</p>\n<p>这个优先队列就好像是一个垃圾堆放场，随着项目不断深入展开，你可以把大家的各种想法（包括bug）排列进来。除非这个队列里没有任务了（表示项目可以发布了），否则工程师不会没事做。只要将一个任务放在队列里，附上合适的注解和文档，就知道它是被暂停了还是恢复了。项目还有多少工作量一目了然，愿意的话，还可以根据剩下的任务进行估算，你可以检验已经完成的任务，推断出回归率、个人生产力（如果有必要的话）等属性。你可以看到哪些任务经常被忽略，以此找出组织内部的问题根源。所有人都看得到工作队列，所以重复劳动的可能性很小。</p>\n<p>它的好处还有很多很多。</p>\n<p>但可惜，工作队列对研讨班和峰会来说不够华丽，缺乏魅力。听上去就像是一堆工作，因为它本来就是啊。</p>\n<h2>再议坏的敏捷</h2>\n<p>前而我大致勾勒了公司开发软件的方式，它既不是敏捷方法论，也不是瀑布模型，更不是牛仔式编程，它就是普通的“敏捷”：Google速度很快，反应也很快。</p>\n<p>那么要是在这样一个优秀的软件开发流程之上再套一层敏捷方法论的话会怎么样？你可能会想：“反正也没什么坏处吧！”我去年也曾经这么大胆设想过一次。</p>\n<p>简单来说：其实是有害处的。首当其冲的就是，选择敏捷的技术主管和经理往往对现实缺乏足够的认识。坏的敏捷会在各个层面上伤害团队。</p>\n<p>首先，坏的敏捷会以最糟糕的方式关注日期：短周期，快速发布，不断的估算和重新估算，周期长至以月为单位（这大概还勉强可以接受），短至以天为单位，这是最精糕的。这完全是理想化的世界。</p>\n<p>而在现实世界里，项目的每个参与者都是人。人的状态是有起伏的，有时候你会精力充沛，一口气写18个小时的代码也没问题。有时候却心不在焉，不想写代码。有时候则会感到疲惫不堪，每个人的生物钟和生物节律都不一样，几乎无法控制。要是团队按照天或者半周为步调，我们很可能无法与之协调。</p>\n<p>此外还有私人事物：有些和工作无关的事情会在工作时间突然冒出来，需要你去处理。</p>\n<p>这些因素都不在坏的敏捷的考虑之列，就算完成一个大任务后仍然处于兴奋状态，你也小能继续拼命写代码，因为你要为下一次冲刺保存精力，所以只能放慢节奏。于是这种不一致硬生生将出色的工程师逼成了平庸之辈。</p>\n<p>此外还有所谓的业余时钟：就是那些在主要工作之外你想完成的事情。这通常是一些重要的清理工作，或是其他一些最终能改善整个团队生产力的事情。坏的敏捷对这种事情特别不友好，常常会在一个大的里程碑之后留出一大块时间，让大家去做这种工作，完全不考虑他们当时的状态如何。坏的敏捷只把注意力放在眼前的目标上，这对创新是有害的。虽然他们为自己留出了清理代码的时间，但是却不会无私地去帮助公司里的其他人。毕竟要是你只是机械地照章办事的话，怎么会想到去做别的事情呢？</p>\n<p>不知道为什么，早起的人似乎都很喜欢坏的敏捷，我觉得“天没亮就醒”，“喜欢静态类型，讨厌类型推导”，“连上厕所的时间都要安排好”，“喜欢开会”这些性格特点和“喜欢坏的敏捷”之间肯定存在某种神秘的联系。我说不清楚，但是却发现这种情况很常见。</p>\n<p>大多数工程师都不喜欢早起。我知道有一个组每周至少有一次8点的早会（可能不止一次）。结果他们像僵尸一样坐在那里，对着Email发愣，一直到中午，然后他们都回家睡觉去了。到了晚上他们会再回来工作，但个个都是熊猫眼，好像永远醒不过来似的。我和他们说话的时候，他们也不会心情不好，只是很少会说整句。</p>\n<p>我私下问他们觉得敏捷怎么样，他们的回答是“好像有点用，但是我觉得好像违反了某种工作守恒定律······”，还有“我不知道，我想我们在尝试吧，不过老实说我看不到价值”等。他们都是新人，所以不太敢说话，也没人确定到底是敏捷的问题，还是公司就是这样的。</p>\n<p>朋友，那不是“敏捷”，那只是一堆垃圾。只要你的老板是个容易上当的笨蛋，你就会落入这种处境。</p>\n<h2>好的敏捷应该放弃这个名字</h2>\n<p>时刻警惕而这两种主张：</p>\n<ul>\n<li>“他描绘的所有好东西都是真正的敏捷。”</li>\n<li>“他描绘的所有不好的东西都是执行上的问题”。</li>\n</ul>\n<p>你会不断地听到这种论调。我读了很多关于敏捷的书（所以才能看穿这玩意儿的真身：病毒），也读过很多对敏捷的批评。敏捷借助上面两条那样的诡计来躲避批评：功劳都是我的，坏的都是你们做错了。</p>\n<p>如果90%（甚至更高）的情况下，本意良好的聪明人还是做砸了，那么这个流程就是行不通的，推卸货任的次数是有限的。</p>\n<p>我担心现在“敏健”这个词已经变得太沉重，任何优秀的都应该彻底避开它。我已经解释了“敏捷编程”的两种形式，其实还有第三种（高端、大气、上档次）试图通过技术来提升生产力（比如灵活性）的风格。这种书的名字一般都是《Ruby on Rails敏捷开发》、《敏捷AJAX〉、《敏捷C++》之类的。在我看来，这些名字本身没什么太大的问题，但是它们实在是有点滥用“敏捷”这个词了。</p>\n<p>坦白说，市面上大多数的敏捷其实都是坏的敏捷。</p>\n<p>如果我是你，我就会去掉自己简历里的敏捷字样。我会默默合上讲SCRUM和XP的书，锁进柜子。我会把要干的活都放到bug数据库或者其他工作队列的软件上，丢掉那些索引卡片。我会尽快把敏捷从公司里消灭干净。</p>\n<p>然后我会把精力放在真正的敏捷上（而不是什么方法论）。</p>\n<p>这只是我个人的观点，而且现在都已经早上4点了。你可以有你自己的结论。无论如何，我都不觉得我明天会很早起床。</p>\n<p>哦，对了，差点忘了免贵声明：我的观点不代表Google。这些只是我自己的\n观点，他们看到这篇博客的时候会和你一样惊讶。只不过我希望这更像是“生日惊\n喜”，而不是。在“野外惊到一只犀牛”的那种。走着瞧呗!</p>\n<p>[1] 邮件内容备份：\nHi! Ken Schwaber here. Jeff Sutherland and I developed the Scrum process for complex product development over the last twenty years, and have been friends and co-workers over the last thirty years. We both had become somewhat discouraged as waterfall ate into our pleasure of bringing sophisticated products to market, and Scrum became our effort to redeem our professional lives and professions. I still remember the epiphany I had at DuPont's Advanced Research Facility, when I discovered that our research not only had legs, but was based on first principles .... complex processes require empirical process control!</p>\n<p>Over the last ten years, I’ve developed and signed the Agile Manifesto, and founded and chaired first the Agile Alliance and then the Scrum Alliance. These have all helped Agile and Scrum become accepted as successful alternatives to waterfall and predictive processes, and have been excellent community focal points. We’ve sometimes floundered, such as during certifications, but our profession is a better place to be now than it was ten years ago.</p>\n<p>Agile is now used in more development organizations than waterfall, and in 2009, 86% of all Agile development was based in Scrum. Does this mean that Scrum is superior? No, it simply means that Scrum is simple, well-explained, and easy for people to understand as a community and Scrum teams. However, Scrum is not a silver-bullet. It does not bring success. Intelligent, hard working people can use Scrum to overcome waterfall habits and build the best possible products, but the effort is great and those that succeed will be in the minority. I predicted five years ago that only 25% of all organizations that embraced Scrum would fully benefit, and I see now reason to change my projections.</p>\n<p>This fall, I’m leaving behind my community based work with the various Alliances. I’ve enjoyed the experience and the company. However, I think I can best serve my profession by focusing on working just with those that have the determination to do better, regardless. Those that embrace change to reach excellence. Accordingly, I’ve started Scrum.org. A small number of those with a similar determination and mind-set to mine will be working with me there to help those who are want to reclaim their profession, marketplace dominance, and professional excellence. We will focus on self-assessment, training, coaching, consulting, and superlatives.</p>\n<p>This site, the first home of Scrum, will remain standing with a library of materials that I’ve created on the journey so far. Also, I’ll publish a list of sessions when I will work with the general public in workshops. I look forward to our continued journey, For now, I refer you to www.scrum.org.</p>\n<p>Best regards,\nKen Schwaber</p>\n<h2>作者手记：</h2>\n<p>这篇文章在当时是我写过的文章里最毒辣的。“敏捷”当时正在渗透Google，而它也不怎么受欢迎。所以我只用一只手就扼杀它了。</p>\n<p>写这篇文章我花了好几个星期的时间来斟酌。问过很多人的意见和措辞，甚至包括（当时还是）敏捷的狂热支持者。所以我真的是很用心在写这篇文章。</p>\n<p>在我的文章发表之前，敏捷几乎已经快要成为“主流”了，我的意思是要是你不喜欢它的话，就会被归为异类。而这种唯我独尊的状态也是很危险的。它的危害可能要好多年才会过去。</p>\n<p>正因为我看到这一点，所以主动发起进攻，以期一击毙命。为此也得罪了一些人。但我不在乎。你要敏捷是你的事情，但你没资格逼我同流合污。</p>\n<p>最后我赢了。“我们”赢了。有一些博主也在差不多时候加入我的行列-这也算是一种趋同演化吧，掀起了一场反革命。我们成功传达了一条信息，那就是：你可以拒绝敏捷。这句话可以刻在我的墓碑上。事实上，连“敏捷”那两个字都可以去掉。你永远都有权利说不。</p>\n<p>对我们这一代搞软件工程的人来说这是一大胜利。你根本想不到它的意义有多重大。现在，敏捷已经被戳穿得差不多了，咨询师们基本上已经放弃这个词了，开始用更时髦的“精益”等词汇，妄图救回这课摇钱树。但敏捷的热潮确实是从我的文章发表以后开始消退的。是我给了它致命一击。百足之虫死而不僵，在投入了那么多人力物力去推广行销之后，真的要看它死掉还是要花点时间的。但那已经无可挽回，只是时间的问题罢了。</p>\n<p>正所谓笔端可挽千钧力，要是真的有激情，就为它写文章吧！</p>\n<h2>我的感受：</h2>\n<p>教条式的敏捷被笔者批的一无是处，理性看待所谓的敏捷我想是企业团队管理以及发展过程中重要的事情，我本人的观点基本上与作者类似，但是我看到的并没有作者多，既然公司推行敏捷我还是想看看到底敏捷最后会做成什么样子。究竟是会让天才沦为平庸、企业倒闭还是别的什么好的东西。方法有很多，希望对敏捷的尝试不要做成“信仰”就行了。还是要着手眼前的工作，不忘初心。</p>\n<p>不过，就这篇文章看中国的软件工程业也发展也真的是落后美国十几年不止啊。或者说的更精确点是落后Google十几年不止。</p>\n<p>PS.我倒是觉的SCRUM更适合销售团队，激情永驻~</p>\n<h2>附录</h2>\n<p><a href=\"https://www.zhihu.com/question/29454095\">在百度、阿里巴巴、腾讯等公司工作是种怎样的体验</a> - 据说腾讯自己开发了TAPD产品但是这种产品催生的工作以及效率和压力又是什么样子的呢？我觉得企业特别是软件企业不只要关注效率产品，还有更重要的员工心里（你没看错，不是理），毕竟他是帮助企业发展的核心力量。</p>\n","hasMore":true,"tags":["敏捷","SCRUM"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【SCRUM】敏捷好，敏捷坏\ntags:\n  - 敏捷\n  - SCRUM\ncategories: 转载\ndate: 2018-02-08\nstatus: published\n\n---\n\n该文章引用自 《程序员的呐喊》， 作者：[Steve Yegge](https://en.wikipedia.org/wiki/Steve_Yegge)，译者：徐旭铭。 \n\n“争球（Scrums）是橄榄球里最危险的词，因为摔倒或是动作不当可能会导致前排运动员受伤，基至可能会扭坏脖子” —— 维基百科\n\n<!-- more -->\n\n在我小的时候，胆固醇还是个坏东西。大家都知道。脂肪，不好。胆固醇，不好。盐，不好。所有的东西都不好。但是现在胆固醇里也分好坏，好像我们能区分它们似的。这种转变非常奇怪，就好像食品药物监督管理局突然发布声明，宣布老鼠药其实有两种：一种是好的，另一种是坏的，你应该吃很多好的老鼠药，不要吃坏的老鼠药，而且绝对不要混在一起吃。\n\n差不多在一年前，我对所谓的“敏捷”编程还只是抱着相当单一的看法，觉得这玩意儿基本上又是某种愚蠢的营销骗局，是专门忽悠那些从来没读过《没有银弹》的菜鸟程序员的科技病毒，那种会去延长保险期，会买自助教科书，相信老板真的关心他们，把他们当人看的程序员，那种专门去各种研讨会认识朋友，不知道怎么在机场躲开和挥舞小本本的狂热分子眼神接触的程序员，还有那些真的相信在小卡片上乱写一通就能瞬间简化软件开发的家伙。\n\n这些人都是傻瓜。只有这个词可以形容他们。我体内坏的那部分胆固醇告诉我，敏捷方法论就是忽悠那些傻瓜用的。\n\n不过最近我有了很多机会观察不同风格的敏捷主义，现在我觉得这种看法只有九成是对的，其实还是有好的敏捷的，只不过我花了很长时间，拨开各种对scrum等敏捷流程狂热顶礼膜拜的迷雾后，才看出这一点，现在我应该看得很清楚了。\n\n欢迎你们来参加我的研讨班，只要499.95美元，绝对低价!哈哈哈，傻瓜!\n\n好啦，开个玩笑，研讨班里只有坏的敏捷，要是将来有一天你发现我摇身一变，打着敏捷咨询师的头衔到处招摇撞骗，让无知群众来交钱听我对敏捷开发的深层思考和理念的话，你有权来戳穿我的西洋镜。要是我借口说我只是在说笑，告诉我说我告诉过你我会那么说。要是我辩解说自己其实是泰勒·德顿，命令你不得对我不利，告诉我说我肯定说过自己会说这句话，然后毫不留情地干掉我吧。\n\n现在我会告诉你好的敏捷是什么样子的，免费哦。\n\n要把好的敏捷和坏的敏捷孤立起来讲是很难的，所以可能会把它们放在一起说。不过放心，好的那种我会用一只快乐的小老鼠来标注，而标的那种则会用一只悲伤的死老鼠来标注，这样你就能分清楚啦。\n\n## 坏的那种\n\n(死老鼠)\n\n远古时代，大多数公司都会采用这样的软件开发流程：\n\n* 雇一堆工程师，然后再雇用更多的工程师。\n* 幻想一个项目出来。\n* 定一个打算发布的日期。\n* 指派一些工程师开始干活。\n* 不断催进度，要么最后项目发布，要么全体阵亡，要么干完的同时阵亡。\n* 然后或许可以搞一个廉价可怜的小聚会。这一步不是必须的。\n* 然后重新来过。\n\n谢天谢地，你的公司应该不是这样的吧？好险好险！\n\n有趣的是，这也是非技术公司(比如克莱斯勒)开发软件的方式，只不过他们没有雇工程师，而是临时招募了一堆软件咨询师，然后丢给他们一份为期两年的项目文档，要求他们不但要按时完成，还要在签署合同后接受客户拍脑袋想出来的各种变化和修改。结果最后做得一塌糊涂，没人愿意付钱，弄得所有人都不开心。\n\n于是有些咨询师开始琢磨：“嘿，要是这些公司坚持这么幼稚的话，那我们就应该把他们当小孩子!”他们也的确是这么做的。当甲方说“我们要一个A到Z的特性”时，咨询师就会在这些大大的索引卡片上写下“A”，然后再在第二张上写下“B”，依次类推，每张卡片上还有一个时间估算，最后把它们都贴在墙上。每当客户要加什么东西的时候，咨询师就会指指墙壁说：“没问题，伙计。你打算换掉上面哪张卡？伙计？”\n\n难道没有人质疑过为什么克莱斯勒最后取消了项目吗？（[https://en.wikipedia.org/wiki/Extreme_programming#History]()）\n\n有一天，这帮丢了大客户的咨询师们正在酒吧里消磨时间，其中一个（名叫罗恩·贺伯特）说道：“这种按代码数量收钱的办法太烂了。你们知道怎么才能赚大饯吗？自己开宗立派才是王道。”于是极限编程和科学教诞生了。\n\n很快，人们就发现所谓的极限编程完全是胡说八道。就拿结对编程来说吧，这算得上是极限编程里最夸张的一项了。敏捷大师都不喜欢谈论它，现实是：根本没人这么工作。它背后的理念是：“如果一个程序员坐在屏幕前能写出好代码，那么10个程序员肯定能做得更好，因为越多越好嘛！可惜大多数屏幕前最多就能挤两个程序员，不然坐着不舒服，所以我们就叫它结对编程吧！”\n\n这你得原谅他们。这么多年来，和他们打交道的那些公司基本上都是学龄前的智商，时间一长真的会拉低一个人的水平。\n\n可棘手的地方在于，病毒很难杀干净，特别是那种渗入基因里的东西。当所有人都接受敏捷那套东西后（因为大家都希望工作更有效率），要承认失败的代价是很大的，太丢人了。于是就出现了一些新的敏捷“方法论”，他们宣称尽管那些方法论行不通，但是他们的理论是可行的！\n\n你自己去看看他们的网站吧（[http://www.controlchaos.com/]()）<sup>[1]</sup>。告诉我这些玩意儿不是电视导购。来，试试看。光是看一眼就够丢人了。（作者注:6年了，现在看还是很丢人。）\n\n由于巴纳姆效应的存在，这帮人还是迅速按到了不少饯，就像科学教一样。这不是他们的错。有的人就是不把自己的钱当回事，更不用提什么尊严了。\n\n只要观察一下常见营销法则，我们就能明白敏捷方法论有多么不靠谱：\n\n* 任何自称“方法论”的东西基本上都是愚蠢的。\n* 任何需要“传道士”或是喜欢办研讨班的东西，都是专门骗钱的。\n* 从来不提竞争对手或是替换方案的东西很可能都是自私自利的。\n* 一般来说，缺乏数学细节的图表都是愚蠢的。\n\n这単所说的“愚蠢”，是指“专门针对笨蛋的那些了不起的营销手段”。\n\n无论如何，咨询师们得以继续在各种路演上挥舞光鲜亮丽的小册子。我觉得他们开始的目标只是大公司，反正只要签订灵活的合约，让他们可以不断地在“两个星期”内发布“不管什么东西”，知道客户破产就好了。不过我也觉得应该不会有那么多笨蛋客户会答应签这种合约。\n\n这就是那些咨询师开始跑来忽悠你的原因。为什么不打入公司内部，直接向开发人员推销呢？很多公司都采用了在上面提到过的那种催进度的开发流程，要是能说服中层经理和技术主管相信这种低成本的方式能救他们于水火，那肯定会有人买账的。\n\n我的朋友啊，这时开始，他们这些人就从“无害的小丑”变成了“潜在的危险”，因为在这之前，他们只不过是忽悠一下那些连自己开发软件都不会的土豪公司，而现在却可能给我们身边的经理洗脑。大多数情况下，我们对这种尴尬的状况束手无策：一个本来好好的经理现在却深受其害，挥舞着极限编程的书和索引卡，滔滔不绝地鼓吹这种新形式的官僚主义对提升团队生产力有多大帮助。\n\n我们怎么知道它没有改善生产力呢？这个问题不好答。因为要是很明显的话，它的谎言早就被揭穿了。但是软件工程师的生产力本来就很难衡量，个中原因大家都明白。要科学验证软件开发就更是天方夜谭了。你不能让同一支团队把一个项目做两遍，因为第二次的时候，很多因素都会发生变化。你也不能让两支团队去做同一个项目，因为有太多不可控的因素在里面，而且尝试的代价太高，谁也负担不起，让同一支团队接连去做两个不同项目也不能算是有效的实验。\n\n最好的办法可能是从很多团队做的很多项目里收集一些统计数据出来，然后看看能不能发现一些相似的地方，然后做一点回归测试，以期发现一些有意义的相关性。但是这些数据要从哪里来？就算公司有保留这种资料，它们也不会给你看的。况且大多数公司也不会保存，它们只会掩盖自己计划的失败，然后乐观地开始下一个项目。（作者注：很多敏捷脑残粉都试图说服我说，有人曾经证明敏捷在某个真正科学的实验里是“行之有效”的。他们在说话的时候，眼睛都是望向别处的。）\n\n既然没法进行实验和证明，那么它的科学性就值得质疑了，这就是这个问题很难回答的原因，食物肓从现象如此大行其道也是这个原因。人们从心里希望那些减肥食品真的有效，老实说，连我都这么期望。比如隔壁乔家的吃了这个玩意儿以后，成功减掉了35磅这种压根毫无统计意义的个案，会让想要减肥的人听说以后想：“反正试试看也没什么坏处啊。”\n\n每次我听到别人想要在自己的团队里尝试敏捷方法论的时候，用的也是这个理由。这可不是巧合，\n\n但是只写坏的敏捷肯定效果不好。就好像不管你怎么吐槽科学教，怎么驳斥食物盲从，谁知道对方有没有听进去呢。消灭这种文化上的东西比戒烟要难多了。我知道是因为我都经历过。想要产生正确的影响，一定要同时另指一条明路，我以前吃过亏就是因为当时没方向，表达不出来。\n\n坏的敏捷里，最大的问题之一就是它把非敏捷的开发流程武断地分成两类：瀑布式和牛仔式。大家都知道瀑布式不好，这基本上已经是公认的了。那么牛仔式编程又如何呢？敏捷大师们将之定义为“团队里的每个成员都按照自己认为的最佳方式来行事”。\n\n难道开发流程就只有这些了吗？牛仔式编程一定是不好的吗？敏捷大师们的口气听起来好像是显而易见的，但是除了默认它是“混乱的”外，又说不出具体怎么不好，为什么不好。\n\n去年我有幸同时观察到了好的敏捷和坏的敏捷，我问了这些团队以及各自的技术主管（同时采用好的和坏的敏捷）很多问题：效果如何，感觉如何，具体流程是怎么样的。我确实很好奇，一方而是因为我去年圣诞节的时候就答应说要尝试一下敏捷（“嘿，反正也没坏处”），结果因为和一个组员争论到底什么数据可以放到索引上而闹得不欢而散，最后不了了之。另一方面，其他组的朋友似乎被这种玩命似的冲进度搞得精疲力竭，这种事情在Google可不常见。\n\n所以我花了整整一年的时间去深入地观察学习。\n\n## 好的那种\n\n（快乐的小老鼠）\n\n我先来聊一聊Google的开发流程。我说的肯定不完整，但是对今天的讨论来说应该足够了。我在Google待了有一年半了，虽然当初花了点时间，不过我想我已经基本弄明白了。我还在学习。所以这里分享的都是我目前了解到的东西。\n\n从大局上来看，Google的流程在那些有着比较传统的软件公司出身的人眼里的确很混乱。新人加入的时候，首先引起注意的就是：\n\n* 经理也至少有一半时间在写代码，所以他们更像是技术主管。\n* 工程师可以在任何时候换组，或者换项目，不会有人质疑你。只要一句话，第二天就会有人来帮你把东西都搬到新的组那边去。\n* Google的理念是不去告诉工程师要做什么，他们也是这样严格执行的。\n* 鼓励工程师花20%的时间（这里指的是周一到周五，早上8点到下午5点，不包括周末或是私人时间）去做任何想做的事情，而不是日常工作。\n* 很少开会，我估计一个工程师平均一周大概开3次会吧，这还包括了和主管的一对一沟通。\n* 安静的环境。工程师或单独，或三五一组，都非常安静地专注于自己的工作。\n* 没有甘特图，或是日期-任务-负责人的表格，或是任何看得到的项目管理工具，反正我没见过。\n* 就算真的碰到项目吃紧的时候（其实很少），大家还是会去吃午饭和晚饭，都是免费的哦，味道也很好（这点还是很出名的），除非自愿，没人会长时间拼命工作。\n\n当然了，这些说得还是很笼统的。资深一点的员工肯定会有不同的看法，就好像我对亚马逊的看法也不是完全客观一样，毕竟我从1998年开始就在那儿了，遥想当年还是很了不起的。不过我估计大多数Google员工还是会基本同意我的总结的。\n\n那么这样的形式怎么行得通昵？\n\n很多人都这么问过我。老实说，连我自己都这么问过自己。那么到底是什么促使工程师去解决那些麻烦的项目，去对付那些满是bug的运维噩梦的呢？要是工程师可以任意选择自己想做的事情，他们又是怎么和公司的目标保持一致的呢？最重要的那些项目是怎么招募到充足合适的人才的？为什么工程师不会肥到堵塞防火通道，逼得救火员要破墙救人？\n\n我先回答最后一个问题，然后再解释其他的。简单来说，我们有一种Noogler Fifteen的说法,这个名字取自Frosh Fifteen：就是说很多大学新生初来乍到，踏上这片压力和比萨之地后，体重都会增加15磅左右。Google的解决办法就是在防火通道里加润滑剂。\n\n至于剩下的问题，我想大多数的答案都是类似的。\n\n首先，应该也是最重要的，Google通过利益来驱动行为。通常做比较重要的项目所得到的奖励比做那些不那么重要的项目要来得高，你当然可以选择去做一个研究性质的，看起来很遥远的项目，或许永远也无法实用化，但是它本身必须是有价值的。要是最后证明你对了，其他人都错了（创业公司的梦想），你的小项目确实产生了巨大的影响，那么你肯定会得到奖励。\n\n具体的奖励和激励形式多种多样，这里是说不完的，经济上的奖励小至礼品卡和按摩券，大到巨额奖金和股票奖励，这里我不想给“巨额”下一个精确的定义，不过以Google的规模，再加上点想象力，你也能猜个大概吧。\n\n另外还有其他的奖励。其中一个就是Google以同行评审为导向的文化，赢得同事们的尊重可谓意义重大。我个人认为比其他地方都更重要。一部分原因是因为文化就是这样的，一开始是人为，后来渐渐就变成了习以为常的东西。另外，你的同事都是很聪明的人，能赢得他们的尊重可不是件容易的事。你的年终总结也是以此为依据，所以对个人收入也算有间接的影响。\n\n还有一个就是每个季度，公司都会雷打不动地集会，向大家展示每一个发布的项目，并且打上名字和头像（总是很小），大家都会鼓掌欢呼。光是想想也会让人兴奋不己。Google对产品发布非常认真，我觉得做出了不起的东西并且得到认可是这个公司里最强大的驱动力。至少对我来说是这样的。\n\n激励并不止如此，我还可以列出很多。对外人来说，各种奖励、自豪感、归属感等梦幻般的一切都太不真实，让人觉得招聘官完全是在忽悠，这个世界上怎么可能有公司对所有的员工都那么慷慨，真的是所有员工哦，甚至连清理厨房的阿姨们都会得到“Google厨房员工”的T恤和套头衫。\n\n地球上应该找不到第二家这样的公司了。在Google工作有多爽，我三天三夜也说不完。因为每周都有新花样，新福利，新变化，新的调研，来问我们怎么才能让大家在Google过得更舒服。\n\n当然我也可能是错的，每个季度在大屏幕上看到自己的名字和头像或许并不是最大的动力，驱使大家去做正确的事的动因是感激，这超过了所有的因素，基至比所有的因素加在一起还要多。你会忍不住想要做到最好，因为Google对你的照顾无微不至，让人觉得好像欠了它似的。\n\n动力这个话题就说到这儿吧。你应该了解了吧。我想，至少大致概念有了。每次有朋友（所有的朋友，不光是我之前工作的地方的朋友）问我在Google工作的感觉如何时，我的感觉就像是，你刚刚出狱，而你的狱友（假设全是幼年被判刑，没见过什么市面）写信问你“外面的世界怎么样”时的那种感觉。你会怎么说？\n\n我会说，还可以吧，马马虎虎，总的来说还不错。\n\n虽然以奖励为本的文化确实是一个很重要的因素，但它只能骧动工程师去做“正确的”事，却无法做到高效。所以下而我打算说说他们是怎么做项目的。\n\n## 新生特质 vs. 鞭子\n\n项目管理的基本理念就是要带领项目走向完成。这是一个公开显式的过程，需要全程呵护：这离不开有力的领导，组织性，纯粹的意志力，你要做到原本不可能自己发生的事情。\n\n项目管理的风格多种多样，从轻量级到重量级，但是它们都有相同的特质，那就是对团队施加外力。\n\n可Googlt却是完全相反，项目启动是因为它处在系统的基态。\n\n在继续之前，我必须承认，我要说的东西很大胆，而且并不完全属实。我们并不是没有项目经理、产品经理、人事经理、技术主管等职位，但是他们在系统上所需的精力比其他业界都要少得多。说起来，它更像是时不时地轻推一下，而不是持续不断地推动。当团队需要更大的推动力的时候，管理高层就会介入，这一点和其他地方是一样的，但是这并不是持续的推动，\n\n不过Google是一家有礼貌的公司，所以不会有人对你大喊大叫，也不会有哀嚎、咬牙切齿这种事，更不会有事态升级，相互推诿指责，或是其他公司的高层经常大吼的各种繁文缛节。霍布斯告诉我们，组织是领导人的影像，这一点大家都知道。Google的高层都是温文尔雅的人，所以大家自然也都是如此。\n\n我之所以说项目启动是Google内部生态系统自然而然所产生的状态，是因为他们花了大量的精力把人引向那个方向。我刚刚也说过，你需要的一切都已经帮你准备好了，所以你可以安下心来。全心投入那些Google喜欢的事情。\n\n所以项目启动自然也就成了系统里的新生特质。\n\n这样一来就不需要那一大堆项目管理里常见的理念和方法了：那些对付偷懒的人，夸大估算，迫使大家在设计上达成一致的方法等。开会不用像打仗一样，也不再需要进度报告。因为大家已经有动力去做正确的事，也会一起合作。\n\nGoogle所采用的项目管理的技术更像是润滑剂而非汽油：他们是为了让项目进行得更顺利，而不是迫使项目向前进。这里有很多会议室，很多开放空间让人们交谈。团队总是围坐在一起，所以结对编程自然会在需要的时候发生（差不多有5%的时间），而非刻意进行。\n\nGoogle知道就算是在安静的公司里，一天的中午是最容易被打扰的，所以很多工程师都会选择很早来上班，或是待到很晚，方便自己有时间专心编程。所以会议都安排在中午，把会议安排在上午10点之前或是下午4点半以后都是很罕见的。在这个时间段外安排会议等于占用了工程师真正干活的时间，所以没人会这么做。\n\nGoogle并不是唯一这样管理项门的公司。仔细想一想，其实还有两个地方也是这样的：创业公司和研究生院。Google就像是创业公司和研究生院的结合体：一方面，它好像我们要动作快，先把东西做出来，越简单越好，然后在慢慢改善的创业风格。另一方面，它又很轻松，很低调，我们面临的问题很难，从来没有人解决过，这不是百米冲刺，而是一场马拉松，需要全心全意地专注，拼命开会不顶用。两者的交汇，创业公司和研究生院都是创新的沃土。参与者对结果都负有巨大的责任感。\n\n这并非原创，但令人惊艳的是Google在那种规模下做成功了。\n\n能做到这种规模绝非偶然。Google对待这个问题非常认真，他们知道在这种规模下什么情况都有可能发生，所以他们时刻都保持着警惕。正是这种居安思危的态度，才让他们能在壮大的过程中保持生命力和生产力不至衰退（甚至有所改进）。\n\n从软件工程的角度来讲，Google是一家非常有纪律性的公司，他们对待单元测试、设计文档、代码审查的认真态度，超过我所知的任何一家公司，他们努力保持井然有序，有严格的规章制度，防止某些工程师和团队肆意妄为，如此一来，整个代码库看起来整齐划一，如出自一人之手，所以换组和代码共享也要比其他地方容易得多。\n\n工程师需要称手的工具，所以Google很自然地会聘请最好的人才来打造自己的工具，而且只要工程师有意向，就会（通过各种激励）鼓励他们去做这方面的工作。如此一来，Google的工具堪称世界级水准，而且还会越来越好。\n\n这样的例子还有很多，Google的软件工程学实在是太了不起了，我几天几夜都说不完。总之最重要的就是做到那种规模（不光是技术层面，还有组织层面）绝非偶然。只要你适应了Google的风格，一切就会变得非常简单。当然啦，这是和一般意义上大多数公司的软件开发相比。\n\n## 工程表的暴政\n\n还有一点。最后我想说的是日期。传统的软件开发几乎毫无例外都是以日期为导向的编程。\n\n创收公司受制于投资人和预算，日期一定必须有个交代。大客户则能给咨师们设置目标日期。销售和产品经理会根据对市场情况的评估来设置日期。工程师会根据过去的经验来估算日期。所有的估算都是带着过于乐观的有色眼镜进行的，好了伤疤，谁还记得痛。\n\n所有人挑日期的时候都是随便说的。“这个看起来要3个星期”“要是能在4季度开始的时候市就好了”“大家加把劲，明天之前把它赶出来吧。”\n\n我们行业里大多数人都是被日期催着走的。永远有下一个里程碑，永远有一最后期限，永远有一个限定时日的目标。\n\n我能想到的例外大概只有：\n\n1. 开源软件项目。\n2. 研究生院的项目。\n3. Google。\n\n大多数人都默认你会定下一个日期。就算是我最欣赏的软件项目管理著作《人月神话》，也都假设你要定下估算。\n\n如果你习惯了事先宣布自己的软件，那么大众通常就会想要知道个时间表，这就隐含了日期。我想这就是Google通常不事先公开自己的产品的原因吧。他们是真的明白软件开发这种事情就和烹饪、生孩子一样是急不来的。\n\n如果上面列出的3个例外不受日期所限，那么又是什么在驱使它们呢？从某种意义上来说应该是对创新和想要做东西的渴望，所有出色的工程师都有这种欲望。（我们行业里有很多人只是想要“混口饭吃”，这种人网家以后就不会再想工作的事了。开源软件得以存在，正是因为这个世界上有比这种人更有激情的人。）\n\n不过这还不是全部：光有创新的欲望足不够的，因为它的方向感和激励不一定够。(Google肯定也是受制于时间的，它也想要尽可能快地做成一件事。外面不但有很多虎视眈眈的竞争对手，同时还要满足饥渴的投资人不断增长的需求。就连我们自己，也会有一些在有生之年希望能够完成的长远计划和目标。\n\n只不过区别在于，Google不蠢，也没有自以为是到可以宣城知道一件事应该要多久可以完成。所以在公司里，我唯一知道的日期就是每个季度末，因为大家都会想要挤上那块大大的产品发布的屏幕，希望得到掌声、礼物、奖金、团队旅游等各种只要发布能对Google产生重大影响的产品就能得到的好东西。\n\n而除此之外的日子就像流水一样，所有人都在以自己的最佳状态工作，当然人跟人是不同的。每个人对工作生活的平衡点定义都不一样，Google则可以让你选择任何合理的平衡点，并作出成绩来。最优的生产力离不开培训，Google为你提供了大量的培训，每周都会有来自内部和外部的讲师做技术演讲，这些演讲都会永久存档，任何时候都可以去看。Google会提供给你任何完成工作所需要的资源，或是学习完成工作需要的知识。最优的生产力和工作用的机器环境也有关系代码的质量，工具，文档，计算平台，团队，甚至是每天的时间（有东西吃，尽量避免打扰等）。\n\n你要做的就是给工作排排序。什么？数学？我这里有大把：把软件开发映射到排队理论上去。这可不是什么八杆子打不到一起的东西。我们行业里很多人都发现公司组织的模型其实和软件模型区别不大。\n\n有了这样一个工作队列（当然这是一个优先队列），你瞬间就获得了大部分敏捷方法论所宜称的那些神奇的好处。而且说实话，这比写在一堆索引卡片要实在多了。要是你还不信，那我只好把你的索引卡片都偷偷藏起来了。\n\n这个优先队列就好像是一个垃圾堆放场，随着项目不断深入展开，你可以把大家的各种想法（包括bug）排列进来。除非这个队列里没有任务了（表示项目可以发布了），否则工程师不会没事做。只要将一个任务放在队列里，附上合适的注解和文档，就知道它是被暂停了还是恢复了。项目还有多少工作量一目了然，愿意的话，还可以根据剩下的任务进行估算，你可以检验已经完成的任务，推断出回归率、个人生产力（如果有必要的话）等属性。你可以看到哪些任务经常被忽略，以此找出组织内部的问题根源。所有人都看得到工作队列，所以重复劳动的可能性很小。\n\n它的好处还有很多很多。\n\n但可惜，工作队列对研讨班和峰会来说不够华丽，缺乏魅力。听上去就像是一堆工作，因为它本来就是啊。\n\n## 再议坏的敏捷\n\n前而我大致勾勒了公司开发软件的方式，它既不是敏捷方法论，也不是瀑布模型，更不是牛仔式编程，它就是普通的“敏捷”：Google速度很快，反应也很快。\n\n那么要是在这样一个优秀的软件开发流程之上再套一层敏捷方法论的话会怎么样？你可能会想：“反正也没什么坏处吧！”我去年也曾经这么大胆设想过一次。\n\n简单来说：其实是有害处的。首当其冲的就是，选择敏捷的技术主管和经理往往对现实缺乏足够的认识。坏的敏捷会在各个层面上伤害团队。\n\n首先，坏的敏捷会以最糟糕的方式关注日期：短周期，快速发布，不断的估算和重新估算，周期长至以月为单位（这大概还勉强可以接受），短至以天为单位，这是最精糕的。这完全是理想化的世界。\n\n而在现实世界里，项目的每个参与者都是人。人的状态是有起伏的，有时候你会精力充沛，一口气写18个小时的代码也没问题。有时候却心不在焉，不想写代码。有时候则会感到疲惫不堪，每个人的生物钟和生物节律都不一样，几乎无法控制。要是团队按照天或者半周为步调，我们很可能无法与之协调。\n\n此外还有私人事物：有些和工作无关的事情会在工作时间突然冒出来，需要你去处理。\n\n这些因素都不在坏的敏捷的考虑之列，就算完成一个大任务后仍然处于兴奋状态，你也小能继续拼命写代码，因为你要为下一次冲刺保存精力，所以只能放慢节奏。于是这种不一致硬生生将出色的工程师逼成了平庸之辈。\n\n此外还有所谓的业余时钟：就是那些在主要工作之外你想完成的事情。这通常是一些重要的清理工作，或是其他一些最终能改善整个团队生产力的事情。坏的敏捷对这种事情特别不友好，常常会在一个大的里程碑之后留出一大块时间，让大家去做这种工作，完全不考虑他们当时的状态如何。坏的敏捷只把注意力放在眼前的目标上，这对创新是有害的。虽然他们为自己留出了清理代码的时间，但是却不会无私地去帮助公司里的其他人。毕竟要是你只是机械地照章办事的话，怎么会想到去做别的事情呢？\n\n不知道为什么，早起的人似乎都很喜欢坏的敏捷，我觉得“天没亮就醒”，“喜欢静态类型，讨厌类型推导”，“连上厕所的时间都要安排好”，“喜欢开会”这些性格特点和“喜欢坏的敏捷”之间肯定存在某种神秘的联系。我说不清楚，但是却发现这种情况很常见。\n\n大多数工程师都不喜欢早起。我知道有一个组每周至少有一次8点的早会（可能不止一次）。结果他们像僵尸一样坐在那里，对着Email发愣，一直到中午，然后他们都回家睡觉去了。到了晚上他们会再回来工作，但个个都是熊猫眼，好像永远醒不过来似的。我和他们说话的时候，他们也不会心情不好，只是很少会说整句。\n\n我私下问他们觉得敏捷怎么样，他们的回答是“好像有点用，但是我觉得好像违反了某种工作守恒定律······”，还有“我不知道，我想我们在尝试吧，不过老实说我看不到价值”等。他们都是新人，所以不太敢说话，也没人确定到底是敏捷的问题，还是公司就是这样的。\n\n朋友，那不是“敏捷”，那只是一堆垃圾。只要你的老板是个容易上当的笨蛋，你就会落入这种处境。\n\n## 好的敏捷应该放弃这个名字\n\n时刻警惕而这两种主张：\n\n* “他描绘的所有好东西都是真正的敏捷。”\n* “他描绘的所有不好的东西都是执行上的问题”。\n\n你会不断地听到这种论调。我读了很多关于敏捷的书（所以才能看穿这玩意儿的真身：病毒），也读过很多对敏捷的批评。敏捷借助上面两条那样的诡计来躲避批评：功劳都是我的，坏的都是你们做错了。\n\n如果90%（甚至更高）的情况下，本意良好的聪明人还是做砸了，那么这个流程就是行不通的，推卸货任的次数是有限的。\n\n我担心现在“敏健”这个词已经变得太沉重，任何优秀的都应该彻底避开它。我已经解释了“敏捷编程”的两种形式，其实还有第三种（高端、大气、上档次）试图通过技术来提升生产力（比如灵活性）的风格。这种书的名字一般都是《Ruby on Rails敏捷开发》、《敏捷AJAX〉、《敏捷C++》之类的。在我看来，这些名字本身没什么太大的问题，但是它们实在是有点滥用“敏捷”这个词了。\n\n坦白说，市面上大多数的敏捷其实都是坏的敏捷。\n\n如果我是你，我就会去掉自己简历里的敏捷字样。我会默默合上讲SCRUM和XP的书，锁进柜子。我会把要干的活都放到bug数据库或者其他工作队列的软件上，丢掉那些索引卡片。我会尽快把敏捷从公司里消灭干净。\n\n然后我会把精力放在真正的敏捷上（而不是什么方法论）。\n\n这只是我个人的观点，而且现在都已经早上4点了。你可以有你自己的结论。无论如何，我都不觉得我明天会很早起床。\n\n哦，对了，差点忘了免贵声明：我的观点不代表Google。这些只是我自己的\n观点，他们看到这篇博客的时候会和你一样惊讶。只不过我希望这更像是“生日惊\n喜”，而不是。在“野外惊到一只犀牛”的那种。走着瞧呗!\n\n[1] 邮件内容备份：\nHi! Ken Schwaber here. Jeff Sutherland and I developed the Scrum process for complex product development over the last twenty years, and have been friends and co-workers over the last thirty years. We both had become somewhat discouraged as waterfall ate into our pleasure of bringing sophisticated products to market, and Scrum became our effort to redeem our professional lives and professions. I still remember the epiphany I had at DuPont's Advanced Research Facility, when I discovered that our research not only had legs, but was based on first principles .... complex processes require empirical process control!\n\nOver the last ten years, I’ve developed and signed the Agile Manifesto, and founded and chaired first the Agile Alliance and then the Scrum Alliance. These have all helped Agile and Scrum become accepted as successful alternatives to waterfall and predictive processes, and have been excellent community focal points. We’ve sometimes floundered, such as during certifications, but our profession is a better place to be now than it was ten years ago.\n\nAgile is now used in more development organizations than waterfall, and in 2009, 86% of all Agile development was based in Scrum. Does this mean that Scrum is superior? No, it simply means that Scrum is simple, well-explained, and easy for people to understand as a community and Scrum teams. However, Scrum is not a silver-bullet. It does not bring success. Intelligent, hard working people can use Scrum to overcome waterfall habits and build the best possible products, but the effort is great and those that succeed will be in the minority. I predicted five years ago that only 25% of all organizations that embraced Scrum would fully benefit, and I see now reason to change my projections.\n\nThis fall, I’m leaving behind my community based work with the various Alliances. I’ve enjoyed the experience and the company. However, I think I can best serve my profession by focusing on working just with those that have the determination to do better, regardless. Those that embrace change to reach excellence. Accordingly, I’ve started Scrum.org. A small number of those with a similar determination and mind-set to mine will be working with me there to help those who are want to reclaim their profession, marketplace dominance, and professional excellence. We will focus on self-assessment, training, coaching, consulting, and superlatives.\n\nThis site, the first home of Scrum, will remain standing with a library of materials that I’ve created on the journey so far. Also, I’ll publish a list of sessions when I will work with the general public in workshops. I look forward to our continued journey, For now, I refer you to www.scrum.org.\n\nBest regards,\nKen Schwaber\n\n## 作者手记：\n\n这篇文章在当时是我写过的文章里最毒辣的。“敏捷”当时正在渗透Google，而它也不怎么受欢迎。所以我只用一只手就扼杀它了。\n\n写这篇文章我花了好几个星期的时间来斟酌。问过很多人的意见和措辞，甚至包括（当时还是）敏捷的狂热支持者。所以我真的是很用心在写这篇文章。\n\n在我的文章发表之前，敏捷几乎已经快要成为“主流”了，我的意思是要是你不喜欢它的话，就会被归为异类。而这种唯我独尊的状态也是很危险的。它的危害可能要好多年才会过去。\n\n正因为我看到这一点，所以主动发起进攻，以期一击毙命。为此也得罪了一些人。但我不在乎。你要敏捷是你的事情，但你没资格逼我同流合污。\n\n最后我赢了。“我们”赢了。有一些博主也在差不多时候加入我的行列-这也算是一种趋同演化吧，掀起了一场反革命。我们成功传达了一条信息，那就是：你可以拒绝敏捷。这句话可以刻在我的墓碑上。事实上，连“敏捷”那两个字都可以去掉。你永远都有权利说不。\n\n对我们这一代搞软件工程的人来说这是一大胜利。你根本想不到它的意义有多重大。现在，敏捷已经被戳穿得差不多了，咨询师们基本上已经放弃这个词了，开始用更时髦的“精益”等词汇，妄图救回这课摇钱树。但敏捷的热潮确实是从我的文章发表以后开始消退的。是我给了它致命一击。百足之虫死而不僵，在投入了那么多人力物力去推广行销之后，真的要看它死掉还是要花点时间的。但那已经无可挽回，只是时间的问题罢了。\n\n正所谓笔端可挽千钧力，要是真的有激情，就为它写文章吧！\n\n## 我的感受：\n\n教条式的敏捷被笔者批的一无是处，理性看待所谓的敏捷我想是企业团队管理以及发展过程中重要的事情，我本人的观点基本上与作者类似，但是我看到的并没有作者多，既然公司推行敏捷我还是想看看到底敏捷最后会做成什么样子。究竟是会让天才沦为平庸、企业倒闭还是别的什么好的东西。方法有很多，希望对敏捷的尝试不要做成“信仰”就行了。还是要着手眼前的工作，不忘初心。\n\n不过，就这篇文章看中国的软件工程业也发展也真的是落后美国十几年不止啊。或者说的更精确点是落后Google十几年不止。\n\nPS.我倒是觉的SCRUM更适合销售团队，激情永驻~\n\n## 附录\n\n[在百度、阿里巴巴、腾讯等公司工作是种怎样的体验](https://www.zhihu.com/question/29454095) - 据说腾讯自己开发了TAPD产品但是这种产品催生的工作以及效率和压力又是什么样子的呢？我觉得企业特别是软件企业不只要关注效率产品，还有更重要的员工心里（你没看错，不是理），毕竟他是帮助企业发展的核心力量。\n"},{"title":"【Tomcat】tomcat配置maxPostSize","excerpt":"<p>在tomcat6中maxPostSize在小于等于0的时候都代表没有限制；</p>\n<p>在tomcat7或者8中maxPostSize小于0的时候才是没有限制，等于0就真的是post不能携带参数；</p>\n","url":"/2018/01/15/技术笔记/【Tomcat】tomcat配置maxPostSize","fromDate":"2018-01-15","category":"技术笔记","text":"<p>在tomcat6中maxPostSize在小于等于0的时候都代表没有限制；</p>\n<p>在tomcat7或者8中maxPostSize小于0的时候才是没有限制，等于0就真的是post不能携带参数；</p>\n<!-- more -->\n<h2>引用</h2>\n<ul>\n<li><a href=\"http://tomcat.apache.org/tomcat-6.0-doc/config/http.html\">http://tomcat.apache.org/tomcat-6.0-doc/config/http.html</a></li>\n<li><a href=\"http://tomcat.apache.org/tomcat-7.0-doc/config/http.html\">http://tomcat.apache.org/tomcat-7.0-doc/config/http.html</a></li>\n<li><a href=\"http://tomcat.apache.org/tomcat-8.0-doc/config/http.html\">http://tomcat.apache.org/tomcat-8.0-doc/config/http.html</a></li>\n</ul>\n","hasMore":true,"tags":["tomcat","maxPostSize"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【Tomcat】tomcat配置maxPostSize\ntags:\n  - tomcat\n  - maxPostSize\ncategories: 技术笔记\ndate: 2018-01-15\nstatus: published\n\n---\n\n在tomcat6中maxPostSize在小于等于0的时候都代表没有限制；\n\n在tomcat7或者8中maxPostSize小于0的时候才是没有限制，等于0就真的是post不能携带参数；\n\n<!-- more -->\n\n## 引用\n\n* [http://tomcat.apache.org/tomcat-6.0-doc/config/http.html](http://tomcat.apache.org/tomcat-6.0-doc/config/http.html)\n* [http://tomcat.apache.org/tomcat-7.0-doc/config/http.html](http://tomcat.apache.org/tomcat-7.0-doc/config/http.html)\n* [http://tomcat.apache.org/tomcat-8.0-doc/config/http.html](http://tomcat.apache.org/tomcat-8.0-doc/config/http.html)\n"},{"title":"【自更新应用】简单的应用更新程序","excerpt":"<p>我觉得能够自更新的应用应该具备一下特点：</p>\n<ul>\n<li>首先应该独立于主程序，程序再完备，也不可能将结构设计的几近完美。所以独立于主程序的更新程序，主要目的在于更新主程序这样可以改变主程序的一切文件以及工程结构，甚至构建方式。</li>\n<li>更新程序至少有一个触发点，这个触发点能够使整个程序从头到尾更新，并且确保更新后能正常运行。</li>\n<li>至少有一个远程地址提供应用下载。</li>\n<li>除了以上必须内容之外，也需要有版本管理的能力，能够随意运行任意一个版本的程序。</li>\n<li>对于一个程序来说，能够修复问题，恢复有效的版本是对用户的工作的最大的保障。</li>\n</ul>\n","url":"/2018/01/15/源码解读/【自更新应用】简单的应用更新程序","fromDate":"2018-01-15","category":"源码解读","text":"<p>我觉得能够自更新的应用应该具备一下特点：</p>\n<ul>\n<li>首先应该独立于主程序，程序再完备，也不可能将结构设计的几近完美。所以独立于主程序的更新程序，主要目的在于更新主程序这样可以改变主程序的一切文件以及工程结构，甚至构建方式。</li>\n<li>更新程序至少有一个触发点，这个触发点能够使整个程序从头到尾更新，并且确保更新后能正常运行。</li>\n<li>至少有一个远程地址提供应用下载。</li>\n<li>除了以上必须内容之外，也需要有版本管理的能力，能够随意运行任意一个版本的程序。</li>\n<li>对于一个程序来说，能够修复问题，恢复有效的版本是对用户的工作的最大的保障。</li>\n</ul>\n<!-- more -->\n<p>基于以上自更新程序的功能设想，我觉得可以使用git稍作修饰，从而实现自更新程序。</p>\n<p>自更新应用程序的目录结构：</p>\n<ul>\n<li>ssh\n<ul>\n<li>id_rsa</li>\n<li>id_rsa.pub</li>\n<li>known_hosts</li>\n</ul>\n</li>\n<li>update.jar</li>\n<li>update.json</li>\n</ul>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    &quot;version&quot;:&quot;更新应用程序版本&quot;,</span><br><span class=\"line\">    &quot;url&quot;:&quot;更新url连接&quot;,</span><br><span class=\"line\">    &quot;branch&quot;:&quot;检出的分支名称&quot;,</span><br><span class=\"line\">    &quot;out&quot;:&quot;更新的目录位置&quot;,</span><br><span class=\"line\">    &quot;ssh&quot;:&quot;验证权限文件所在的目录&quot;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>原则上更新的应用程序应该是可执行的应用，如果是java应用的话那就应该是打包好的jar文件才对。这样不至于在运行环境内进行构建浪费时间。如果需要构建的话，我倒是觉得可以写成运行本地命令的方式去构建应用程序，但是这样同时也要求程序开源了。暂时不考虑这种想法。还是以实现程序更新为主。</p>\n<p>先将jgit源码拷贝的本地，并写几个测试类用于下载，解密等操作。</p>\n<p>git clone 远程仓库地址</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git.cloneRepository()</span><br><span class=\"line\">   // 设置远程地址</span><br><span class=\"line\">   .setURI(remoteRepoURI)</span><br><span class=\"line\">   // 设置本地clone地址</span><br><span class=\"line\">   .setDirectory(temp)</span><br><span class=\"line\">   // 设置权限验证</span><br><span class=\"line\">   .setTransportConfigCallback( new TransportConfigCallback() {</span><br><span class=\"line\">     @Override</span><br><span class=\"line\">     public void configure( Transport transport ) {</span><br><span class=\"line\">       SshTransport sshTransport = ( SshTransport )transport;</span><br><span class=\"line\">       sshTransport.setSshSessionFactory( sshSessionFactory );</span><br><span class=\"line\">     }</span><br><span class=\"line\">   })</span><br><span class=\"line\">   // 设置检出分支</span><br><span class=\"line\">   .setBranch(deployBranch)</span><br><span class=\"line\">   .call();</span><br></pre></td></tr></tbody></table></figure>\n<p>其中的sshSessionFactory可以以这种形式生成：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void configure(OpenSshConfig.Host hc, Session session){}</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected JSch createDefaultJSch(FS fs) throws JSchException {</span><br><span class=\"line\">        JSch defaultJSch = super.createDefaultJSch(fs);</span><br><span class=\"line\">        defaultJSch.addIdentity(&quot;/path/to/id_rsa&quot;);</span><br><span class=\"line\">        defaultJSch.setKnownHosts(&quot;/path/to/known_hosts&quot;);</span><br><span class=\"line\">        return defaultJSch;</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n<p>使用maven构建了项目，并且已经可以使用ssh加密连接检出项目了，我想这些应该就足够了。</p>\n<p>期间考虑过使用账号密码的形式去访问远程仓库检出代码如下：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static void checkout(String uri,String key){</span><br><span class=\"line\">    // 解密key 得到账号密码、</span><br><span class=\"line\">    // ....</span><br><span class=\"line\">    CredentialsProvider credentialsProvider = </span><br><span class=\"line\">        new UsernamePasswordCredentialsProvider(&quot;username&quot;, &quot;password&quot;);</span><br><span class=\"line\">      </span><br><span class=\"line\">    Git git = Git.cloneRepository()</span><br><span class=\"line\">        .setURI(remoteRepoURI).setDirectory(new File(localRepoPath))</span><br><span class=\"line\">        .setCredentialsProvider(credentialsProvider)</span><br><span class=\"line\">        .setBranch(&quot;deploy&quot;)</span><br><span class=\"line\">        .call();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>但是由于程序会被反编译，在客户端获取远程仓库的账号密码，这点有些不妥。所以经过考虑最终决定使用git仓库上自有的ssh只读加密方式进行授权检出仓库代码。建议：部署git仓库地址只有编译过的程序即可，如果有源码的话，经过某些手段还是可以看到这些代码的。毕竟更新应用本身能够访问远程仓库地址这点是不能限制的。</p>\n<p>最终项目初步完成，但是再删除缓存文件夹的时候总是删除不干净。可能是因为文件在删除的时候被占用导致的。之后可以先完善一下应用然后解决一下这个问题。</p>\n<p>最终这个<code>update.json</code>文件可以通过远程调用获取，这样就能控制更新内容以及版本了。同时更新<code>update.json</code>的同时还需要考虑更新ssh文件夹内的文件，让授权通过。一般情况下更新逻辑不变的话，这些文件应该是一直不变的。</p>\n<p>解决问题之后的代码：</p>\n<figure class=\"well highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先将需要的参数全部获取</span><br><span class=\"line\">String userDir = System.getProperty(&quot;user.dir&quot;); // 工作目录</span><br><span class=\"line\">String updateJson = FileHelper.toString(new File(userDir+File.separator+&quot;update.json&quot;)); // 更新json 可以通过远程获取</span><br><span class=\"line\">JSONObject jsonObj = JSON.parseObject(updateJson); // 使用fastJson进行转换获取参数</span><br><span class=\"line\">String version = jsonObj.getString(&quot;version&quot;); // 版本</span><br><span class=\"line\">String sshDirName = jsonObj.getString(&quot;ssh&quot;); // 授权文件目录名</span><br><span class=\"line\">String sshDir = userDir + (&quot;&quot;.equalsIgnoreCase(sshDirName)?&quot;&quot;:(File.separator + sshDirName)) ; // 授权文件目录</span><br><span class=\"line\">String remoteRepoURI = jsonObj.getString(&quot;url&quot;); // 远程仓库连接</span><br><span class=\"line\">String outDirName = jsonObj.getString(&quot;out&quot;); // 输出目录名</span><br><span class=\"line\">String outDir = userDir + (&quot;&quot;.equalsIgnoreCase(outDirName)?&quot;&quot;:(File.separator + outDirName)); // 输出目录</span><br><span class=\"line\">String deployBranch = jsonObj.getString(&quot;branch&quot;); // 检出的分支名称</span><br><span class=\"line\">String tempNow  = Code.md5(UUID.randomUUID().toString()); // 缓存文件夹名称</span><br><span class=\"line\">String tempPath = userDir + File.separator + &quot;temp&quot;; // 缓存主目录</span><br><span class=\"line\"></span><br><span class=\"line\">// 清理遗留文件夹</span><br><span class=\"line\">File tempDir = new File(tempPath);</span><br><span class=\"line\">if(tempDir.exists()) FileHelper.del(tempDir);</span><br><span class=\"line\">File outDirFile = new File(outDir);</span><br><span class=\"line\">if(outDirFile.exists()) FileHelper.del(outDirFile);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建ssh连接工厂类 处理授权</span><br><span class=\"line\">SshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void configure(OpenSshConfig.Host hc, Session session) {}</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected JSch createDefaultJSch(FS fs) throws JSchException {</span><br><span class=\"line\">        JSch defaultJSch = super.createDefaultJSch(fs);</span><br><span class=\"line\">        defaultJSch.addIdentity(sshDir + File.separator + &quot;id_rsa&quot;);</span><br><span class=\"line\">        defaultJSch.setKnownHosts( sshDir + File.separator + &quot;known_hosts&quot; );</span><br><span class=\"line\">        return defaultJSch;</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">String tempGitPath = tempPath + File.separator + tempNow;</span><br><span class=\"line\">File tempGitFile = new File(tempGitPath);</span><br><span class=\"line\">if(!tempGitFile.exists()) tempGitFile.mkdirs();</span><br><span class=\"line\"></span><br><span class=\"line\">// 检出远程仓库</span><br><span class=\"line\">Git.cloneRepository()</span><br><span class=\"line\">    .setURI(remoteRepoURI).setDirectory(tempGitFile)</span><br><span class=\"line\">    .setTransportConfigCallback( new TransportConfigCallback() {</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void configure( Transport transport ) {</span><br><span class=\"line\">            SshTransport sshTransport = ( SshTransport )transport;</span><br><span class=\"line\">            sshTransport.setSshSessionFactory( sshSessionFactory );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }).setBranch(deployBranch).call();</span><br><span class=\"line\"></span><br><span class=\"line\">if(!outDirFile.exists())outDirFile.mkdirs();</span><br><span class=\"line\"></span><br><span class=\"line\">// 复制缓存 过来.git文件夹</span><br><span class=\"line\">for(File f:tempGitFile.listFiles()){</span><br><span class=\"line\">    if(f.getName().equalsIgnoreCase(&quot;.git&quot;)){</span><br><span class=\"line\">        continue;</span><br><span class=\"line\">    }else{</span><br><span class=\"line\">        FileHelper.copy(f,outDirFile);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试删除一次缓存目录 可以不进行这一步</span><br><span class=\"line\">if(tempDir.exists()) FileHelper.del(tempDir);</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(&quot;update finish!!!&quot;);</span><br></pre></td></tr></tbody></table></figure>\n<p>至此通过利用git版本控制，一个简单的更新程序就完成了。但是这个更新程序还没有触发器，还不能自动更新。自动更新的方式无非就是让程序循环运行去监听一个触发点，一旦触发则直接运行更新程序。还有就是更新过程中程序不能运行占用文件，这样会导致删除或者覆盖不成功。这篇文章主要解决更新程序的逻辑问题，至于触发点，我想在之后的文章里在探讨。暂时的想法是通过邮件系统，或者是tcp维护心跳的方式进行更新。还有就是如果更新程序本身需要更新怎么办？可能需要程序主体，对更新程序先更新，在通过更新程序更新程序主体这种方式。这些问题会在今后的文章里一一探讨的。</p>\n","hasMore":true,"tags":["应用自更新"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【自更新应用】简单的应用更新程序\ntags:\n  - 应用自更新\ncategories: 源码解读\ndate: 2018-01-15\nstatus: published\n\n---\n\n我觉得能够自更新的应用应该具备一下特点：\n* 首先应该独立于主程序，程序再完备，也不可能将结构设计的几近完美。所以独立于主程序的更新程序，主要目的在于更新主程序这样可以改变主程序的一切文件以及工程结构，甚至构建方式。\n* 更新程序至少有一个触发点，这个触发点能够使整个程序从头到尾更新，并且确保更新后能正常运行。\n* 至少有一个远程地址提供应用下载。\n* 除了以上必须内容之外，也需要有版本管理的能力，能够随意运行任意一个版本的程序。\n* 对于一个程序来说，能够修复问题，恢复有效的版本是对用户的工作的最大的保障。\n\n<!-- more -->\n\n基于以上自更新程序的功能设想，我觉得可以使用git稍作修饰，从而实现自更新程序。\n\n自更新应用程序的目录结构：\n* ssh\n  * id_rsa\n  * id_rsa.pub\n  * known_hosts\n* update.jar\n* update.json \n```json\n{\n    \"version\":\"更新应用程序版本\",\n    \"url\":\"更新url连接\",\n    \"branch\":\"检出的分支名称\",\n    \"out\":\"更新的目录位置\",\n    \"ssh\":\"验证权限文件所在的目录\"\n}\n```\n\n原则上更新的应用程序应该是可执行的应用，如果是java应用的话那就应该是打包好的jar文件才对。这样不至于在运行环境内进行构建浪费时间。如果需要构建的话，我倒是觉得可以写成运行本地命令的方式去构建应用程序，但是这样同时也要求程序开源了。暂时不考虑这种想法。还是以实现程序更新为主。\n\n先将jgit源码拷贝的本地，并写几个测试类用于下载，解密等操作。\n\ngit clone 远程仓库地址\n```java\nGit.cloneRepository()\n   // 设置远程地址\n   .setURI(remoteRepoURI)\n   // 设置本地clone地址\n   .setDirectory(temp)\n   // 设置权限验证\n   .setTransportConfigCallback( new TransportConfigCallback() {\n     @Override\n     public void configure( Transport transport ) {\n       SshTransport sshTransport = ( SshTransport )transport;\n       sshTransport.setSshSessionFactory( sshSessionFactory );\n     }\n   })\n   // 设置检出分支\n   .setBranch(deployBranch)\n   .call();\n```\n\n其中的sshSessionFactory可以以这种形式生成：\n```java\nSshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {\n    @Override\n    protected void configure(OpenSshConfig.Host hc, Session session){}\n    @Override\n    protected JSch createDefaultJSch(FS fs) throws JSchException {\n        JSch defaultJSch = super.createDefaultJSch(fs);\n        defaultJSch.addIdentity(\"/path/to/id_rsa\");\n        defaultJSch.setKnownHosts(\"/path/to/known_hosts\");\n        return defaultJSch;\n    }\n};\n```\n\n使用maven构建了项目，并且已经可以使用ssh加密连接检出项目了，我想这些应该就足够了。\n\n期间考虑过使用账号密码的形式去访问远程仓库检出代码如下：\n```java\n\npublic static void checkout(String uri,String key){\n    // 解密key 得到账号密码、\n    // ....\n    CredentialsProvider credentialsProvider = \n        new UsernamePasswordCredentialsProvider(\"username\", \"password\");\n      \n    Git git = Git.cloneRepository()\n        .setURI(remoteRepoURI).setDirectory(new File(localRepoPath))\n        .setCredentialsProvider(credentialsProvider)\n        .setBranch(\"deploy\")\n        .call();\n}\n```\n但是由于程序会被反编译，在客户端获取远程仓库的账号密码，这点有些不妥。所以经过考虑最终决定使用git仓库上自有的ssh只读加密方式进行授权检出仓库代码。建议：部署git仓库地址只有编译过的程序即可，如果有源码的话，经过某些手段还是可以看到这些代码的。毕竟更新应用本身能够访问远程仓库地址这点是不能限制的。\n\n最终项目初步完成，但是再删除缓存文件夹的时候总是删除不干净。可能是因为文件在删除的时候被占用导致的。之后可以先完善一下应用然后解决一下这个问题。\n\n最终这个`update.json`文件可以通过远程调用获取，这样就能控制更新内容以及版本了。同时更新`update.json`的同时还需要考虑更新ssh文件夹内的文件，让授权通过。一般情况下更新逻辑不变的话，这些文件应该是一直不变的。\n\n解决问题之后的代码：\n\n```java\n// 先将需要的参数全部获取\nString userDir = System.getProperty(\"user.dir\"); // 工作目录\nString updateJson = FileHelper.toString(new File(userDir+File.separator+\"update.json\")); // 更新json 可以通过远程获取\nJSONObject jsonObj = JSON.parseObject(updateJson); // 使用fastJson进行转换获取参数\nString version = jsonObj.getString(\"version\"); // 版本\nString sshDirName = jsonObj.getString(\"ssh\"); // 授权文件目录名\nString sshDir = userDir + (\"\".equalsIgnoreCase(sshDirName)?\"\":(File.separator + sshDirName)) ; // 授权文件目录\nString remoteRepoURI = jsonObj.getString(\"url\"); // 远程仓库连接\nString outDirName = jsonObj.getString(\"out\"); // 输出目录名\nString outDir = userDir + (\"\".equalsIgnoreCase(outDirName)?\"\":(File.separator + outDirName)); // 输出目录\nString deployBranch = jsonObj.getString(\"branch\"); // 检出的分支名称\nString tempNow  = Code.md5(UUID.randomUUID().toString()); // 缓存文件夹名称\nString tempPath = userDir + File.separator + \"temp\"; // 缓存主目录\n\n// 清理遗留文件夹\nFile tempDir = new File(tempPath);\nif(tempDir.exists()) FileHelper.del(tempDir);\nFile outDirFile = new File(outDir);\nif(outDirFile.exists()) FileHelper.del(outDirFile);\n\n// 创建ssh连接工厂类 处理授权\nSshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {\n    @Override\n    protected void configure(OpenSshConfig.Host hc, Session session) {}\n    @Override\n    protected JSch createDefaultJSch(FS fs) throws JSchException {\n        JSch defaultJSch = super.createDefaultJSch(fs);\n        defaultJSch.addIdentity(sshDir + File.separator + \"id_rsa\");\n        defaultJSch.setKnownHosts( sshDir + File.separator + \"known_hosts\" );\n        return defaultJSch;\n    }\n};\n\nString tempGitPath = tempPath + File.separator + tempNow;\nFile tempGitFile = new File(tempGitPath);\nif(!tempGitFile.exists()) tempGitFile.mkdirs();\n\n// 检出远程仓库\nGit.cloneRepository()\n    .setURI(remoteRepoURI).setDirectory(tempGitFile)\n    .setTransportConfigCallback( new TransportConfigCallback() {\n        @Override\n        public void configure( Transport transport ) {\n            SshTransport sshTransport = ( SshTransport )transport;\n            sshTransport.setSshSessionFactory( sshSessionFactory );\n        }\n    }).setBranch(deployBranch).call();\n\nif(!outDirFile.exists())outDirFile.mkdirs();\n\n// 复制缓存 过来.git文件夹\nfor(File f:tempGitFile.listFiles()){\n    if(f.getName().equalsIgnoreCase(\".git\")){\n        continue;\n    }else{\n        FileHelper.copy(f,outDirFile);\n    }\n}\n\n// 尝试删除一次缓存目录 可以不进行这一步\nif(tempDir.exists()) FileHelper.del(tempDir);\n\nlog.info(\"update finish!!!\");\n```\n\n至此通过利用git版本控制，一个简单的更新程序就完成了。但是这个更新程序还没有触发器，还不能自动更新。自动更新的方式无非就是让程序循环运行去监听一个触发点，一旦触发则直接运行更新程序。还有就是更新过程中程序不能运行占用文件，这样会导致删除或者覆盖不成功。这篇文章主要解决更新程序的逻辑问题，至于触发点，我想在之后的文章里在探讨。暂时的想法是通过邮件系统，或者是tcp维护心跳的方式进行更新。还有就是如果更新程序本身需要更新怎么办？可能需要程序主体，对更新程序先更新，在通过更新程序更新程序主体这种方式。这些问题会在今后的文章里一一探讨的。\n\n \n"},{"title":"【狼人杀】简单的逻辑之女巫","excerpt":"<blockquote>\n<p>每个人都有正反两套逻辑，一个逻辑占据你的大脑时，也许对的是另外一个逻辑。</p>\n</blockquote>\n<p>先解释两个问题:</p>\n","url":"/2017/10/06/游戏/【狼人杀】简单的逻辑之女巫","fromDate":"2017-10-06","category":"游戏","text":"<blockquote>\n<p>每个人都有正反两套逻辑，一个逻辑占据你的大脑时，也许对的是另外一个逻辑。</p>\n</blockquote>\n<p>先解释两个问题:</p>\n<!-- more -->\n<p>两个逻辑要怎么盘呢？这也许是很多人认错身份的主要原因，脑子里两个逻辑互相伤害，哪个也说的过去。其实想让正反逻辑指向一个结果也是有技巧的，比如上警炸后置位的做法，心理不太强大的人往往在被查杀时就自乱阵脚，没准备好怎么发言就到了自己，可以查杀后置位并且突然断麦。看后置位如何反应。再比如从视野入手，预言家的视野在全局，在前置起跳位，在查验对象。狼跳预言家的视野在狼同伴，主要他会有意无意避开自己同伴或者态度坚决，因为他们知道谁是好人谁是坏人，不知道都是装的。一句话说明就是，一个不知道谁是好人谁是坏人，一个是装不知道。再比如从细节入手，好人往往说话轻松，而人在说谎话的时候会有意无意再三强调，为的是增加自己的可信度。比如好人说话，我是好人态度坚决，而狼人说话我是一个好人为了强调加上了量词。强调方面还看玩家自己积累了。</p>\n<p>下面说第二个问题，我前面民的逻辑出来之后有的朋友不太认同，觉得民认预言家会成为暴民（狼面比较大），会被女巫毒死的。民认预言家确实把自己打成了抗推位，但不会死在夜里，会有遗言。这一点很重要，这里其实对女巫的要求很高，女巫要会珉人。在自己发言的时候要说明认票不认毒，被女巫毒出没有遗言就没有办法点狼和部署下面的玩法了。遗言阶段认民，言语要稳重，让人们信服。告诉预言家我会把警徽发给你，告诉女巫你认出的狼。以及原因。民认预言家确实不好打，会影响游戏体验，但是也能一战成名（那是不可能的，娱乐娱乐）。</p>\n<p>下面说女巫:</p>\n<p>作为睁眼玩家女巫拥有全场最高视角，首先预言家白天会验出人，以及自己会有银水。这样会让女巫经过一轮发言第二天入夜后认清场上至少三人身份，女巫言语比较坚决，认好人那个人就是好人的态度比较强烈。通常爱保人的就是女巫。女巫拥有两瓶药这是女巫身份的象征，解救好人，毒杀狼人都中，算是中规中矩的女巫。一般情况下，第一夜守卫会守自己，所以第一夜是平安夜大概率全靠女巫。狼第二夜自刀的可能性只在污预言家，女巫可以都不救留着药看刀型，决定第二夜毒杀角色。也可以第一夜救人，等待白天推断刀型，基本差不多。第一夜刀杀好人的概率很大。推荐救，也为了游戏体验，后面的刀型可以看白天推断的。</p>\n<p>女巫的玩法:</p>\n<p>警上认民 表水，不跳身份。为的是隐藏下来防止狼跳女巫，二是作为全场视野最全的玩家，可以默默保好人，毒狼人。首夜用解药的女巫没有刀型，大可以根据第二天发言判断结果，根据全场发言，基本上会在前两夜用完自己的药。实在认不清，也不要乱毒，可以等待狼跳女巫毒之。或者在后边的夜晚认清身份去毒。女巫逼不得已认身份需要说清楚自己的毒以及药是都用在什么地方了。总结发言跳女巫可以保民，因为视野清晰可以轻易转变票型。</p>\n<p>警上认神，强势带队打法，很容易把自己送走。需要女巫首夜救人，因为不能自救所以大可以在第一夜救人。这样可以保预言家一轮，守卫守第二夜，女巫被刀，需要女巫在第一天认清局势。打法比较犀利，容错率低。实在认不清可以不毒。不过这样会被怀疑。秉承游戏的娱乐精神还是毒一个吧。</p>\n<p>警下认民打法和警上没什么区别，觉得自己发言犀利的可以上警玩，发言不好的可以警下观望。狼人跳女巫不要急着怼他，认真听发言，特别是划水位，报女巫大腿的，听发言状态。夜晚毒之。</p>\n<p>警下认神，有一种可能性是被打成了抗推位，需要认神免死，只认毒不认出，这个时候如果看不出谁是狼，告诉大家晚上毒谁，这样可以免出。狼刀在晚上，大概率女巫不会活着。警下首夜可以不救人，警上待着首夜推荐救人。警下认神还有一种可能性是认清局势带队，或者有人焊跳。留毒就可以了。带队证明自己需要毒，焊跳直接毒就行了。不过自己可能也会死，死之前说明自己的视野。</p>\n<p>警上认狼，警上认狼是女巫独有的打法，女巫首夜被刀，认狼迷惑狼人，注意听所有人发言。狼人应该是迷惑的。特别是女巫后置位发言，女巫证明自己很简单毒一个人即可，当然成本也很大，就是狼刀领先了。实在分不清楚，说明自己是被狼刀走的，没有用药，千万不要爆狼，这样会给狼跳女巫的机会。</p>\n","hasMore":true,"tags":["狼人杀"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【狼人杀】简单的逻辑之女巫\ntags:\n  - 狼人杀\ncategories: 游戏\ndate: 2017-10-06\nstatus: published\n\n---\n\n>每个人都有正反两套逻辑，一个逻辑占据你的大脑时，也许对的是另外一个逻辑。\n\n先解释两个问题:\n\n<!-- more -->\n\n两个逻辑要怎么盘呢？这也许是很多人认错身份的主要原因，脑子里两个逻辑互相伤害，哪个也说的过去。其实想让正反逻辑指向一个结果也是有技巧的，比如上警炸后置位的做法，心理不太强大的人往往在被查杀时就自乱阵脚，没准备好怎么发言就到了自己，可以查杀后置位并且突然断麦。看后置位如何反应。再比如从视野入手，预言家的视野在全局，在前置起跳位，在查验对象。狼跳预言家的视野在狼同伴，主要他会有意无意避开自己同伴或者态度坚决，因为他们知道谁是好人谁是坏人，不知道都是装的。一句话说明就是，一个不知道谁是好人谁是坏人，一个是装不知道。再比如从细节入手，好人往往说话轻松，而人在说谎话的时候会有意无意再三强调，为的是增加自己的可信度。比如好人说话，我是好人态度坚决，而狼人说话我是一个好人为了强调加上了量词。强调方面还看玩家自己积累了。\n\n下面说第二个问题，我前面民的逻辑出来之后有的朋友不太认同，觉得民认预言家会成为暴民（狼面比较大），会被女巫毒死的。民认预言家确实把自己打成了抗推位，但不会死在夜里，会有遗言。这一点很重要，这里其实对女巫的要求很高，女巫要会珉人。在自己发言的时候要说明认票不认毒，被女巫毒出没有遗言就没有办法点狼和部署下面的玩法了。遗言阶段认民，言语要稳重，让人们信服。告诉预言家我会把警徽发给你，告诉女巫你认出的狼。以及原因。民认预言家确实不好打，会影响游戏体验，但是也能一战成名（那是不可能的，娱乐娱乐）。\n\n下面说女巫:\n\n作为睁眼玩家女巫拥有全场最高视角，首先预言家白天会验出人，以及自己会有银水。这样会让女巫经过一轮发言第二天入夜后认清场上至少三人身份，女巫言语比较坚决，认好人那个人就是好人的态度比较强烈。通常爱保人的就是女巫。女巫拥有两瓶药这是女巫身份的象征，解救好人，毒杀狼人都中，算是中规中矩的女巫。一般情况下，第一夜守卫会守自己，所以第一夜是平安夜大概率全靠女巫。狼第二夜自刀的可能性只在污预言家，女巫可以都不救留着药看刀型，决定第二夜毒杀角色。也可以第一夜救人，等待白天推断刀型，基本差不多。第一夜刀杀好人的概率很大。推荐救，也为了游戏体验，后面的刀型可以看白天推断的。\n\n女巫的玩法:\n\n警上认民 表水，不跳身份。为的是隐藏下来防止狼跳女巫，二是作为全场视野最全的玩家，可以默默保好人，毒狼人。首夜用解药的女巫没有刀型，大可以根据第二天发言判断结果，根据全场发言，基本上会在前两夜用完自己的药。实在认不清，也不要乱毒，可以等待狼跳女巫毒之。或者在后边的夜晚认清身份去毒。女巫逼不得已认身份需要说清楚自己的毒以及药是都用在什么地方了。总结发言跳女巫可以保民，因为视野清晰可以轻易转变票型。\n\n警上认神，强势带队打法，很容易把自己送走。需要女巫首夜救人，因为不能自救所以大可以在第一夜救人。这样可以保预言家一轮，守卫守第二夜，女巫被刀，需要女巫在第一天认清局势。打法比较犀利，容错率低。实在认不清可以不毒。不过这样会被怀疑。秉承游戏的娱乐精神还是毒一个吧。\n\n警下认民打法和警上没什么区别，觉得自己发言犀利的可以上警玩，发言不好的可以警下观望。狼人跳女巫不要急着怼他，认真听发言，特别是划水位，报女巫大腿的，听发言状态。夜晚毒之。\n\n警下认神，有一种可能性是被打成了抗推位，需要认神免死，只认毒不认出，这个时候如果看不出谁是狼，告诉大家晚上毒谁，这样可以免出。狼刀在晚上，大概率女巫不会活着。警下首夜可以不救人，警上待着首夜推荐救人。警下认神还有一种可能性是认清局势带队，或者有人焊跳。留毒就可以了。带队证明自己需要毒，焊跳直接毒就行了。不过自己可能也会死，死之前说明自己的视野。\n\n警上认狼，警上认狼是女巫独有的打法，女巫首夜被刀，认狼迷惑狼人，注意听所有人发言。狼人应该是迷惑的。特别是女巫后置位发言，女巫证明自己很简单毒一个人即可，当然成本也很大，就是狼刀领先了。实在分不清楚，说明自己是被狼刀走的，没有用药，千万不要爆狼，这样会给狼跳女巫的机会。\n\n\n"},{"title":"【狼人杀】简单的逻辑之民","excerpt":"<blockquote>\n<p>每个人都有正反两套逻辑，所以老玩家不要被正常的逻辑套路了。新人也不要只信亲和力。</p>\n</blockquote>\n<p>民的想法:</p>\n","url":"/2017/10/06/游戏/【狼人杀】简单的逻辑之民","fromDate":"2017-10-06","category":"游戏","text":"<blockquote>\n<p>每个人都有正反两套逻辑，所以老玩家不要被正常的逻辑套路了。新人也不要只信亲和力。</p>\n</blockquote>\n<p>民的想法:</p>\n<!-- more -->\n<p>民夜晚闭眼，得到的信息最少，可以说分不清场上的局势。当场上有预言家时，往往跟预言家一起投票，少数有自己的想法过夜后会被认成狼人，好人首局不出的打法很简单，不要随便怼别人，不要跳神，在井下好好辨认预言家，帮预言家在全场找狼。</p>\n<p>有几种民的玩法:</p>\n<p>警下认民，疯狂表水。 正逻辑我就是民，我表水。反逻辑，我是狼但我疯狂表水没毛病。 表水民被当成狼的可能性有两个一个是票型，一个是只认民，逻辑混乱。其实民本身逻辑是乱的他们会乱踩，但是这一点总被狼抓住，成为抗推位。民表水时，需要说一下自己的票型，逻辑一定要盘，否则就是抗推位很容易出局。场上有预言家分不清局势，可以选择投给神，或者放弃投票。投神好人警长，放弃可以通过票型找到真假预言家。并出两狼。</p>\n<p>井上前置位认预言家。一个是先置位跳预言家发后置位查杀炸后置位身份，这种玩法在井上打完后置位等后置位发言后直接退水。通过后置位发言可以找到狼位。还有一种是先置位跳预言家，随意发金水也可以发查杀，并且不退水。这种打法，会把自己打成抗推位，但是后置位狼人可能因为这个举动不再跳预言家，真预言家身份坐实后，可以第一天白天自认好人并在自己死后将警徽发给真预言家。即便后置位有狼起跳，没有关系，两个人上大概率会得到警徽，好人起跳预言家只为警徽，所以要深思熟虑发言。在自己跳预言家后，要仔细观察所有人的发言，这个时候好人会分不清楚谁是预言家，而狼人是要装分不清楚的。还有一点，后置位真预言家没有起跳的时候，狼会把你当成真预言家，言语中有肯定的成分就可以出局了。如果狼在你和真预言家之后，他也会分不清楚，狼人的视角下，跳预言家，上来会质疑前置位身份，真的预言家视角，上来认前置位狼位。这点要紧记。</p>\n<p>井上后置位认预言家，可以在第二天白天看发言，决定去留。狼人会分不清谁是预言家，发言中注意这一点。当然好人也分不清谁是预言家，但此时场上至少三个预言家，所以狼是知道谁是自己队友的，言语上一班会踩或者提自己队友，正反逻辑，好人就是五五开，最后通过票型决定狼人是谁。也可以在投票之前了解谁是狼。</p>\n<p>民认狼打法，其实一般不会出现，这种打法一班是保护你认为好人却成了抗推位的人。下场可以咬几个人，正逻辑，我走了 我的队友就是，反逻辑，我走了我要污几个好人。</p>\n<p>民认神打法，切记在先置位确定的预言家给自己金水以后，可以跳神保护神队。这个时候自己是金水，真神不会怀疑自己的身份。并且了解自己的意图。如果随便起跳，更多时候不会说明自己是什么神。不然会被同身份神怼下台。新人神，应该会不管你是不是金水都会怼你...不要抱怨。</p>\n","hasMore":true,"tags":["狼人杀"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【狼人杀】简单的逻辑之民\ntags:\n  - 狼人杀\ncategories: 游戏\ndate: 2017-10-06\nstatus: published\n\n---\n\n>每个人都有正反两套逻辑，所以老玩家不要被正常的逻辑套路了。新人也不要只信亲和力。\n\n民的想法:\n\n<!-- more -->\n\n民夜晚闭眼，得到的信息最少，可以说分不清场上的局势。当场上有预言家时，往往跟预言家一起投票，少数有自己的想法过夜后会被认成狼人，好人首局不出的打法很简单，不要随便怼别人，不要跳神，在井下好好辨认预言家，帮预言家在全场找狼。\n\n有几种民的玩法:\n\n警下认民，疯狂表水。 正逻辑我就是民，我表水。反逻辑，我是狼但我疯狂表水没毛病。 表水民被当成狼的可能性有两个一个是票型，一个是只认民，逻辑混乱。其实民本身逻辑是乱的他们会乱踩，但是这一点总被狼抓住，成为抗推位。民表水时，需要说一下自己的票型，逻辑一定要盘，否则就是抗推位很容易出局。场上有预言家分不清局势，可以选择投给神，或者放弃投票。投神好人警长，放弃可以通过票型找到真假预言家。并出两狼。\n\n井上前置位认预言家。一个是先置位跳预言家发后置位查杀炸后置位身份，这种玩法在井上打完后置位等后置位发言后直接退水。通过后置位发言可以找到狼位。还有一种是先置位跳预言家，随意发金水也可以发查杀，并且不退水。这种打法，会把自己打成抗推位，但是后置位狼人可能因为这个举动不再跳预言家，真预言家身份坐实后，可以第一天白天自认好人并在自己死后将警徽发给真预言家。即便后置位有狼起跳，没有关系，两个人上大概率会得到警徽，好人起跳预言家只为警徽，所以要深思熟虑发言。在自己跳预言家后，要仔细观察所有人的发言，这个时候好人会分不清楚谁是预言家，而狼人是要装分不清楚的。还有一点，后置位真预言家没有起跳的时候，狼会把你当成真预言家，言语中有肯定的成分就可以出局了。如果狼在你和真预言家之后，他也会分不清楚，狼人的视角下，跳预言家，上来会质疑前置位身份，真的预言家视角，上来认前置位狼位。这点要紧记。\n\n井上后置位认预言家，可以在第二天白天看发言，决定去留。狼人会分不清谁是预言家，发言中注意这一点。当然好人也分不清谁是预言家，但此时场上至少三个预言家，所以狼是知道谁是自己队友的，言语上一班会踩或者提自己队友，正反逻辑，好人就是五五开，最后通过票型决定狼人是谁。也可以在投票之前了解谁是狼。\n\n民认狼打法，其实一般不会出现，这种打法一班是保护你认为好人却成了抗推位的人。下场可以咬几个人，正逻辑，我走了 我的队友就是，反逻辑，我走了我要污几个好人。\n\n民认神打法，切记在先置位确定的预言家给自己金水以后，可以跳神保护神队。这个时候自己是金水，真神不会怀疑自己的身份。并且了解自己的意图。如果随便起跳，更多时候不会说明自己是什么神。不然会被同身份神怼下台。新人神，应该会不管你是不是金水都会怼你...不要抱怨。\n"},{"title":"【介绍】衷于栖","excerpt":"<blockquote>\n<p>良禽择木而栖，最困难的不是选择而是坚持，所以取名衷于栖。时刻提醒自己不忘初心；亦有内心不安定之意，在外漂泊，总有时间觉得身体和心灵的不安定，甚至恐惧，时刻提醒自己短暂的波动，不要影响了自己到达终点的信心；同时取谐音‘忠于妻’，因为爱你。</p>\n</blockquote>\n","url":"/2017/10/05/介绍/【介绍】衷于栖","fromDate":"2017-10-05","category":"介绍","text":"<blockquote>\n<p>良禽择木而栖，最困难的不是选择而是坚持，所以取名衷于栖。时刻提醒自己不忘初心；亦有内心不安定之意，在外漂泊，总有时间觉得身体和心灵的不安定，甚至恐惧，时刻提醒自己短暂的波动，不要影响了自己到达终点的信心；同时取谐音‘忠于妻’，因为爱你。</p>\n</blockquote>\n<!-- more -->\n<h3>联系方式</h3>\n<blockquote>\n<p>如果有什么建议或者合作意向欢迎发邮件到我邮箱！我会在每个周末检查邮箱并回复！</p>\n</blockquote>\n<p>邮箱 <a href=\"mailto:feedback@zhoyq.com\">feedback@zhoyq.com</a></p>\n","hasMore":true,"tags":["衷于栖"],"likes":0,"comments":0,"math":false,"content":"---\ntitle: 【介绍】衷于栖\ntags:\n  - 衷于栖\ncategories: 介绍\ndate: 2017-10-05\nstatus: published\n\n---\n\n> 良禽择木而栖，最困难的不是选择而是坚持，所以取名衷于栖。时刻提醒自己不忘初心；亦有内心不安定之意，在外漂泊，总有时间觉得身体和心灵的不安定，甚至恐惧，时刻提醒自己短暂的波动，不要影响了自己到达终点的信心；同时取谐音‘忠于妻’，因为爱你。\n\n<!-- more -->\n\n### 联系方式\n\n> 如果有什么建议或者合作意向欢迎发邮件到我邮箱！我会在每个周末检查邮箱并回复！\n\n邮箱 <feedback@zhoyq.com> \n\n\n"}]